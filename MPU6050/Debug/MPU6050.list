
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  080082b8  080082b8  000182b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086e8  080086e8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  080086e8  080086e8  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080086e8  080086e8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086e8  080086e8  000186e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086ec  080086ec  000186ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080086f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  200001e8  080088d8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000888  080088d8  00020888  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ba4d  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eb7  00000000  00000000  0002bca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a90  00000000  00000000  0002db58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000853  00000000  00000000  0002e5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000297f  00000000  00000000  0002ee3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e534  00000000  00000000  000317ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008de9d  00000000  00000000  0003fcee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ff8  00000000  00000000  000cdb8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000d1b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800829c 	.word	0x0800829c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800829c 	.word	0x0800829c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2iz>:
 8000fe4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30f      	bcc.n	800100e <__aeabi_f2iz+0x2a>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d90d      	bls.n	8001014 <__aeabi_f2iz+0x30>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001004:	fa23 f002 	lsr.w	r0, r3, r2
 8001008:	bf18      	it	ne
 800100a:	4240      	negne	r0, r0
 800100c:	4770      	bx	lr
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	4770      	bx	lr
 8001014:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001018:	d101      	bne.n	800101e <__aeabi_f2iz+0x3a>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	d105      	bne.n	800102a <__aeabi_f2iz+0x46>
 800101e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001022:	bf08      	it	eq
 8001024:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001028:	4770      	bx	lr
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4770      	bx	lr

08001030 <store_char>:
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001042:	3301      	adds	r3, #1
 8001044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001048:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	429a      	cmp	r2, r3
 8001054:	d009      	beq.n	800106a <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	79f9      	ldrb	r1, [r7, #7]
 8001060:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <Uart_isr>:
	if (so_far == len) return 1;
	else return -1;
}

void Uart_isr (UART_HandleTypeDef *huart)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f003 0320 	and.w	r3, r3, #32
 8001092:	2b00      	cmp	r3, #0
 8001094:	d023      	beq.n	80010de <Uart_isr+0x6a>
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	f003 0320 	and.w	r3, r3, #32
 800109c:	2b00      	cmp	r3, #0
 800109e:	d01e      	beq.n	80010de <Uart_isr+0x6a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a3f      	ldr	r2, [pc, #252]	; (80011b0 <Uart_isr+0x13c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d107      	bne.n	80010c6 <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 80010b6:	4b3f      	ldr	r3, [pc, #252]	; (80011b4 <Uart_isr+0x140>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	4611      	mov	r1, r2
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ffb6 	bl	8001030 <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 80010c4:	e06d      	b.n	80011a2 <Uart_isr+0x12e>
        else if (huart == pc_uart)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a3b      	ldr	r2, [pc, #236]	; (80011b8 <Uart_isr+0x144>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d169      	bne.n	80011a2 <Uart_isr+0x12e>
           	store_char (c, _rx_buffer2);  // store data in buffer
 80010ce:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <Uart_isr+0x148>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	4611      	mov	r1, r2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ffaa 	bl	8001030 <store_char>
        return;
 80010dc:	e061      	b.n	80011a2 <Uart_isr+0x12e>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d05f      	beq.n	80011a8 <Uart_isr+0x134>
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d05a      	beq.n	80011a8 <Uart_isr+0x134>
    {
    	if (huart == device_uart){
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a2e      	ldr	r2, [pc, #184]	; (80011b0 <Uart_isr+0x13c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d127      	bne.n	800114a <Uart_isr+0xd6>
    	if(tx_buffer1.head == tx_buffer1.tail)
 80010fa:	4b31      	ldr	r3, [pc, #196]	; (80011c0 <Uart_isr+0x14c>)
 80010fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001100:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <Uart_isr+0x14c>)
 8001102:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001106:	429a      	cmp	r2, r3
 8001108:	d108      	bne.n	800111c <Uart_isr+0xa8>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001118:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 800111a:	e044      	b.n	80011a6 <Uart_isr+0x132>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 800111c:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <Uart_isr+0x14c>)
 800111e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001122:	4a27      	ldr	r2, [pc, #156]	; (80011c0 <Uart_isr+0x14c>)
 8001124:	5cd3      	ldrb	r3, [r2, r3]
 8001126:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8001128:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <Uart_isr+0x14c>)
 800112a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800112e:	3301      	adds	r3, #1
 8001130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001134:	4a22      	ldr	r2, [pc, #136]	; (80011c0 <Uart_isr+0x14c>)
 8001136:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	7b7a      	ldrb	r2, [r7, #13]
 8001146:	605a      	str	r2, [r3, #4]
    	return;
 8001148:	e02d      	b.n	80011a6 <Uart_isr+0x132>
    	else if (huart == pc_uart){
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a1a      	ldr	r2, [pc, #104]	; (80011b8 <Uart_isr+0x144>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d129      	bne.n	80011a6 <Uart_isr+0x132>
        	if(tx_buffer2.head == tx_buffer2.tail)
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <Uart_isr+0x150>)
 8001154:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001158:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <Uart_isr+0x150>)
 800115a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800115e:	429a      	cmp	r2, r3
 8001160:	d108      	bne.n	8001174 <Uart_isr+0x100>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001170:	60da      	str	r2, [r3, #12]
    	return;
 8001172:	e018      	b.n	80011a6 <Uart_isr+0x132>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <Uart_isr+0x150>)
 8001176:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <Uart_isr+0x150>)
 800117c:	5cd3      	ldrb	r3, [r2, r3]
 800117e:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <Uart_isr+0x150>)
 8001182:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001186:	3301      	adds	r3, #1
 8001188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800118c:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <Uart_isr+0x150>)
 800118e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	      huart->Instance->SR;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	7bba      	ldrb	r2, [r7, #14]
 800119e:	605a      	str	r2, [r3, #4]
    	return;
 80011a0:	e001      	b.n	80011a6 <Uart_isr+0x132>
        return;
 80011a2:	bf00      	nop
 80011a4:	e000      	b.n	80011a8 <Uart_isr+0x134>
    	return;
 80011a6:	bf00      	nop
    }
}
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000670 	.word	0x20000670
 80011b4:	20000614 	.word	0x20000614
 80011b8:	200006b8 	.word	0x200006b8
 80011bc:	20000618 	.word	0x20000618
 80011c0:	20000204 	.word	0x20000204
 80011c4:	2000040c 	.word	0x2000040c

080011c8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f023 030f 	bic.w	r3, r3, #15
 80011d8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	f043 030c 	orr.w	r3, r3, #12
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	f043 0308 	orr.w	r3, r3, #8
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 80011f4:	7bbb      	ldrb	r3, [r7, #14]
 80011f6:	f043 030c 	orr.w	r3, r3, #12
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 80011fe:	7bbb      	ldrb	r3, [r7, #14]
 8001200:	f043 0308 	orr.w	r3, r3, #8
 8001204:	b2db      	uxtb	r3, r3
 8001206:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001208:	f107 0208 	add.w	r2, r7, #8
 800120c:	2364      	movs	r3, #100	; 0x64
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2304      	movs	r3, #4
 8001212:	214e      	movs	r1, #78	; 0x4e
 8001214:	4803      	ldr	r0, [pc, #12]	; (8001224 <lcd_send_cmd+0x5c>)
 8001216:	f001 fb9d 	bl	8002954 <HAL_I2C_Master_Transmit>
}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000061c 	.word	0x2000061c

08001228 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af02      	add	r7, sp, #8
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	f023 030f 	bic.w	r3, r3, #15
 8001238:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	011b      	lsls	r3, r3, #4
 800123e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	f043 030d 	orr.w	r3, r3, #13
 8001246:	b2db      	uxtb	r3, r3
 8001248:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	f043 0309 	orr.w	r3, r3, #9
 8001250:	b2db      	uxtb	r3, r3
 8001252:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8001254:	7bbb      	ldrb	r3, [r7, #14]
 8001256:	f043 030d 	orr.w	r3, r3, #13
 800125a:	b2db      	uxtb	r3, r3
 800125c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 800125e:	7bbb      	ldrb	r3, [r7, #14]
 8001260:	f043 0309 	orr.w	r3, r3, #9
 8001264:	b2db      	uxtb	r3, r3
 8001266:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001268:	f107 0208 	add.w	r2, r7, #8
 800126c:	2364      	movs	r3, #100	; 0x64
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2304      	movs	r3, #4
 8001272:	214e      	movs	r1, #78	; 0x4e
 8001274:	4803      	ldr	r0, [pc, #12]	; (8001284 <lcd_send_data+0x5c>)
 8001276:	f001 fb6d 	bl	8002954 <HAL_I2C_Master_Transmit>
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000061c 	.word	0x2000061c

08001288 <lcd_clear>:

void lcd_clear (void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800128e:	2080      	movs	r0, #128	; 0x80
 8001290:	f7ff ff9a 	bl	80011c8 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	e005      	b.n	80012a6 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800129a:	2020      	movs	r0, #32
 800129c:	f7ff ffc4 	bl	8001228 <lcd_send_data>
	for (int i=0; i<70; i++)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3301      	adds	r3, #1
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b45      	cmp	r3, #69	; 0x45
 80012aa:	ddf6      	ble.n	800129a <lcd_clear+0x12>
	}
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	6039      	str	r1, [r7, #0]
    switch (row)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <lcd_put_cur+0x18>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d005      	beq.n	80012d8 <lcd_put_cur+0x22>
 80012cc:	e009      	b.n	80012e2 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d4:	603b      	str	r3, [r7, #0]
            break;
 80012d6:	e004      	b.n	80012e2 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80012de:	603b      	str	r3, [r7, #0]
            break;
 80012e0:	bf00      	nop
    }

    lcd_send_cmd (col);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff6e 	bl	80011c8 <lcd_send_cmd>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <lcd_init>:


void lcd_init (void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80012f8:	2032      	movs	r0, #50	; 0x32
 80012fa:	f000 feff 	bl	80020fc <HAL_Delay>
	lcd_send_cmd (0x30);
 80012fe:	2030      	movs	r0, #48	; 0x30
 8001300:	f7ff ff62 	bl	80011c8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001304:	2005      	movs	r0, #5
 8001306:	f000 fef9 	bl	80020fc <HAL_Delay>
	lcd_send_cmd (0x30);
 800130a:	2030      	movs	r0, #48	; 0x30
 800130c:	f7ff ff5c 	bl	80011c8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001310:	2001      	movs	r0, #1
 8001312:	f000 fef3 	bl	80020fc <HAL_Delay>
	lcd_send_cmd (0x30);
 8001316:	2030      	movs	r0, #48	; 0x30
 8001318:	f7ff ff56 	bl	80011c8 <lcd_send_cmd>
	HAL_Delay(10);
 800131c:	200a      	movs	r0, #10
 800131e:	f000 feed 	bl	80020fc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001322:	2020      	movs	r0, #32
 8001324:	f7ff ff50 	bl	80011c8 <lcd_send_cmd>
	HAL_Delay(10);
 8001328:	200a      	movs	r0, #10
 800132a:	f000 fee7 	bl	80020fc <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800132e:	2028      	movs	r0, #40	; 0x28
 8001330:	f7ff ff4a 	bl	80011c8 <lcd_send_cmd>
	HAL_Delay(1);
 8001334:	2001      	movs	r0, #1
 8001336:	f000 fee1 	bl	80020fc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800133a:	2008      	movs	r0, #8
 800133c:	f7ff ff44 	bl	80011c8 <lcd_send_cmd>
	HAL_Delay(1);
 8001340:	2001      	movs	r0, #1
 8001342:	f000 fedb 	bl	80020fc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001346:	2001      	movs	r0, #1
 8001348:	f7ff ff3e 	bl	80011c8 <lcd_send_cmd>
	HAL_Delay(1);
 800134c:	2001      	movs	r0, #1
 800134e:	f000 fed5 	bl	80020fc <HAL_Delay>
	HAL_Delay(1);
 8001352:	2001      	movs	r0, #1
 8001354:	f000 fed2 	bl	80020fc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001358:	2006      	movs	r0, #6
 800135a:	f7ff ff35 	bl	80011c8 <lcd_send_cmd>
	HAL_Delay(1);
 800135e:	2001      	movs	r0, #1
 8001360:	f000 fecc 	bl	80020fc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001364:	200c      	movs	r0, #12
 8001366:	f7ff ff2f 	bl	80011c8 <lcd_send_cmd>
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}

0800136e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001376:	e006      	b.n	8001386 <lcd_send_string+0x18>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff51 	bl	8001228 <lcd_send_data>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f4      	bne.n	8001378 <lcd_send_string+0xa>
}
 800138e:	bf00      	nop
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <MPU6050_Init>:
int16_t Accel_X_RAW, Accel_Y_RAW, Accel_Z_RAW, Gyro_X_RAW, Gyro_Y_RAW, Gyro_Z_RAW;
float Ax, Ay, Az, Gx, Gy, Gz, pitch, roll, Pre_roll;
int dem =0;

void MPU6050_Init (void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af04      	add	r7, sp, #16
  uint8_t check;
  uint8_t Data;

  HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);  // read WHO_AM_I
 800139e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a2:	9302      	str	r3, [sp, #8]
 80013a4:	2301      	movs	r3, #1
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	1dfb      	adds	r3, r7, #7
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2301      	movs	r3, #1
 80013ae:	2275      	movs	r2, #117	; 0x75
 80013b0:	21d0      	movs	r1, #208	; 0xd0
 80013b2:	4823      	ldr	r0, [pc, #140]	; (8001440 <MPU6050_Init+0xa8>)
 80013b4:	f001 fcc6 	bl	8002d44 <HAL_I2C_Mem_Read>
  if (check == 104)  // 0x68 OR 104 will be returned by the sensor if everything goes well
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	2b68      	cmp	r3, #104	; 0x68
 80013bc:	d13b      	bne.n	8001436 <MPU6050_Init+0x9e>
  {
	  // power management register 0X6B we should write all 0's to wake the sensor up
	  	Data = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	71bb      	strb	r3, [r7, #6]
	  	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 80013c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	2301      	movs	r3, #1
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	1dbb      	adds	r3, r7, #6
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2301      	movs	r3, #1
 80013d2:	226b      	movs	r2, #107	; 0x6b
 80013d4:	21d0      	movs	r1, #208	; 0xd0
 80013d6:	481a      	ldr	r0, [pc, #104]	; (8001440 <MPU6050_Init+0xa8>)
 80013d8:	f001 fbba 	bl	8002b50 <HAL_I2C_Mem_Write>
	  	// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 80013dc:	2307      	movs	r3, #7
 80013de:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80013e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e4:	9302      	str	r3, [sp, #8]
 80013e6:	2301      	movs	r3, #1
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	1dbb      	adds	r3, r7, #6
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2301      	movs	r3, #1
 80013f0:	2219      	movs	r2, #25
 80013f2:	21d0      	movs	r1, #208	; 0xd0
 80013f4:	4812      	ldr	r0, [pc, #72]	; (8001440 <MPU6050_Init+0xa8>)
 80013f6:	f001 fbab 	bl	8002b50 <HAL_I2C_Mem_Write>
		// Set accelerometer configuration in ACCEL_CONFIG Register
		Data = 0x00;  // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
 80013fa:	2300      	movs	r3, #0
 80013fc:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80013fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	2301      	movs	r3, #1
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	1dbb      	adds	r3, r7, #6
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	221c      	movs	r2, #28
 8001410:	21d0      	movs	r1, #208	; 0xd0
 8001412:	480b      	ldr	r0, [pc, #44]	; (8001440 <MPU6050_Init+0xa8>)
 8001414:	f001 fb9c 	bl	8002b50 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		Data = 0x00;  // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 �?/s
 8001418:	2300      	movs	r3, #0
 800141a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 800141c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001420:	9302      	str	r3, [sp, #8]
 8001422:	2301      	movs	r3, #1
 8001424:	9301      	str	r3, [sp, #4]
 8001426:	1dbb      	adds	r3, r7, #6
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2301      	movs	r3, #1
 800142c:	221b      	movs	r2, #27
 800142e:	21d0      	movs	r1, #208	; 0xd0
 8001430:	4803      	ldr	r0, [pc, #12]	; (8001440 <MPU6050_Init+0xa8>)
 8001432:	f001 fb8d 	bl	8002b50 <HAL_I2C_Mem_Write>

  }

}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000061c 	.word	0x2000061c
 8001444:	00000000 	.word	0x00000000

08001448 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel (void)
{
 8001448:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001454:	9302      	str	r3, [sp, #8]
 8001456:	2306      	movs	r3, #6
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	463b      	mov	r3, r7
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2301      	movs	r3, #1
 8001460:	223b      	movs	r2, #59	; 0x3b
 8001462:	21d0      	movs	r1, #208	; 0xd0
 8001464:	4880      	ldr	r0, [pc, #512]	; (8001668 <MPU6050_Read_Accel+0x220>)
 8001466:	f001 fc6d 	bl	8002d44 <HAL_I2C_Mem_Read>
	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800146a:	783b      	ldrb	r3, [r7, #0]
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	b21a      	sxth	r2, r3
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	b21b      	sxth	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	b21a      	sxth	r2, r3
 8001478:	4b7c      	ldr	r3, [pc, #496]	; (800166c <MPU6050_Read_Accel+0x224>)
 800147a:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800147c:	78bb      	ldrb	r3, [r7, #2]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b21a      	sxth	r2, r3
 8001482:	78fb      	ldrb	r3, [r7, #3]
 8001484:	b21b      	sxth	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	b21a      	sxth	r2, r3
 800148a:	4b79      	ldr	r3, [pc, #484]	; (8001670 <MPU6050_Read_Accel+0x228>)
 800148c:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800148e:	793b      	ldrb	r3, [r7, #4]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	b21a      	sxth	r2, r3
 8001494:	797b      	ldrb	r3, [r7, #5]
 8001496:	b21b      	sxth	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b21a      	sxth	r2, r3
 800149c:	4b75      	ldr	r3, [pc, #468]	; (8001674 <MPU6050_Read_Accel+0x22c>)
 800149e:	801a      	strh	r2, [r3, #0]
	Ax = (float)Accel_X_RAW/16384.0;
 80014a0:	4b72      	ldr	r3, [pc, #456]	; (800166c <MPU6050_Read_Accel+0x224>)
 80014a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fbf8 	bl	8000c9c <__aeabi_i2f>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fcfa 	bl	8000eac <__aeabi_fdiv>
 80014b8:	4603      	mov	r3, r0
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b6e      	ldr	r3, [pc, #440]	; (8001678 <MPU6050_Read_Accel+0x230>)
 80014be:	601a      	str	r2, [r3, #0]
	Ay = (float)Accel_Y_RAW/16384.0;
 80014c0:	4b6b      	ldr	r3, [pc, #428]	; (8001670 <MPU6050_Read_Accel+0x228>)
 80014c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fbe8 	bl	8000c9c <__aeabi_i2f>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fcea 	bl	8000eac <__aeabi_fdiv>
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	4b67      	ldr	r3, [pc, #412]	; (800167c <MPU6050_Read_Accel+0x234>)
 80014de:	601a      	str	r2, [r3, #0]
	Az = (float)Accel_Z_RAW/16384.0;
 80014e0:	4b64      	ldr	r3, [pc, #400]	; (8001674 <MPU6050_Read_Accel+0x22c>)
 80014e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fbd8 	bl	8000c9c <__aeabi_i2f>
 80014ec:	4603      	mov	r3, r0
 80014ee:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fcda 	bl	8000eac <__aeabi_fdiv>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b60      	ldr	r3, [pc, #384]	; (8001680 <MPU6050_Read_Accel+0x238>)
 80014fe:	601a      	str	r2, [r3, #0]

	pitch = (float)atan(-Ax/sqrt(pow(Ay,2)+pow(Az,2)))*180/3.142;
 8001500:	4b5d      	ldr	r3, [pc, #372]	; (8001678 <MPU6050_Read_Accel+0x230>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001508:	4618      	mov	r0, r3
 800150a:	f7fe ff8d 	bl	8000428 <__aeabi_f2d>
 800150e:	4604      	mov	r4, r0
 8001510:	460d      	mov	r5, r1
 8001512:	4b5a      	ldr	r3, [pc, #360]	; (800167c <MPU6050_Read_Accel+0x234>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7fe ff86 	bl	8000428 <__aeabi_f2d>
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001524:	f005 fe02 	bl	800712c <pow>
 8001528:	4680      	mov	r8, r0
 800152a:	4689      	mov	r9, r1
 800152c:	4b54      	ldr	r3, [pc, #336]	; (8001680 <MPU6050_Read_Accel+0x238>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe ff79 	bl	8000428 <__aeabi_f2d>
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800153e:	f005 fdf5 	bl	800712c <pow>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4640      	mov	r0, r8
 8001548:	4649      	mov	r1, r9
 800154a:	f7fe fe0f 	bl	800016c <__adddf3>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	f005 fe51 	bl	80071fc <sqrt>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4620      	mov	r0, r4
 8001560:	4629      	mov	r1, r5
 8001562:	f7ff f8e3 	bl	800072c <__aeabi_ddiv>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f005 fe6b 	bl	8007248 <atan>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	f7ff fa85 	bl	8000a88 <__aeabi_d2f>
 800157e:	4603      	mov	r3, r0
 8001580:	4940      	ldr	r1, [pc, #256]	; (8001684 <MPU6050_Read_Accel+0x23c>)
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fbde 	bl	8000d44 <__aeabi_fmul>
 8001588:	4603      	mov	r3, r0
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ff4c 	bl	8000428 <__aeabi_f2d>
 8001590:	a333      	add	r3, pc, #204	; (adr r3, 8001660 <MPU6050_Read_Accel+0x218>)
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	f7ff f8c9 	bl	800072c <__aeabi_ddiv>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff fa71 	bl	8000a88 <__aeabi_d2f>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4a37      	ldr	r2, [pc, #220]	; (8001688 <MPU6050_Read_Accel+0x240>)
 80015aa:	6013      	str	r3, [r2, #0]
	roll = (float)atan(Ay/sqrt(pow(Ax,2)+pow(Az,2)))*180/3.142;
 80015ac:	4b33      	ldr	r3, [pc, #204]	; (800167c <MPU6050_Read_Accel+0x234>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ff39 	bl	8000428 <__aeabi_f2d>
 80015b6:	4604      	mov	r4, r0
 80015b8:	460d      	mov	r5, r1
 80015ba:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <MPU6050_Read_Accel+0x230>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe ff32 	bl	8000428 <__aeabi_f2d>
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015cc:	f005 fdae 	bl	800712c <pow>
 80015d0:	4680      	mov	r8, r0
 80015d2:	4689      	mov	r9, r1
 80015d4:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <MPU6050_Read_Accel+0x238>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ff25 	bl	8000428 <__aeabi_f2d>
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e6:	f005 fda1 	bl	800712c <pow>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4640      	mov	r0, r8
 80015f0:	4649      	mov	r1, r9
 80015f2:	f7fe fdbb 	bl	800016c <__adddf3>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	f005 fdfd 	bl	80071fc <sqrt>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4620      	mov	r0, r4
 8001608:	4629      	mov	r1, r5
 800160a:	f7ff f88f 	bl	800072c <__aeabi_ddiv>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	f005 fe17 	bl	8007248 <atan>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f7ff fa31 	bl	8000a88 <__aeabi_d2f>
 8001626:	4603      	mov	r3, r0
 8001628:	4916      	ldr	r1, [pc, #88]	; (8001684 <MPU6050_Read_Accel+0x23c>)
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fb8a 	bl	8000d44 <__aeabi_fmul>
 8001630:	4603      	mov	r3, r0
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe fef8 	bl	8000428 <__aeabi_f2d>
 8001638:	a309      	add	r3, pc, #36	; (adr r3, 8001660 <MPU6050_Read_Accel+0x218>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7ff f875 	bl	800072c <__aeabi_ddiv>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	f7ff fa1d 	bl	8000a88 <__aeabi_d2f>
 800164e:	4603      	mov	r3, r0
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <MPU6050_Read_Accel+0x244>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800165e:	bf00      	nop
 8001660:	e5604189 	.word	0xe5604189
 8001664:	400922d0 	.word	0x400922d0
 8001668:	2000061c 	.word	0x2000061c
 800166c:	20000700 	.word	0x20000700
 8001670:	20000702 	.word	0x20000702
 8001674:	20000704 	.word	0x20000704
 8001678:	2000070c 	.word	0x2000070c
 800167c:	20000710 	.word	0x20000710
 8001680:	20000714 	.word	0x20000714
 8001684:	43340000 	.word	0x43340000
 8001688:	20000724 	.word	0x20000724
 800168c:	20000728 	.word	0x20000728

08001690 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro (void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYGRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	2306      	movs	r3, #6
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	463b      	mov	r3, r7
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2301      	movs	r3, #1
 80016a6:	2243      	movs	r2, #67	; 0x43
 80016a8:	21d0      	movs	r1, #208	; 0xd0
 80016aa:	4827      	ldr	r0, [pc, #156]	; (8001748 <MPU6050_Read_Gyro+0xb8>)
 80016ac:	f001 fb4a 	bl	8002d44 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80016b0:	783b      	ldrb	r3, [r7, #0]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	787b      	ldrb	r3, [r7, #1]
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	4313      	orrs	r3, r2
 80016bc:	b21a      	sxth	r2, r3
 80016be:	4b23      	ldr	r3, [pc, #140]	; (800174c <MPU6050_Read_Gyro+0xbc>)
 80016c0:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80016c2:	78bb      	ldrb	r3, [r7, #2]
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	b21a      	sxth	r2, r3
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	4313      	orrs	r3, r2
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <MPU6050_Read_Gyro+0xc0>)
 80016d2:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80016d4:	793b      	ldrb	r3, [r7, #4]
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	b21a      	sxth	r2, r3
 80016da:	797b      	ldrb	r3, [r7, #5]
 80016dc:	b21b      	sxth	r3, r3
 80016de:	4313      	orrs	r3, r2
 80016e0:	b21a      	sxth	r2, r3
 80016e2:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <MPU6050_Read_Gyro+0xc4>)
 80016e4:	801a      	strh	r2, [r3, #0]

	Gx = (float)Gyro_X_RAW/131.0;
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <MPU6050_Read_Gyro+0xbc>)
 80016e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fad5 	bl	8000c9c <__aeabi_i2f>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4918      	ldr	r1, [pc, #96]	; (8001758 <MPU6050_Read_Gyro+0xc8>)
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fbd8 	bl	8000eac <__aeabi_fdiv>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <MPU6050_Read_Gyro+0xcc>)
 8001702:	601a      	str	r2, [r3, #0]
	Gy = (float)Gyro_Y_RAW/131.0;
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <MPU6050_Read_Gyro+0xc0>)
 8001706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fac6 	bl	8000c9c <__aeabi_i2f>
 8001710:	4603      	mov	r3, r0
 8001712:	4911      	ldr	r1, [pc, #68]	; (8001758 <MPU6050_Read_Gyro+0xc8>)
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fbc9 	bl	8000eac <__aeabi_fdiv>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <MPU6050_Read_Gyro+0xd0>)
 8001720:	601a      	str	r2, [r3, #0]
	Gz = (float)Gyro_Z_RAW/131.0;
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MPU6050_Read_Gyro+0xc4>)
 8001724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fab7 	bl	8000c9c <__aeabi_i2f>
 800172e:	4603      	mov	r3, r0
 8001730:	4909      	ldr	r1, [pc, #36]	; (8001758 <MPU6050_Read_Gyro+0xc8>)
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fbba 	bl	8000eac <__aeabi_fdiv>
 8001738:	4603      	mov	r3, r0
 800173a:	461a      	mov	r2, r3
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MPU6050_Read_Gyro+0xd4>)
 800173e:	601a      	str	r2, [r3, #0]
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	2000061c 	.word	0x2000061c
 800174c:	20000706 	.word	0x20000706
 8001750:	20000708 	.word	0x20000708
 8001754:	2000070a 	.word	0x2000070a
 8001758:	43030000 	.word	0x43030000
 800175c:	20000718 	.word	0x20000718
 8001760:	2000071c 	.word	0x2000071c
 8001764:	20000720 	.word	0x20000720

08001768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800176e:	f000 fc63 	bl	8002038 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001772:	f000 f8ef 	bl	8001954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001776:	f000 f9ab 	bl	8001ad0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800177a:	f000 f927 	bl	80019cc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800177e:	f000 f953 	bl	8001a28 <MX_USART1_UART_Init>
  //MX_TIM2_Init();
  MX_USART3_UART_Init();
 8001782:	f000 f97b 	bl	8001a7c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001786:	f7ff fdb5 	bl	80012f4 <lcd_init>
  MPU6050_Init();
 800178a:	f7ff fe05 	bl	8001398 <MPU6050_Init>
  lcd_put_cur(0, 0);
 800178e:	2100      	movs	r1, #0
 8001790:	2000      	movs	r0, #0
 8001792:	f7ff fd90 	bl	80012b6 <lcd_put_cur>
  lcd_send_string ("Initialized");
 8001796:	4863      	ldr	r0, [pc, #396]	; (8001924 <main+0x1bc>)
 8001798:	f7ff fde9 	bl	800136e <lcd_send_string>

  HAL_Delay(1000);
 800179c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017a0:	f000 fcac 	bl	80020fc <HAL_Delay>
  lcd_clear();
 80017a4:	f7ff fd70 	bl	8001288 <lcd_clear>
  lcd_put_cur(0, 0);
 80017a8:	2100      	movs	r1, #0
 80017aa:	2000      	movs	r0, #0
 80017ac:	f7ff fd83 	bl	80012b6 <lcd_put_cur>
  lcd_send_string ("MPU6050");
 80017b0:	485d      	ldr	r0, [pc, #372]	; (8001928 <main+0x1c0>)
 80017b2:	f7ff fddc 	bl	800136e <lcd_send_string>

  char buf[20];
  //HAL_TIM_Base_Start_IT(&htim2);
  uint32_t previousMillis = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
  uint32_t interval = 1000; // Khoảng thoi gian 1 giây (1000 ms)
 80017ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017be:	61bb      	str	r3, [r7, #24]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_Accel ();
 80017c0:	f7ff fe42 	bl	8001448 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro ();
 80017c4:	f7ff ff64 	bl	8001690 <MPU6050_Read_Gyro>


	  lcd_clear();
 80017c8:	f7ff fd5e 	bl	8001288 <lcd_clear>

	  sprintf(buf, "%.2f", Ax);
 80017cc:	4b57      	ldr	r3, [pc, #348]	; (800192c <main+0x1c4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fe29 	bl	8000428 <__aeabi_f2d>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4638      	mov	r0, r7
 80017dc:	4954      	ldr	r1, [pc, #336]	; (8001930 <main+0x1c8>)
 80017de:	f003 fb57 	bl	8004e90 <siprintf>
	  lcd_put_cur(0, 0);
 80017e2:	2100      	movs	r1, #0
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff fd66 	bl	80012b6 <lcd_put_cur>
	  lcd_send_string (buf);
 80017ea:	463b      	mov	r3, r7
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fdbe 	bl	800136e <lcd_send_string>

      sprintf(buf, "%.2f", Ay);
 80017f2:	4b50      	ldr	r3, [pc, #320]	; (8001934 <main+0x1cc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fe16 	bl	8000428 <__aeabi_f2d>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4638      	mov	r0, r7
 8001802:	494b      	ldr	r1, [pc, #300]	; (8001930 <main+0x1c8>)
 8001804:	f003 fb44 	bl	8004e90 <siprintf>
      lcd_put_cur(0, 6);
 8001808:	2106      	movs	r1, #6
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff fd53 	bl	80012b6 <lcd_put_cur>
      lcd_send_string (buf);
 8001810:	463b      	mov	r3, r7
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fdab 	bl	800136e <lcd_send_string>

      sprintf(buf, "%.2f", Az);
 8001818:	4b47      	ldr	r3, [pc, #284]	; (8001938 <main+0x1d0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe03 	bl	8000428 <__aeabi_f2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4638      	mov	r0, r7
 8001828:	4941      	ldr	r1, [pc, #260]	; (8001930 <main+0x1c8>)
 800182a:	f003 fb31 	bl	8004e90 <siprintf>
      lcd_put_cur(0, 11);
 800182e:	210b      	movs	r1, #11
 8001830:	2000      	movs	r0, #0
 8001832:	f7ff fd40 	bl	80012b6 <lcd_put_cur>
      lcd_send_string (buf);
 8001836:	463b      	mov	r3, r7
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fd98 	bl	800136e <lcd_send_string>

      sprintf(buf, "%d", abs(roll));
 800183e:	4b3f      	ldr	r3, [pc, #252]	; (800193c <main+0x1d4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fbce 	bl	8000fe4 <__aeabi_f2iz>
 8001848:	4603      	mov	r3, r0
 800184a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800184e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001852:	463b      	mov	r3, r7
 8001854:	493a      	ldr	r1, [pc, #232]	; (8001940 <main+0x1d8>)
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fb1a 	bl	8004e90 <siprintf>
      lcd_put_cur(1, 0);
 800185c:	2100      	movs	r1, #0
 800185e:	2001      	movs	r0, #1
 8001860:	f7ff fd29 	bl	80012b6 <lcd_put_cur>
      lcd_send_string (buf);
 8001864:	463b      	mov	r3, r7
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fd81 	bl	800136e <lcd_send_string>
      HAL_Delay(250);
 800186c:	20fa      	movs	r0, #250	; 0xfa
 800186e:	f000 fc45 	bl	80020fc <HAL_Delay>

      uint32_t currentMillis = HAL_GetTick();
 8001872:	f000 fc39 	bl	80020e8 <HAL_GetTick>
 8001876:	6178      	str	r0, [r7, #20]




	  if(dem==0)
 8001878:	4b32      	ldr	r3, [pc, #200]	; (8001944 <main+0x1dc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d106      	bne.n	800188e <main+0x126>
	  {
		  Pre_roll = roll;
 8001880:	4b2e      	ldr	r3, [pc, #184]	; (800193c <main+0x1d4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a30      	ldr	r2, [pc, #192]	; (8001948 <main+0x1e0>)
 8001886:	6013      	str	r3, [r2, #0]
		  dem =1;
 8001888:	4b2e      	ldr	r3, [pc, #184]	; (8001944 <main+0x1dc>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]
	  }
	  // Kiểm tra nếu đã trôi qua 5 giây
	  if ((abs(currentMillis - previousMillis)) >= (5*interval)) {
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	bfb8      	it	lt
 8001898:	425b      	neglt	r3, r3
 800189a:	4619      	mov	r1, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	4299      	cmp	r1, r3
 80018a6:	d38b      	bcc.n	80017c0 <main+0x58>
		  previousMillis =currentMillis; // Cập nhật thoi điểm mới
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	61fb      	str	r3, [r7, #28]
		  // Thực hiện một số thao tác sau mỗi 1 giây
		  if((abs(roll)<=70) && (abs(Pre_roll)<=70))
 80018ac:	4b23      	ldr	r3, [pc, #140]	; (800193c <main+0x1d4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fb97 	bl	8000fe4 <__aeabi_f2iz>
 80018b6:	4603      	mov	r3, r0
 80018b8:	f113 0f46 	cmn.w	r3, #70	; 0x46
 80018bc:	db80      	blt.n	80017c0 <main+0x58>
 80018be:	4b1f      	ldr	r3, [pc, #124]	; (800193c <main+0x1d4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fb8e 	bl	8000fe4 <__aeabi_f2iz>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b46      	cmp	r3, #70	; 0x46
 80018cc:	f73f af78 	bgt.w	80017c0 <main+0x58>
 80018d0:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <main+0x1e0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fb85 	bl	8000fe4 <__aeabi_f2iz>
 80018da:	4603      	mov	r3, r0
 80018dc:	f113 0f46 	cmn.w	r3, #70	; 0x46
 80018e0:	f6ff af6e 	blt.w	80017c0 <main+0x58>
 80018e4:	4b18      	ldr	r3, [pc, #96]	; (8001948 <main+0x1e0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fb7b 	bl	8000fe4 <__aeabi_f2iz>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b46      	cmp	r3, #70	; 0x46
 80018f2:	f73f af65 	bgt.w	80017c0 <main+0x58>
		  {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1); // Ví dụ: đổi trạng thái LED
 80018f6:	2201      	movs	r2, #1
 80018f8:	2102      	movs	r1, #2
 80018fa:	4814      	ldr	r0, [pc, #80]	; (800194c <main+0x1e4>)
 80018fc:	f000 feb4 	bl	8002668 <HAL_GPIO_WritePin>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001900:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001904:	4812      	ldr	r0, [pc, #72]	; (8001950 <main+0x1e8>)
 8001906:	f000 fec7 	bl	8002698 <HAL_GPIO_TogglePin>
			  dem=0;
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <main+0x1dc>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
			  HAL_Delay(1000);
 8001910:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001914:	f000 fbf2 	bl	80020fc <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2102      	movs	r1, #2
 800191c:	480b      	ldr	r0, [pc, #44]	; (800194c <main+0x1e4>)
 800191e:	f000 fea3 	bl	8002668 <HAL_GPIO_WritePin>
  {
 8001922:	e74d      	b.n	80017c0 <main+0x58>
 8001924:	080082b8 	.word	0x080082b8
 8001928:	080082c4 	.word	0x080082c4
 800192c:	2000070c 	.word	0x2000070c
 8001930:	080082cc 	.word	0x080082cc
 8001934:	20000710 	.word	0x20000710
 8001938:	20000714 	.word	0x20000714
 800193c:	20000728 	.word	0x20000728
 8001940:	080082d4 	.word	0x080082d4
 8001944:	20000730 	.word	0x20000730
 8001948:	2000072c 	.word	0x2000072c
 800194c:	40010800 	.word	0x40010800
 8001950:	40011000 	.word	0x40011000

08001954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b090      	sub	sp, #64	; 0x40
 8001958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800195a:	f107 0318 	add.w	r3, r7, #24
 800195e:	2228      	movs	r2, #40	; 0x28
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f003 faf7 	bl	8004f56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001976:	2302      	movs	r3, #2
 8001978:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800197a:	2301      	movs	r3, #1
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800197e:	2310      	movs	r3, #16
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001982:	2300      	movs	r3, #0
 8001984:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001986:	f107 0318 	add.w	r3, r7, #24
 800198a:	4618      	mov	r0, r3
 800198c:	f002 f884 	bl	8003a98 <HAL_RCC_OscConfig>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001996:	f000 f907 	bl	8001ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800199a:	230f      	movs	r3, #15
 800199c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f002 faf2 	bl	8003f9c <HAL_RCC_ClockConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80019be:	f000 f8f3 	bl	8001ba8 <Error_Handler>
  }
}
 80019c2:	bf00      	nop
 80019c4:	3740      	adds	r7, #64	; 0x40
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019d2:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <MX_I2C1_Init+0x54>)
 80019d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019d8:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <MX_I2C1_Init+0x58>)
 80019da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <MX_I2C1_Init+0x50>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MX_I2C1_Init+0x50>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a08:	4804      	ldr	r0, [pc, #16]	; (8001a1c <MX_I2C1_Init+0x50>)
 8001a0a:	f000 fe5f 	bl	80026cc <HAL_I2C_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a14:	f000 f8c8 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2000061c 	.word	0x2000061c
 8001a20:	40005400 	.word	0x40005400
 8001a24:	000186a0 	.word	0x000186a0

08001a28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a2e:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <MX_USART1_UART_Init+0x50>)
 8001a30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a32:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a4e:	220c      	movs	r2, #12
 8001a50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a60:	f002 fc2a 	bl	80042b8 <HAL_UART_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a6a:	f000 f89d 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000670 	.word	0x20000670
 8001a78:	40013800 	.word	0x40013800

08001a7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_USART3_UART_Init+0x4c>)
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <MX_USART3_UART_Init+0x50>)
 8001a84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <MX_USART3_UART_Init+0x4c>)
 8001a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <MX_USART3_UART_Init+0x4c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_USART3_UART_Init+0x4c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <MX_USART3_UART_Init+0x4c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_USART3_UART_Init+0x4c>)
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <MX_USART3_UART_Init+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MX_USART3_UART_Init+0x4c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <MX_USART3_UART_Init+0x4c>)
 8001ab4:	f002 fc00 	bl	80042b8 <HAL_UART_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001abe:	f000 f873 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200006b8 	.word	0x200006b8
 8001acc:	40004800 	.word	0x40004800

08001ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad6:	f107 0310 	add.w	r3, r7, #16
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <MX_GPIO_Init+0xcc>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a2c      	ldr	r2, [pc, #176]	; (8001b9c <MX_GPIO_Init+0xcc>)
 8001aea:	f043 0310 	orr.w	r3, r3, #16
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b2a      	ldr	r3, [pc, #168]	; (8001b9c <MX_GPIO_Init+0xcc>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afc:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <MX_GPIO_Init+0xcc>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a26      	ldr	r2, [pc, #152]	; (8001b9c <MX_GPIO_Init+0xcc>)
 8001b02:	f043 0320 	orr.w	r3, r3, #32
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <MX_GPIO_Init+0xcc>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0320 	and.w	r3, r3, #32
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b14:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <MX_GPIO_Init+0xcc>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a20      	ldr	r2, [pc, #128]	; (8001b9c <MX_GPIO_Init+0xcc>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <MX_GPIO_Init+0xcc>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <MX_GPIO_Init+0xcc>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4a1a      	ldr	r2, [pc, #104]	; (8001b9c <MX_GPIO_Init+0xcc>)
 8001b32:	f043 0308 	orr.w	r3, r3, #8
 8001b36:	6193      	str	r3, [r2, #24]
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <MX_GPIO_Init+0xcc>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b4a:	4815      	ldr	r0, [pc, #84]	; (8001ba0 <MX_GPIO_Init+0xd0>)
 8001b4c:	f000 fd8c 	bl	8002668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2142      	movs	r1, #66	; 0x42
 8001b54:	4813      	ldr	r0, [pc, #76]	; (8001ba4 <MX_GPIO_Init+0xd4>)
 8001b56:	f000 fd87 	bl	8002668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b60:	2301      	movs	r3, #1
 8001b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	f107 0310 	add.w	r3, r7, #16
 8001b70:	4619      	mov	r1, r3
 8001b72:	480b      	ldr	r0, [pc, #44]	; (8001ba0 <MX_GPIO_Init+0xd0>)
 8001b74:	f000 fbf4 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8001b78:	2342      	movs	r3, #66	; 0x42
 8001b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2302      	movs	r3, #2
 8001b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 0310 	add.w	r3, r7, #16
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_GPIO_Init+0xd4>)
 8001b90:	f000 fbe6 	bl	8002360 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b94:	bf00      	nop
 8001b96:	3720      	adds	r7, #32
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40011000 	.word	0x40011000
 8001ba4:	40010800 	.word	0x40010800

08001ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bac:	b672      	cpsid	i
}
 8001bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <Error_Handler+0x8>
	...

08001bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_MspInit+0x5c>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	4a14      	ldr	r2, [pc, #80]	; (8001c10 <HAL_MspInit+0x5c>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6193      	str	r3, [r2, #24]
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_MspInit+0x5c>)
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <HAL_MspInit+0x5c>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	4a0e      	ldr	r2, [pc, #56]	; (8001c10 <HAL_MspInit+0x5c>)
 8001bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	61d3      	str	r3, [r2, #28]
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <HAL_MspInit+0x5c>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_MspInit+0x60>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <HAL_MspInit+0x60>)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40010000 	.word	0x40010000

08001c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1d      	ldr	r2, [pc, #116]	; (8001ca8 <HAL_I2C_MspInit+0x90>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d132      	bne.n	8001c9e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c38:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <HAL_I2C_MspInit+0x94>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <HAL_I2C_MspInit+0x94>)
 8001c3e:	f043 0308 	orr.w	r3, r3, #8
 8001c42:	6193      	str	r3, [r2, #24]
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_I2C_MspInit+0x94>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0308 	and.w	r3, r3, #8
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c56:	2312      	movs	r3, #18
 8001c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	4812      	ldr	r0, [pc, #72]	; (8001cb0 <HAL_I2C_MspInit+0x98>)
 8001c66:	f000 fb7b 	bl	8002360 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001c6a:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_I2C_MspInit+0x9c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c80:	4a0c      	ldr	r2, [pc, #48]	; (8001cb4 <HAL_I2C_MspInit+0x9c>)
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_I2C_MspInit+0x94>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4a08      	ldr	r2, [pc, #32]	; (8001cac <HAL_I2C_MspInit+0x94>)
 8001c8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c90:	61d3      	str	r3, [r2, #28]
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_I2C_MspInit+0x94>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c9e:	bf00      	nop
 8001ca0:	3728      	adds	r7, #40	; 0x28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40005400 	.word	0x40005400
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40010c00 	.word	0x40010c00
 8001cb4:	40010000 	.word	0x40010000

08001cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0318 	add.w	r3, r7, #24
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a40      	ldr	r2, [pc, #256]	; (8001dd4 <HAL_UART_MspInit+0x11c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d13a      	bne.n	8001d4e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cd8:	4b3f      	ldr	r3, [pc, #252]	; (8001dd8 <HAL_UART_MspInit+0x120>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a3e      	ldr	r2, [pc, #248]	; (8001dd8 <HAL_UART_MspInit+0x120>)
 8001cde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b3c      	ldr	r3, [pc, #240]	; (8001dd8 <HAL_UART_MspInit+0x120>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf0:	4b39      	ldr	r3, [pc, #228]	; (8001dd8 <HAL_UART_MspInit+0x120>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a38      	ldr	r2, [pc, #224]	; (8001dd8 <HAL_UART_MspInit+0x120>)
 8001cf6:	f043 0304 	orr.w	r3, r3, #4
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b36      	ldr	r3, [pc, #216]	; (8001dd8 <HAL_UART_MspInit+0x120>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	f107 0318 	add.w	r3, r7, #24
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	482f      	ldr	r0, [pc, #188]	; (8001ddc <HAL_UART_MspInit+0x124>)
 8001d1e:	f000 fb1f 	bl	8002360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 0318 	add.w	r3, r7, #24
 8001d34:	4619      	mov	r1, r3
 8001d36:	4829      	ldr	r0, [pc, #164]	; (8001ddc <HAL_UART_MspInit+0x124>)
 8001d38:	f000 fb12 	bl	8002360 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2100      	movs	r1, #0
 8001d40:	2025      	movs	r0, #37	; 0x25
 8001d42:	f000 fad6 	bl	80022f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d46:	2025      	movs	r0, #37	; 0x25
 8001d48:	f000 faef 	bl	800232a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d4c:	e03e      	b.n	8001dcc <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a23      	ldr	r2, [pc, #140]	; (8001de0 <HAL_UART_MspInit+0x128>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d139      	bne.n	8001dcc <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d58:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <HAL_UART_MspInit+0x120>)
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	4a1e      	ldr	r2, [pc, #120]	; (8001dd8 <HAL_UART_MspInit+0x120>)
 8001d5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d62:	61d3      	str	r3, [r2, #28]
 8001d64:	4b1c      	ldr	r3, [pc, #112]	; (8001dd8 <HAL_UART_MspInit+0x120>)
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_UART_MspInit+0x120>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <HAL_UART_MspInit+0x120>)
 8001d76:	f043 0308 	orr.w	r3, r3, #8
 8001d7a:	6193      	str	r3, [r2, #24]
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_UART_MspInit+0x120>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d92:	2303      	movs	r3, #3
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d96:	f107 0318 	add.w	r3, r7, #24
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4811      	ldr	r0, [pc, #68]	; (8001de4 <HAL_UART_MspInit+0x12c>)
 8001d9e:	f000 fadf 	bl	8002360 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001da2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db0:	f107 0318 	add.w	r3, r7, #24
 8001db4:	4619      	mov	r1, r3
 8001db6:	480b      	ldr	r0, [pc, #44]	; (8001de4 <HAL_UART_MspInit+0x12c>)
 8001db8:	f000 fad2 	bl	8002360 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	2027      	movs	r0, #39	; 0x27
 8001dc2:	f000 fa96 	bl	80022f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001dc6:	2027      	movs	r0, #39	; 0x27
 8001dc8:	f000 faaf 	bl	800232a <HAL_NVIC_EnableIRQ>
}
 8001dcc:	bf00      	nop
 8001dce:	3728      	adds	r7, #40	; 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40013800 	.word	0x40013800
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010800 	.word	0x40010800
 8001de0:	40004800 	.word	0x40004800
 8001de4:	40010c00 	.word	0x40010c00

08001de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <NMI_Handler+0x4>

08001dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <HardFault_Handler+0x4>

08001df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <MemManage_Handler+0x4>

08001dfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfe:	e7fe      	b.n	8001dfe <BusFault_Handler+0x4>

08001e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <UsageFault_Handler+0x4>

08001e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr

08001e2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e2e:	f000 f949 	bl	80020c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <USART1_IRQHandler+0x10>)
 8001e3e:	f7ff f919 	bl	8001074 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000670 	.word	0x20000670

08001e4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr(&huart3);
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <USART3_IRQHandler+0x10>)
 8001e52:	f7ff f90f 	bl	8001074 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  //HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200006b8 	.word	0x200006b8

08001e60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return 1;
 8001e64:	2301      	movs	r3, #1
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr

08001e6e <_kill>:

int _kill(int pid, int sig)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e78:	f003 f8c0 	bl	8004ffc <__errno>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2216      	movs	r2, #22
 8001e80:	601a      	str	r2, [r3, #0]
  return -1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <_exit>:

void _exit (int status)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e96:	f04f 31ff 	mov.w	r1, #4294967295
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ffe7 	bl	8001e6e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ea0:	e7fe      	b.n	8001ea0 <_exit+0x12>

08001ea2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	e00a      	b.n	8001eca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eb4:	f3af 8000 	nop.w
 8001eb8:	4601      	mov	r1, r0
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	60ba      	str	r2, [r7, #8]
 8001ec0:	b2ca      	uxtb	r2, r1
 8001ec2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	dbf0      	blt.n	8001eb4 <_read+0x12>
  }

  return len;
 8001ed2:	687b      	ldr	r3, [r7, #4]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	e009      	b.n	8001f02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	60ba      	str	r2, [r7, #8]
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	3301      	adds	r3, #1
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	dbf1      	blt.n	8001eee <_write+0x12>
  }
  return len;
 8001f0a:	687b      	ldr	r3, [r7, #4]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <_close>:

int _close(int file)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr

08001f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f3a:	605a      	str	r2, [r3, #4]
  return 0;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <_isatty>:

int _isatty(int file)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f50:	2301      	movs	r3, #1
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f7c:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <_sbrk+0x5c>)
 8001f7e:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <_sbrk+0x60>)
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f88:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <_sbrk+0x64>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d102      	bne.n	8001f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <_sbrk+0x64>)
 8001f92:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <_sbrk+0x68>)
 8001f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <_sbrk+0x64>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d207      	bcs.n	8001fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa4:	f003 f82a 	bl	8004ffc <__errno>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	220c      	movs	r2, #12
 8001fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb2:	e009      	b.n	8001fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fba:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <_sbrk+0x64>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <_sbrk+0x64>)
 8001fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20005000 	.word	0x20005000
 8001fd4:	00000400 	.word	0x00000400
 8001fd8:	20000734 	.word	0x20000734
 8001fdc:	20000888 	.word	0x20000888

08001fe0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fec:	f7ff fff8 	bl	8001fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ff0:	480b      	ldr	r0, [pc, #44]	; (8002020 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ff2:	490c      	ldr	r1, [pc, #48]	; (8002024 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ff4:	4a0c      	ldr	r2, [pc, #48]	; (8002028 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff8:	e002      	b.n	8002000 <LoopCopyDataInit>

08001ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffe:	3304      	adds	r3, #4

08002000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002004:	d3f9      	bcc.n	8001ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002008:	4c09      	ldr	r4, [pc, #36]	; (8002030 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800200c:	e001      	b.n	8002012 <LoopFillZerobss>

0800200e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002010:	3204      	adds	r2, #4

08002012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002014:	d3fb      	bcc.n	800200e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002016:	f002 fff7 	bl	8005008 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800201a:	f7ff fba5 	bl	8001768 <main>
  bx lr
 800201e:	4770      	bx	lr
  ldr r0, =_sdata
 8002020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002024:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002028:	080086f0 	.word	0x080086f0
  ldr r2, =_sbss
 800202c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002030:	20000888 	.word	0x20000888

08002034 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002034:	e7fe      	b.n	8002034 <ADC1_2_IRQHandler>
	...

08002038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_Init+0x28>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a07      	ldr	r2, [pc, #28]	; (8002060 <HAL_Init+0x28>)
 8002042:	f043 0310 	orr.w	r3, r3, #16
 8002046:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002048:	2003      	movs	r0, #3
 800204a:	f000 f947 	bl	80022dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800204e:	200f      	movs	r0, #15
 8002050:	f000 f808 	bl	8002064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002054:	f7ff fdae 	bl	8001bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40022000 	.word	0x40022000

08002064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_InitTick+0x54>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_InitTick+0x58>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207a:	fbb3 f3f1 	udiv	r3, r3, r1
 800207e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f95f 	bl	8002346 <HAL_SYSTICK_Config>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e00e      	b.n	80020b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b0f      	cmp	r3, #15
 8002096:	d80a      	bhi.n	80020ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002098:	2200      	movs	r2, #0
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	f04f 30ff 	mov.w	r0, #4294967295
 80020a0:	f000 f927 	bl	80022f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a4:	4a06      	ldr	r2, [pc, #24]	; (80020c0 <HAL_InitTick+0x5c>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e000      	b.n	80020b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000000 	.word	0x20000000
 80020bc:	20000008 	.word	0x20000008
 80020c0:	20000004 	.word	0x20000004

080020c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_IncTick+0x1c>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <HAL_IncTick+0x20>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	4a03      	ldr	r2, [pc, #12]	; (80020e4 <HAL_IncTick+0x20>)
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr
 80020e0:	20000008 	.word	0x20000008
 80020e4:	20000738 	.word	0x20000738

080020e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return uwTick;
 80020ec:	4b02      	ldr	r3, [pc, #8]	; (80020f8 <HAL_GetTick+0x10>)
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	20000738 	.word	0x20000738

080020fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002104:	f7ff fff0 	bl	80020e8 <HAL_GetTick>
 8002108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d005      	beq.n	8002122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_Delay+0x44>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002122:	bf00      	nop
 8002124:	f7ff ffe0 	bl	80020e8 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	429a      	cmp	r2, r3
 8002132:	d8f7      	bhi.n	8002124 <HAL_Delay+0x28>
  {
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000008 	.word	0x20000008

08002144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002160:	4013      	ands	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800216c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002176:	4a04      	ldr	r2, [pc, #16]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	60d3      	str	r3, [r2, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 0307 	and.w	r3, r3, #7
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	db0b      	blt.n	80021d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	f003 021f 	and.w	r2, r3, #31
 80021c0:	4906      	ldr	r1, [pc, #24]	; (80021dc <__NVIC_EnableIRQ+0x34>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	2001      	movs	r0, #1
 80021ca:	fa00 f202 	lsl.w	r2, r0, r2
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	e000e100 	.word	0xe000e100

080021e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	db0a      	blt.n	800220a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	490c      	ldr	r1, [pc, #48]	; (800222c <__NVIC_SetPriority+0x4c>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	0112      	lsls	r2, r2, #4
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	440b      	add	r3, r1
 8002204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002208:	e00a      	b.n	8002220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4908      	ldr	r1, [pc, #32]	; (8002230 <__NVIC_SetPriority+0x50>)
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	3b04      	subs	r3, #4
 8002218:	0112      	lsls	r2, r2, #4
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	440b      	add	r3, r1
 800221e:	761a      	strb	r2, [r3, #24]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	e000e100 	.word	0xe000e100
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	; 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f1c3 0307 	rsb	r3, r3, #7
 800224e:	2b04      	cmp	r3, #4
 8002250:	bf28      	it	cs
 8002252:	2304      	movcs	r3, #4
 8002254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3304      	adds	r3, #4
 800225a:	2b06      	cmp	r3, #6
 800225c:	d902      	bls.n	8002264 <NVIC_EncodePriority+0x30>
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3b03      	subs	r3, #3
 8002262:	e000      	b.n	8002266 <NVIC_EncodePriority+0x32>
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	f04f 32ff 	mov.w	r2, #4294967295
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43da      	mvns	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	401a      	ands	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800227c:	f04f 31ff 	mov.w	r1, #4294967295
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	fa01 f303 	lsl.w	r3, r1, r3
 8002286:	43d9      	mvns	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	4313      	orrs	r3, r2
         );
}
 800228e:	4618      	mov	r0, r3
 8002290:	3724      	adds	r7, #36	; 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr

08002298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022a8:	d301      	bcc.n	80022ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022aa:	2301      	movs	r3, #1
 80022ac:	e00f      	b.n	80022ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ae:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <SysTick_Config+0x40>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022b6:	210f      	movs	r1, #15
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295
 80022bc:	f7ff ff90 	bl	80021e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <SysTick_Config+0x40>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022c6:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <SysTick_Config+0x40>)
 80022c8:	2207      	movs	r2, #7
 80022ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	e000e010 	.word	0xe000e010

080022dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff ff2d 	bl	8002144 <__NVIC_SetPriorityGrouping>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b086      	sub	sp, #24
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002304:	f7ff ff42 	bl	800218c <__NVIC_GetPriorityGrouping>
 8002308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68b9      	ldr	r1, [r7, #8]
 800230e:	6978      	ldr	r0, [r7, #20]
 8002310:	f7ff ff90 	bl	8002234 <NVIC_EncodePriority>
 8002314:	4602      	mov	r2, r0
 8002316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff5f 	bl	80021e0 <__NVIC_SetPriority>
}
 8002322:	bf00      	nop
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff35 	bl	80021a8 <__NVIC_EnableIRQ>
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff ffa2 	bl	8002298 <SysTick_Config>
 8002354:	4603      	mov	r3, r0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002360:	b480      	push	{r7}
 8002362:	b08b      	sub	sp, #44	; 0x2c
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800236a:	2300      	movs	r3, #0
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800236e:	2300      	movs	r3, #0
 8002370:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002372:	e169      	b.n	8002648 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002374:	2201      	movs	r2, #1
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	429a      	cmp	r2, r3
 800238e:	f040 8158 	bne.w	8002642 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4a9a      	ldr	r2, [pc, #616]	; (8002600 <HAL_GPIO_Init+0x2a0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d05e      	beq.n	800245a <HAL_GPIO_Init+0xfa>
 800239c:	4a98      	ldr	r2, [pc, #608]	; (8002600 <HAL_GPIO_Init+0x2a0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d875      	bhi.n	800248e <HAL_GPIO_Init+0x12e>
 80023a2:	4a98      	ldr	r2, [pc, #608]	; (8002604 <HAL_GPIO_Init+0x2a4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d058      	beq.n	800245a <HAL_GPIO_Init+0xfa>
 80023a8:	4a96      	ldr	r2, [pc, #600]	; (8002604 <HAL_GPIO_Init+0x2a4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d86f      	bhi.n	800248e <HAL_GPIO_Init+0x12e>
 80023ae:	4a96      	ldr	r2, [pc, #600]	; (8002608 <HAL_GPIO_Init+0x2a8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d052      	beq.n	800245a <HAL_GPIO_Init+0xfa>
 80023b4:	4a94      	ldr	r2, [pc, #592]	; (8002608 <HAL_GPIO_Init+0x2a8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d869      	bhi.n	800248e <HAL_GPIO_Init+0x12e>
 80023ba:	4a94      	ldr	r2, [pc, #592]	; (800260c <HAL_GPIO_Init+0x2ac>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d04c      	beq.n	800245a <HAL_GPIO_Init+0xfa>
 80023c0:	4a92      	ldr	r2, [pc, #584]	; (800260c <HAL_GPIO_Init+0x2ac>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d863      	bhi.n	800248e <HAL_GPIO_Init+0x12e>
 80023c6:	4a92      	ldr	r2, [pc, #584]	; (8002610 <HAL_GPIO_Init+0x2b0>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d046      	beq.n	800245a <HAL_GPIO_Init+0xfa>
 80023cc:	4a90      	ldr	r2, [pc, #576]	; (8002610 <HAL_GPIO_Init+0x2b0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d85d      	bhi.n	800248e <HAL_GPIO_Init+0x12e>
 80023d2:	2b12      	cmp	r3, #18
 80023d4:	d82a      	bhi.n	800242c <HAL_GPIO_Init+0xcc>
 80023d6:	2b12      	cmp	r3, #18
 80023d8:	d859      	bhi.n	800248e <HAL_GPIO_Init+0x12e>
 80023da:	a201      	add	r2, pc, #4	; (adr r2, 80023e0 <HAL_GPIO_Init+0x80>)
 80023dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e0:	0800245b 	.word	0x0800245b
 80023e4:	08002435 	.word	0x08002435
 80023e8:	08002447 	.word	0x08002447
 80023ec:	08002489 	.word	0x08002489
 80023f0:	0800248f 	.word	0x0800248f
 80023f4:	0800248f 	.word	0x0800248f
 80023f8:	0800248f 	.word	0x0800248f
 80023fc:	0800248f 	.word	0x0800248f
 8002400:	0800248f 	.word	0x0800248f
 8002404:	0800248f 	.word	0x0800248f
 8002408:	0800248f 	.word	0x0800248f
 800240c:	0800248f 	.word	0x0800248f
 8002410:	0800248f 	.word	0x0800248f
 8002414:	0800248f 	.word	0x0800248f
 8002418:	0800248f 	.word	0x0800248f
 800241c:	0800248f 	.word	0x0800248f
 8002420:	0800248f 	.word	0x0800248f
 8002424:	0800243d 	.word	0x0800243d
 8002428:	08002451 	.word	0x08002451
 800242c:	4a79      	ldr	r2, [pc, #484]	; (8002614 <HAL_GPIO_Init+0x2b4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d013      	beq.n	800245a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002432:	e02c      	b.n	800248e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	623b      	str	r3, [r7, #32]
          break;
 800243a:	e029      	b.n	8002490 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	3304      	adds	r3, #4
 8002442:	623b      	str	r3, [r7, #32]
          break;
 8002444:	e024      	b.n	8002490 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	3308      	adds	r3, #8
 800244c:	623b      	str	r3, [r7, #32]
          break;
 800244e:	e01f      	b.n	8002490 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	330c      	adds	r3, #12
 8002456:	623b      	str	r3, [r7, #32]
          break;
 8002458:	e01a      	b.n	8002490 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d102      	bne.n	8002468 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002462:	2304      	movs	r3, #4
 8002464:	623b      	str	r3, [r7, #32]
          break;
 8002466:	e013      	b.n	8002490 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d105      	bne.n	800247c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002470:	2308      	movs	r3, #8
 8002472:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	611a      	str	r2, [r3, #16]
          break;
 800247a:	e009      	b.n	8002490 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800247c:	2308      	movs	r3, #8
 800247e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	615a      	str	r2, [r3, #20]
          break;
 8002486:	e003      	b.n	8002490 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002488:	2300      	movs	r3, #0
 800248a:	623b      	str	r3, [r7, #32]
          break;
 800248c:	e000      	b.n	8002490 <HAL_GPIO_Init+0x130>
          break;
 800248e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2bff      	cmp	r3, #255	; 0xff
 8002494:	d801      	bhi.n	800249a <HAL_GPIO_Init+0x13a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	e001      	b.n	800249e <HAL_GPIO_Init+0x13e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3304      	adds	r3, #4
 800249e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2bff      	cmp	r3, #255	; 0xff
 80024a4:	d802      	bhi.n	80024ac <HAL_GPIO_Init+0x14c>
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	e002      	b.n	80024b2 <HAL_GPIO_Init+0x152>
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	3b08      	subs	r3, #8
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	210f      	movs	r1, #15
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	fa01 f303 	lsl.w	r3, r1, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	401a      	ands	r2, r3
 80024c4:	6a39      	ldr	r1, [r7, #32]
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	fa01 f303 	lsl.w	r3, r1, r3
 80024cc:	431a      	orrs	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80b1 	beq.w	8002642 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024e0:	4b4d      	ldr	r3, [pc, #308]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	4a4c      	ldr	r2, [pc, #304]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	6193      	str	r3, [r2, #24]
 80024ec:	4b4a      	ldr	r3, [pc, #296]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024f8:	4a48      	ldr	r2, [pc, #288]	; (800261c <HAL_GPIO_Init+0x2bc>)
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	089b      	lsrs	r3, r3, #2
 80024fe:	3302      	adds	r3, #2
 8002500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002504:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	220f      	movs	r2, #15
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4013      	ands	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a40      	ldr	r2, [pc, #256]	; (8002620 <HAL_GPIO_Init+0x2c0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d013      	beq.n	800254c <HAL_GPIO_Init+0x1ec>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a3f      	ldr	r2, [pc, #252]	; (8002624 <HAL_GPIO_Init+0x2c4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d00d      	beq.n	8002548 <HAL_GPIO_Init+0x1e8>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a3e      	ldr	r2, [pc, #248]	; (8002628 <HAL_GPIO_Init+0x2c8>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d007      	beq.n	8002544 <HAL_GPIO_Init+0x1e4>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a3d      	ldr	r2, [pc, #244]	; (800262c <HAL_GPIO_Init+0x2cc>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d101      	bne.n	8002540 <HAL_GPIO_Init+0x1e0>
 800253c:	2303      	movs	r3, #3
 800253e:	e006      	b.n	800254e <HAL_GPIO_Init+0x1ee>
 8002540:	2304      	movs	r3, #4
 8002542:	e004      	b.n	800254e <HAL_GPIO_Init+0x1ee>
 8002544:	2302      	movs	r3, #2
 8002546:	e002      	b.n	800254e <HAL_GPIO_Init+0x1ee>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <HAL_GPIO_Init+0x1ee>
 800254c:	2300      	movs	r3, #0
 800254e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002550:	f002 0203 	and.w	r2, r2, #3
 8002554:	0092      	lsls	r2, r2, #2
 8002556:	4093      	lsls	r3, r2
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800255e:	492f      	ldr	r1, [pc, #188]	; (800261c <HAL_GPIO_Init+0x2bc>)
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	3302      	adds	r3, #2
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d006      	beq.n	8002586 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002578:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	492c      	ldr	r1, [pc, #176]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	608b      	str	r3, [r1, #8]
 8002584:	e006      	b.n	8002594 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002586:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	43db      	mvns	r3, r3
 800258e:	4928      	ldr	r1, [pc, #160]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 8002590:	4013      	ands	r3, r2
 8002592:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d006      	beq.n	80025ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025a0:	4b23      	ldr	r3, [pc, #140]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	4922      	ldr	r1, [pc, #136]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60cb      	str	r3, [r1, #12]
 80025ac:	e006      	b.n	80025bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025ae:	4b20      	ldr	r3, [pc, #128]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	43db      	mvns	r3, r3
 80025b6:	491e      	ldr	r1, [pc, #120]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d006      	beq.n	80025d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	4918      	ldr	r1, [pc, #96]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
 80025d4:	e006      	b.n	80025e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025d6:	4b16      	ldr	r3, [pc, #88]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	43db      	mvns	r3, r3
 80025de:	4914      	ldr	r1, [pc, #80]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d021      	beq.n	8002634 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025f0:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	490e      	ldr	r1, [pc, #56]	; (8002630 <HAL_GPIO_Init+0x2d0>)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	600b      	str	r3, [r1, #0]
 80025fc:	e021      	b.n	8002642 <HAL_GPIO_Init+0x2e2>
 80025fe:	bf00      	nop
 8002600:	10320000 	.word	0x10320000
 8002604:	10310000 	.word	0x10310000
 8002608:	10220000 	.word	0x10220000
 800260c:	10210000 	.word	0x10210000
 8002610:	10120000 	.word	0x10120000
 8002614:	10110000 	.word	0x10110000
 8002618:	40021000 	.word	0x40021000
 800261c:	40010000 	.word	0x40010000
 8002620:	40010800 	.word	0x40010800
 8002624:	40010c00 	.word	0x40010c00
 8002628:	40011000 	.word	0x40011000
 800262c:	40011400 	.word	0x40011400
 8002630:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_GPIO_Init+0x304>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	43db      	mvns	r3, r3
 800263c:	4909      	ldr	r1, [pc, #36]	; (8002664 <HAL_GPIO_Init+0x304>)
 800263e:	4013      	ands	r3, r2
 8002640:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	3301      	adds	r3, #1
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	fa22 f303 	lsr.w	r3, r2, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	f47f ae8e 	bne.w	8002374 <HAL_GPIO_Init+0x14>
  }
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	372c      	adds	r7, #44	; 0x2c
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	40010400 	.word	0x40010400

08002668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	807b      	strh	r3, [r7, #2]
 8002674:	4613      	mov	r3, r2
 8002676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002678:	787b      	ldrb	r3, [r7, #1]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800267e:	887a      	ldrh	r2, [r7, #2]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002684:	e003      	b.n	800268e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002686:	887b      	ldrh	r3, [r7, #2]
 8002688:	041a      	lsls	r2, r3, #16
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	611a      	str	r2, [r3, #16]
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026aa:	887a      	ldrh	r2, [r7, #2]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4013      	ands	r3, r2
 80026b0:	041a      	lsls	r2, r3, #16
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	43d9      	mvns	r1, r3
 80026b6:	887b      	ldrh	r3, [r7, #2]
 80026b8:	400b      	ands	r3, r1
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	611a      	str	r2, [r3, #16]
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr
	...

080026cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e12b      	b.n	8002936 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff fa90 	bl	8001c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2224      	movs	r2, #36	; 0x24
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0201 	bic.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800271e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800272e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002730:	f001 fd7c 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 8002734:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4a81      	ldr	r2, [pc, #516]	; (8002940 <HAL_I2C_Init+0x274>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d807      	bhi.n	8002750 <HAL_I2C_Init+0x84>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4a80      	ldr	r2, [pc, #512]	; (8002944 <HAL_I2C_Init+0x278>)
 8002744:	4293      	cmp	r3, r2
 8002746:	bf94      	ite	ls
 8002748:	2301      	movls	r3, #1
 800274a:	2300      	movhi	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	e006      	b.n	800275e <HAL_I2C_Init+0x92>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4a7d      	ldr	r2, [pc, #500]	; (8002948 <HAL_I2C_Init+0x27c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	bf94      	ite	ls
 8002758:	2301      	movls	r3, #1
 800275a:	2300      	movhi	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e0e7      	b.n	8002936 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4a78      	ldr	r2, [pc, #480]	; (800294c <HAL_I2C_Init+0x280>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	0c9b      	lsrs	r3, r3, #18
 8002770:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4a6a      	ldr	r2, [pc, #424]	; (8002940 <HAL_I2C_Init+0x274>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d802      	bhi.n	80027a0 <HAL_I2C_Init+0xd4>
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	3301      	adds	r3, #1
 800279e:	e009      	b.n	80027b4 <HAL_I2C_Init+0xe8>
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027a6:	fb02 f303 	mul.w	r3, r2, r3
 80027aa:	4a69      	ldr	r2, [pc, #420]	; (8002950 <HAL_I2C_Init+0x284>)
 80027ac:	fba2 2303 	umull	r2, r3, r2, r3
 80027b0:	099b      	lsrs	r3, r3, #6
 80027b2:	3301      	adds	r3, #1
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	430b      	orrs	r3, r1
 80027ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	495c      	ldr	r1, [pc, #368]	; (8002940 <HAL_I2C_Init+0x274>)
 80027d0:	428b      	cmp	r3, r1
 80027d2:	d819      	bhi.n	8002808 <HAL_I2C_Init+0x13c>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1e59      	subs	r1, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	fbb1 f3f3 	udiv	r3, r1, r3
 80027e2:	1c59      	adds	r1, r3, #1
 80027e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027e8:	400b      	ands	r3, r1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_I2C_Init+0x138>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1e59      	subs	r1, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002802:	e051      	b.n	80028a8 <HAL_I2C_Init+0x1dc>
 8002804:	2304      	movs	r3, #4
 8002806:	e04f      	b.n	80028a8 <HAL_I2C_Init+0x1dc>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d111      	bne.n	8002834 <HAL_I2C_Init+0x168>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1e58      	subs	r0, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	440b      	add	r3, r1
 800281e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002822:	3301      	adds	r3, #1
 8002824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002828:	2b00      	cmp	r3, #0
 800282a:	bf0c      	ite	eq
 800282c:	2301      	moveq	r3, #1
 800282e:	2300      	movne	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	e012      	b.n	800285a <HAL_I2C_Init+0x18e>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	1e58      	subs	r0, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6859      	ldr	r1, [r3, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	0099      	lsls	r1, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	fbb0 f3f3 	udiv	r3, r0, r3
 800284a:	3301      	adds	r3, #1
 800284c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf0c      	ite	eq
 8002854:	2301      	moveq	r3, #1
 8002856:	2300      	movne	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_I2C_Init+0x196>
 800285e:	2301      	movs	r3, #1
 8002860:	e022      	b.n	80028a8 <HAL_I2C_Init+0x1dc>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10e      	bne.n	8002888 <HAL_I2C_Init+0x1bc>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1e58      	subs	r0, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6859      	ldr	r1, [r3, #4]
 8002872:	460b      	mov	r3, r1
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	440b      	add	r3, r1
 8002878:	fbb0 f3f3 	udiv	r3, r0, r3
 800287c:	3301      	adds	r3, #1
 800287e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002886:	e00f      	b.n	80028a8 <HAL_I2C_Init+0x1dc>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	1e58      	subs	r0, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	0099      	lsls	r1, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	fbb0 f3f3 	udiv	r3, r0, r3
 800289e:	3301      	adds	r3, #1
 80028a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	6809      	ldr	r1, [r1, #0]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69da      	ldr	r2, [r3, #28]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6911      	ldr	r1, [r2, #16]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68d2      	ldr	r2, [r2, #12]
 80028e2:	4311      	orrs	r1, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	430b      	orrs	r3, r1
 80028ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0201 	orr.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	000186a0 	.word	0x000186a0
 8002944:	001e847f 	.word	0x001e847f
 8002948:	003d08ff 	.word	0x003d08ff
 800294c:	431bde83 	.word	0x431bde83
 8002950:	10624dd3 	.word	0x10624dd3

08002954 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af02      	add	r7, sp, #8
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	461a      	mov	r2, r3
 8002960:	460b      	mov	r3, r1
 8002962:	817b      	strh	r3, [r7, #10]
 8002964:	4613      	mov	r3, r2
 8002966:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002968:	f7ff fbbe 	bl	80020e8 <HAL_GetTick>
 800296c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b20      	cmp	r3, #32
 8002978:	f040 80e0 	bne.w	8002b3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	2319      	movs	r3, #25
 8002982:	2201      	movs	r2, #1
 8002984:	4970      	ldr	r1, [pc, #448]	; (8002b48 <HAL_I2C_Master_Transmit+0x1f4>)
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 fe50 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002992:	2302      	movs	r3, #2
 8002994:	e0d3      	b.n	8002b3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_I2C_Master_Transmit+0x50>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e0cc      	b.n	8002b3e <HAL_I2C_Master_Transmit+0x1ea>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d007      	beq.n	80029ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0201 	orr.w	r2, r2, #1
 80029c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2221      	movs	r2, #33	; 0x21
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2210      	movs	r2, #16
 80029e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	893a      	ldrh	r2, [r7, #8]
 80029fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4a50      	ldr	r2, [pc, #320]	; (8002b4c <HAL_I2C_Master_Transmit+0x1f8>)
 8002a0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a0c:	8979      	ldrh	r1, [r7, #10]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	6a3a      	ldr	r2, [r7, #32]
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fc0a 	bl	800322c <I2C_MasterRequestWrite>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e08d      	b.n	8002b3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a38:	e066      	b.n	8002b08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	6a39      	ldr	r1, [r7, #32]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 ff0e 	bl	8003860 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00d      	beq.n	8002a66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d107      	bne.n	8002a62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e06b      	b.n	8002b3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	781a      	ldrb	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d11b      	bne.n	8002adc <HAL_I2C_Master_Transmit+0x188>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d017      	beq.n	8002adc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	781a      	ldrb	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	6a39      	ldr	r1, [r7, #32]
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 ff05 	bl	80038f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00d      	beq.n	8002b08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d107      	bne.n	8002b04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e01a      	b.n	8002b3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d194      	bne.n	8002a3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e000      	b.n	8002b3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b3c:	2302      	movs	r3, #2
  }
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	00100002 	.word	0x00100002
 8002b4c:	ffff0000 	.word	0xffff0000

08002b50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	4608      	mov	r0, r1
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4603      	mov	r3, r0
 8002b60:	817b      	strh	r3, [r7, #10]
 8002b62:	460b      	mov	r3, r1
 8002b64:	813b      	strh	r3, [r7, #8]
 8002b66:	4613      	mov	r3, r2
 8002b68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b6a:	f7ff fabd 	bl	80020e8 <HAL_GetTick>
 8002b6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	f040 80d9 	bne.w	8002d30 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	2319      	movs	r3, #25
 8002b84:	2201      	movs	r2, #1
 8002b86:	496d      	ldr	r1, [pc, #436]	; (8002d3c <HAL_I2C_Mem_Write+0x1ec>)
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 fd4f 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b94:	2302      	movs	r3, #2
 8002b96:	e0cc      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_I2C_Mem_Write+0x56>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e0c5      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d007      	beq.n	8002bcc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2221      	movs	r2, #33	; 0x21
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2240      	movs	r2, #64	; 0x40
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a3a      	ldr	r2, [r7, #32]
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4a4d      	ldr	r2, [pc, #308]	; (8002d40 <HAL_I2C_Mem_Write+0x1f0>)
 8002c0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c0e:	88f8      	ldrh	r0, [r7, #6]
 8002c10:	893a      	ldrh	r2, [r7, #8]
 8002c12:	8979      	ldrh	r1, [r7, #10]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	9301      	str	r3, [sp, #4]
 8002c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fb86 	bl	8003330 <I2C_RequestMemoryWrite>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d052      	beq.n	8002cd0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e081      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 fe14 	bl	8003860 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00d      	beq.n	8002c5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d107      	bne.n	8002c56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e06b      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	781a      	ldrb	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d11b      	bne.n	8002cd0 <HAL_I2C_Mem_Write+0x180>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d017      	beq.n	8002cd0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	781a      	ldrb	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1aa      	bne.n	8002c2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fe07 	bl	80038f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00d      	beq.n	8002d04 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d107      	bne.n	8002d00 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e016      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e000      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d30:	2302      	movs	r3, #2
  }
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	00100002 	.word	0x00100002
 8002d40:	ffff0000 	.word	0xffff0000

08002d44 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08c      	sub	sp, #48	; 0x30
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	4608      	mov	r0, r1
 8002d4e:	4611      	mov	r1, r2
 8002d50:	461a      	mov	r2, r3
 8002d52:	4603      	mov	r3, r0
 8002d54:	817b      	strh	r3, [r7, #10]
 8002d56:	460b      	mov	r3, r1
 8002d58:	813b      	strh	r3, [r7, #8]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d62:	f7ff f9c1 	bl	80020e8 <HAL_GetTick>
 8002d66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	f040 8250 	bne.w	8003216 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	2319      	movs	r3, #25
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	4982      	ldr	r1, [pc, #520]	; (8002f88 <HAL_I2C_Mem_Read+0x244>)
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 fc53 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e243      	b.n	8003218 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_I2C_Mem_Read+0x5a>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e23c      	b.n	8003218 <HAL_I2C_Mem_Read+0x4d4>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d007      	beq.n	8002dc4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2222      	movs	r2, #34	; 0x22
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2240      	movs	r2, #64	; 0x40
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002df4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4a62      	ldr	r2, [pc, #392]	; (8002f8c <HAL_I2C_Mem_Read+0x248>)
 8002e04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e06:	88f8      	ldrh	r0, [r7, #6]
 8002e08:	893a      	ldrh	r2, [r7, #8]
 8002e0a:	8979      	ldrh	r1, [r7, #10]
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	4603      	mov	r3, r0
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 fb20 	bl	800345c <I2C_RequestMemoryRead>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e1f8      	b.n	8003218 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d113      	bne.n	8002e56 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	e1cc      	b.n	80031f0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d11e      	bne.n	8002e9c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e6e:	b672      	cpsid	i
}
 8002e70:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e98:	b662      	cpsie	i
}
 8002e9a:	e035      	b.n	8002f08 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d11e      	bne.n	8002ee2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eb2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eb4:	b672      	cpsid	i
}
 8002eb6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002edc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ede:	b662      	cpsie	i
}
 8002ee0:	e012      	b.n	8002f08 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ef0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002f08:	e172      	b.n	80031f0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	f200 811f 	bhi.w	8003152 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d123      	bne.n	8002f64 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fd2d 	bl	8003980 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e173      	b.n	8003218 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f62:	e145      	b.n	80031f0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d152      	bne.n	8003012 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f72:	2200      	movs	r2, #0
 8002f74:	4906      	ldr	r1, [pc, #24]	; (8002f90 <HAL_I2C_Mem_Read+0x24c>)
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 fb58 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d008      	beq.n	8002f94 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e148      	b.n	8003218 <HAL_I2C_Mem_Read+0x4d4>
 8002f86:	bf00      	nop
 8002f88:	00100002 	.word	0x00100002
 8002f8c:	ffff0000 	.word	0xffff0000
 8002f90:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002f94:	b672      	cpsid	i
}
 8002f96:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002fda:	b662      	cpsie	i
}
 8002fdc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003010:	e0ee      	b.n	80031f0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003018:	2200      	movs	r2, #0
 800301a:	4981      	ldr	r1, [pc, #516]	; (8003220 <HAL_I2C_Mem_Read+0x4dc>)
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fb05 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0f5      	b.n	8003218 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800303a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800303c:	b672      	cpsid	i
}
 800303e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	3b01      	subs	r3, #1
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003072:	4b6c      	ldr	r3, [pc, #432]	; (8003224 <HAL_I2C_Mem_Read+0x4e0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	08db      	lsrs	r3, r3, #3
 8003078:	4a6b      	ldr	r2, [pc, #428]	; (8003228 <HAL_I2C_Mem_Read+0x4e4>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	0a1a      	lsrs	r2, r3, #8
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	00da      	lsls	r2, r3, #3
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	3b01      	subs	r3, #1
 8003090:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d118      	bne.n	80030ca <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f043 0220 	orr.w	r2, r3, #32
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80030ba:	b662      	cpsie	i
}
 80030bc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e0a6      	b.n	8003218 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d1d9      	bne.n	800308c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800311a:	b662      	cpsie	i
}
 800311c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003150:	e04e      	b.n	80031f0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003154:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fc12 	bl	8003980 <I2C_WaitOnRXNEFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e058      	b.n	8003218 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d124      	bne.n	80031f0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d107      	bne.n	80031be <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031bc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f47f ae88 	bne.w	8002f0a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	e000      	b.n	8003218 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003216:	2302      	movs	r3, #2
  }
}
 8003218:	4618      	mov	r0, r3
 800321a:	3728      	adds	r7, #40	; 0x28
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	00010004 	.word	0x00010004
 8003224:	20000000 	.word	0x20000000
 8003228:	14f8b589 	.word	0x14f8b589

0800322c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	460b      	mov	r3, r1
 800323a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d006      	beq.n	8003256 <I2C_MasterRequestWrite+0x2a>
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d003      	beq.n	8003256 <I2C_MasterRequestWrite+0x2a>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003254:	d108      	bne.n	8003268 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	e00b      	b.n	8003280 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	2b12      	cmp	r3, #18
 800326e:	d107      	bne.n	8003280 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800327e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f9cd 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00d      	beq.n	80032b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032a6:	d103      	bne.n	80032b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e035      	b.n	8003320 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032bc:	d108      	bne.n	80032d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032be:	897b      	ldrh	r3, [r7, #10]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	461a      	mov	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032cc:	611a      	str	r2, [r3, #16]
 80032ce:	e01b      	b.n	8003308 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032d0:	897b      	ldrh	r3, [r7, #10]
 80032d2:	11db      	asrs	r3, r3, #7
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	f003 0306 	and.w	r3, r3, #6
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f063 030f 	orn	r3, r3, #15
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	490e      	ldr	r1, [pc, #56]	; (8003328 <I2C_MasterRequestWrite+0xfc>)
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 fa16 	bl	8003720 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e010      	b.n	8003320 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032fe:	897b      	ldrh	r3, [r7, #10]
 8003300:	b2da      	uxtb	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	4907      	ldr	r1, [pc, #28]	; (800332c <I2C_MasterRequestWrite+0x100>)
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 fa06 	bl	8003720 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	00010008 	.word	0x00010008
 800332c:	00010002 	.word	0x00010002

08003330 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	4608      	mov	r0, r1
 800333a:	4611      	mov	r1, r2
 800333c:	461a      	mov	r2, r3
 800333e:	4603      	mov	r3, r0
 8003340:	817b      	strh	r3, [r7, #10]
 8003342:	460b      	mov	r3, r1
 8003344:	813b      	strh	r3, [r7, #8]
 8003346:	4613      	mov	r3, r2
 8003348:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003358:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	2200      	movs	r2, #0
 8003362:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f960 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00d      	beq.n	800338e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003380:	d103      	bne.n	800338a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003388:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e05f      	b.n	800344e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800338e:	897b      	ldrh	r3, [r7, #10]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800339c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	6a3a      	ldr	r2, [r7, #32]
 80033a2:	492d      	ldr	r1, [pc, #180]	; (8003458 <I2C_RequestMemoryWrite+0x128>)
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 f9bb 	bl	8003720 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e04c      	b.n	800344e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033cc:	6a39      	ldr	r1, [r7, #32]
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 fa46 	bl	8003860 <I2C_WaitOnTXEFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00d      	beq.n	80033f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d107      	bne.n	80033f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e02b      	b.n	800344e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033f6:	88fb      	ldrh	r3, [r7, #6]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d105      	bne.n	8003408 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033fc:	893b      	ldrh	r3, [r7, #8]
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	611a      	str	r2, [r3, #16]
 8003406:	e021      	b.n	800344c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003408:	893b      	ldrh	r3, [r7, #8]
 800340a:	0a1b      	lsrs	r3, r3, #8
 800340c:	b29b      	uxth	r3, r3
 800340e:	b2da      	uxtb	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003418:	6a39      	ldr	r1, [r7, #32]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 fa20 	bl	8003860 <I2C_WaitOnTXEFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00d      	beq.n	8003442 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	2b04      	cmp	r3, #4
 800342c:	d107      	bne.n	800343e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800343c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e005      	b.n	800344e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003442:	893b      	ldrh	r3, [r7, #8]
 8003444:	b2da      	uxtb	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	00010002 	.word	0x00010002

0800345c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af02      	add	r7, sp, #8
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	4608      	mov	r0, r1
 8003466:	4611      	mov	r1, r2
 8003468:	461a      	mov	r2, r3
 800346a:	4603      	mov	r3, r0
 800346c:	817b      	strh	r3, [r7, #10]
 800346e:	460b      	mov	r3, r1
 8003470:	813b      	strh	r3, [r7, #8]
 8003472:	4613      	mov	r3, r2
 8003474:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003484:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003494:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	2200      	movs	r2, #0
 800349e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f8c2 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00d      	beq.n	80034ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034bc:	d103      	bne.n	80034c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e0aa      	b.n	8003620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034ca:	897b      	ldrh	r3, [r7, #10]
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	461a      	mov	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	6a3a      	ldr	r2, [r7, #32]
 80034de:	4952      	ldr	r1, [pc, #328]	; (8003628 <I2C_RequestMemoryRead+0x1cc>)
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f91d 	bl	8003720 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e097      	b.n	8003620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003508:	6a39      	ldr	r1, [r7, #32]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f9a8 	bl	8003860 <I2C_WaitOnTXEFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00d      	beq.n	8003532 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	2b04      	cmp	r3, #4
 800351c:	d107      	bne.n	800352e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e076      	b.n	8003620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d105      	bne.n	8003544 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003538:	893b      	ldrh	r3, [r7, #8]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	611a      	str	r2, [r3, #16]
 8003542:	e021      	b.n	8003588 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003544:	893b      	ldrh	r3, [r7, #8]
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	b29b      	uxth	r3, r3
 800354a:	b2da      	uxtb	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003554:	6a39      	ldr	r1, [r7, #32]
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f982 	bl	8003860 <I2C_WaitOnTXEFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00d      	beq.n	800357e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	2b04      	cmp	r3, #4
 8003568:	d107      	bne.n	800357a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003578:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e050      	b.n	8003620 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800357e:	893b      	ldrh	r3, [r7, #8]
 8003580:	b2da      	uxtb	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358a:	6a39      	ldr	r1, [r7, #32]
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 f967 	bl	8003860 <I2C_WaitOnTXEFlagUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00d      	beq.n	80035b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	2b04      	cmp	r3, #4
 800359e:	d107      	bne.n	80035b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e035      	b.n	8003620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f82b 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00d      	beq.n	80035f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ea:	d103      	bne.n	80035f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e013      	b.n	8003620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035f8:	897b      	ldrh	r3, [r7, #10]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	b2da      	uxtb	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	6a3a      	ldr	r2, [r7, #32]
 800360c:	4906      	ldr	r1, [pc, #24]	; (8003628 <I2C_RequestMemoryRead+0x1cc>)
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 f886 	bl	8003720 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	00010002 	.word	0x00010002

0800362c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	4613      	mov	r3, r2
 800363a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800363c:	e048      	b.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003644:	d044      	beq.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003646:	f7fe fd4f 	bl	80020e8 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d302      	bcc.n	800365c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d139      	bne.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	0c1b      	lsrs	r3, r3, #16
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b01      	cmp	r3, #1
 8003664:	d10d      	bne.n	8003682 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	43da      	mvns	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	4013      	ands	r3, r2
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	bf0c      	ite	eq
 8003678:	2301      	moveq	r3, #1
 800367a:	2300      	movne	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	e00c      	b.n	800369c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	43da      	mvns	r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4013      	ands	r3, r2
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf0c      	ite	eq
 8003694:	2301      	moveq	r3, #1
 8003696:	2300      	movne	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	461a      	mov	r2, r3
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d116      	bne.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f043 0220 	orr.w	r2, r3, #32
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e023      	b.n	8003718 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	0c1b      	lsrs	r3, r3, #16
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d10d      	bne.n	80036f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	43da      	mvns	r2, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4013      	ands	r3, r2
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	e00c      	b.n	8003710 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	43da      	mvns	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	4013      	ands	r3, r2
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	bf0c      	ite	eq
 8003708:	2301      	moveq	r3, #1
 800370a:	2300      	movne	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	429a      	cmp	r2, r3
 8003714:	d093      	beq.n	800363e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800372e:	e071      	b.n	8003814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373e:	d123      	bne.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003758:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	f043 0204 	orr.w	r2, r3, #4
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e067      	b.n	8003858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378e:	d041      	beq.n	8003814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003790:	f7fe fcaa 	bl	80020e8 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	429a      	cmp	r2, r3
 800379e:	d302      	bcc.n	80037a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d136      	bne.n	8003814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	0c1b      	lsrs	r3, r3, #16
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d10c      	bne.n	80037ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	43da      	mvns	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4013      	ands	r3, r2
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	bf14      	ite	ne
 80037c2:	2301      	movne	r3, #1
 80037c4:	2300      	moveq	r3, #0
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	e00b      	b.n	80037e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	43da      	mvns	r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	4013      	ands	r3, r2
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	bf14      	ite	ne
 80037dc:	2301      	movne	r3, #1
 80037de:	2300      	moveq	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d016      	beq.n	8003814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	f043 0220 	orr.w	r2, r3, #32
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e021      	b.n	8003858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	0c1b      	lsrs	r3, r3, #16
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b01      	cmp	r3, #1
 800381c:	d10c      	bne.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	43da      	mvns	r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	4013      	ands	r3, r2
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	bf14      	ite	ne
 8003830:	2301      	movne	r3, #1
 8003832:	2300      	moveq	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	e00b      	b.n	8003850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	43da      	mvns	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4013      	ands	r3, r2
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	bf14      	ite	ne
 800384a:	2301      	movne	r3, #1
 800384c:	2300      	moveq	r3, #0
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	f47f af6d 	bne.w	8003730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800386c:	e034      	b.n	80038d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f8e3 	bl	8003a3a <I2C_IsAcknowledgeFailed>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e034      	b.n	80038e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d028      	beq.n	80038d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003886:	f7fe fc2f 	bl	80020e8 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	429a      	cmp	r2, r3
 8003894:	d302      	bcc.n	800389c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d11d      	bne.n	80038d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a6:	2b80      	cmp	r3, #128	; 0x80
 80038a8:	d016      	beq.n	80038d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	f043 0220 	orr.w	r2, r3, #32
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e007      	b.n	80038e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e2:	2b80      	cmp	r3, #128	; 0x80
 80038e4:	d1c3      	bne.n	800386e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038fc:	e034      	b.n	8003968 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f89b 	bl	8003a3a <I2C_IsAcknowledgeFailed>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e034      	b.n	8003978 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d028      	beq.n	8003968 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003916:	f7fe fbe7 	bl	80020e8 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	429a      	cmp	r2, r3
 8003924:	d302      	bcc.n	800392c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d11d      	bne.n	8003968 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f003 0304 	and.w	r3, r3, #4
 8003936:	2b04      	cmp	r3, #4
 8003938:	d016      	beq.n	8003968 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	f043 0220 	orr.w	r2, r3, #32
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e007      	b.n	8003978 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b04      	cmp	r3, #4
 8003974:	d1c3      	bne.n	80038fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800398c:	e049      	b.n	8003a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b10      	cmp	r3, #16
 800399a:	d119      	bne.n	80039d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0210 	mvn.w	r2, #16
 80039a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e030      	b.n	8003a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d0:	f7fe fb8a 	bl	80020e8 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d302      	bcc.n	80039e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d11d      	bne.n	8003a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f0:	2b40      	cmp	r3, #64	; 0x40
 80039f2:	d016      	beq.n	8003a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f043 0220 	orr.w	r2, r3, #32
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e007      	b.n	8003a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2c:	2b40      	cmp	r3, #64	; 0x40
 8003a2e:	d1ae      	bne.n	800398e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a50:	d11b      	bne.n	8003a8a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a5a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f043 0204 	orr.w	r2, r3, #4
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr
	...

08003a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e272      	b.n	8003f90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 8087 	beq.w	8003bc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ab8:	4b92      	ldr	r3, [pc, #584]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 030c 	and.w	r3, r3, #12
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d00c      	beq.n	8003ade <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ac4:	4b8f      	ldr	r3, [pc, #572]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 030c 	and.w	r3, r3, #12
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d112      	bne.n	8003af6 <HAL_RCC_OscConfig+0x5e>
 8003ad0:	4b8c      	ldr	r3, [pc, #560]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003adc:	d10b      	bne.n	8003af6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ade:	4b89      	ldr	r3, [pc, #548]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d06c      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x12c>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d168      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e24c      	b.n	8003f90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afe:	d106      	bne.n	8003b0e <HAL_RCC_OscConfig+0x76>
 8003b00:	4b80      	ldr	r3, [pc, #512]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a7f      	ldr	r2, [pc, #508]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	e02e      	b.n	8003b6c <HAL_RCC_OscConfig+0xd4>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCC_OscConfig+0x98>
 8003b16:	4b7b      	ldr	r3, [pc, #492]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a7a      	ldr	r2, [pc, #488]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	4b78      	ldr	r3, [pc, #480]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a77      	ldr	r2, [pc, #476]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	e01d      	b.n	8003b6c <HAL_RCC_OscConfig+0xd4>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b38:	d10c      	bne.n	8003b54 <HAL_RCC_OscConfig+0xbc>
 8003b3a:	4b72      	ldr	r3, [pc, #456]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a71      	ldr	r2, [pc, #452]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	4b6f      	ldr	r3, [pc, #444]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a6e      	ldr	r2, [pc, #440]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	e00b      	b.n	8003b6c <HAL_RCC_OscConfig+0xd4>
 8003b54:	4b6b      	ldr	r3, [pc, #428]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a6a      	ldr	r2, [pc, #424]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	4b68      	ldr	r3, [pc, #416]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a67      	ldr	r2, [pc, #412]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d013      	beq.n	8003b9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b74:	f7fe fab8 	bl	80020e8 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b7c:	f7fe fab4 	bl	80020e8 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b64      	cmp	r3, #100	; 0x64
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e200      	b.n	8003f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8e:	4b5d      	ldr	r3, [pc, #372]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0xe4>
 8003b9a:	e014      	b.n	8003bc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9c:	f7fe faa4 	bl	80020e8 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba4:	f7fe faa0 	bl	80020e8 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b64      	cmp	r3, #100	; 0x64
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e1ec      	b.n	8003f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb6:	4b53      	ldr	r3, [pc, #332]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f0      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x10c>
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d063      	beq.n	8003c9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bd2:	4b4c      	ldr	r3, [pc, #304]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00b      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bde:	4b49      	ldr	r3, [pc, #292]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f003 030c 	and.w	r3, r3, #12
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d11c      	bne.n	8003c24 <HAL_RCC_OscConfig+0x18c>
 8003bea:	4b46      	ldr	r3, [pc, #280]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d116      	bne.n	8003c24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf6:	4b43      	ldr	r3, [pc, #268]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <HAL_RCC_OscConfig+0x176>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d001      	beq.n	8003c0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e1c0      	b.n	8003f90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0e:	4b3d      	ldr	r3, [pc, #244]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4939      	ldr	r1, [pc, #228]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c22:	e03a      	b.n	8003c9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d020      	beq.n	8003c6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c2c:	4b36      	ldr	r3, [pc, #216]	; (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c32:	f7fe fa59 	bl	80020e8 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c3a:	f7fe fa55 	bl	80020e8 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e1a1      	b.n	8003f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4c:	4b2d      	ldr	r3, [pc, #180]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c58:	4b2a      	ldr	r3, [pc, #168]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4927      	ldr	r1, [pc, #156]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	600b      	str	r3, [r1, #0]
 8003c6c:	e015      	b.n	8003c9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c6e:	4b26      	ldr	r3, [pc, #152]	; (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fe fa38 	bl	80020e8 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c7c:	f7fe fa34 	bl	80020e8 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e180      	b.n	8003f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8e:	4b1d      	ldr	r3, [pc, #116]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d03a      	beq.n	8003d1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d019      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cae:	4b17      	ldr	r3, [pc, #92]	; (8003d0c <HAL_RCC_OscConfig+0x274>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb4:	f7fe fa18 	bl	80020e8 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cbc:	f7fe fa14 	bl	80020e8 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e160      	b.n	8003f90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cce:	4b0d      	ldr	r3, [pc, #52]	; (8003d04 <HAL_RCC_OscConfig+0x26c>)
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cda:	2001      	movs	r0, #1
 8003cdc:	f000 face 	bl	800427c <RCC_Delay>
 8003ce0:	e01c      	b.n	8003d1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <HAL_RCC_OscConfig+0x274>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce8:	f7fe f9fe 	bl	80020e8 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cee:	e00f      	b.n	8003d10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf0:	f7fe f9fa 	bl	80020e8 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d908      	bls.n	8003d10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e146      	b.n	8003f90 <HAL_RCC_OscConfig+0x4f8>
 8003d02:	bf00      	nop
 8003d04:	40021000 	.word	0x40021000
 8003d08:	42420000 	.word	0x42420000
 8003d0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d10:	4b92      	ldr	r3, [pc, #584]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e9      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80a6 	beq.w	8003e76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d2e:	4b8b      	ldr	r3, [pc, #556]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10d      	bne.n	8003d56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3a:	4b88      	ldr	r3, [pc, #544]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	4a87      	ldr	r2, [pc, #540]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d44:	61d3      	str	r3, [r2, #28]
 8003d46:	4b85      	ldr	r3, [pc, #532]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	60bb      	str	r3, [r7, #8]
 8003d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d52:	2301      	movs	r3, #1
 8003d54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d56:	4b82      	ldr	r3, [pc, #520]	; (8003f60 <HAL_RCC_OscConfig+0x4c8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d118      	bne.n	8003d94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d62:	4b7f      	ldr	r3, [pc, #508]	; (8003f60 <HAL_RCC_OscConfig+0x4c8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a7e      	ldr	r2, [pc, #504]	; (8003f60 <HAL_RCC_OscConfig+0x4c8>)
 8003d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d6e:	f7fe f9bb 	bl	80020e8 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d76:	f7fe f9b7 	bl	80020e8 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b64      	cmp	r3, #100	; 0x64
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e103      	b.n	8003f90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d88:	4b75      	ldr	r3, [pc, #468]	; (8003f60 <HAL_RCC_OscConfig+0x4c8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d106      	bne.n	8003daa <HAL_RCC_OscConfig+0x312>
 8003d9c:	4b6f      	ldr	r3, [pc, #444]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	4a6e      	ldr	r2, [pc, #440]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	6213      	str	r3, [r2, #32]
 8003da8:	e02d      	b.n	8003e06 <HAL_RCC_OscConfig+0x36e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10c      	bne.n	8003dcc <HAL_RCC_OscConfig+0x334>
 8003db2:	4b6a      	ldr	r3, [pc, #424]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	4a69      	ldr	r2, [pc, #420]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	6213      	str	r3, [r2, #32]
 8003dbe:	4b67      	ldr	r3, [pc, #412]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	4a66      	ldr	r2, [pc, #408]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003dc4:	f023 0304 	bic.w	r3, r3, #4
 8003dc8:	6213      	str	r3, [r2, #32]
 8003dca:	e01c      	b.n	8003e06 <HAL_RCC_OscConfig+0x36e>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	2b05      	cmp	r3, #5
 8003dd2:	d10c      	bne.n	8003dee <HAL_RCC_OscConfig+0x356>
 8003dd4:	4b61      	ldr	r3, [pc, #388]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	4a60      	ldr	r2, [pc, #384]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003dda:	f043 0304 	orr.w	r3, r3, #4
 8003dde:	6213      	str	r3, [r2, #32]
 8003de0:	4b5e      	ldr	r3, [pc, #376]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	4a5d      	ldr	r2, [pc, #372]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	6213      	str	r3, [r2, #32]
 8003dec:	e00b      	b.n	8003e06 <HAL_RCC_OscConfig+0x36e>
 8003dee:	4b5b      	ldr	r3, [pc, #364]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	4a5a      	ldr	r2, [pc, #360]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	6213      	str	r3, [r2, #32]
 8003dfa:	4b58      	ldr	r3, [pc, #352]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	4a57      	ldr	r2, [pc, #348]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003e00:	f023 0304 	bic.w	r3, r3, #4
 8003e04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d015      	beq.n	8003e3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0e:	f7fe f96b 	bl	80020e8 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e14:	e00a      	b.n	8003e2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e16:	f7fe f967 	bl	80020e8 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e0b1      	b.n	8003f90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2c:	4b4b      	ldr	r3, [pc, #300]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0ee      	beq.n	8003e16 <HAL_RCC_OscConfig+0x37e>
 8003e38:	e014      	b.n	8003e64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3a:	f7fe f955 	bl	80020e8 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e40:	e00a      	b.n	8003e58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e42:	f7fe f951 	bl	80020e8 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e09b      	b.n	8003f90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e58:	4b40      	ldr	r3, [pc, #256]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1ee      	bne.n	8003e42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d105      	bne.n	8003e76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6a:	4b3c      	ldr	r3, [pc, #240]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	4a3b      	ldr	r2, [pc, #236]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 8087 	beq.w	8003f8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e80:	4b36      	ldr	r3, [pc, #216]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 030c 	and.w	r3, r3, #12
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d061      	beq.n	8003f50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d146      	bne.n	8003f22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e94:	4b33      	ldr	r3, [pc, #204]	; (8003f64 <HAL_RCC_OscConfig+0x4cc>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9a:	f7fe f925 	bl	80020e8 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea2:	f7fe f921 	bl	80020e8 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e06d      	b.n	8003f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb4:	4b29      	ldr	r3, [pc, #164]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f0      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec8:	d108      	bne.n	8003edc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003eca:	4b24      	ldr	r3, [pc, #144]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	4921      	ldr	r1, [pc, #132]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003edc:	4b1f      	ldr	r3, [pc, #124]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a19      	ldr	r1, [r3, #32]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	430b      	orrs	r3, r1
 8003eee:	491b      	ldr	r1, [pc, #108]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ef4:	4b1b      	ldr	r3, [pc, #108]	; (8003f64 <HAL_RCC_OscConfig+0x4cc>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efa:	f7fe f8f5 	bl	80020e8 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f02:	f7fe f8f1 	bl	80020e8 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e03d      	b.n	8003f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f14:	4b11      	ldr	r3, [pc, #68]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0f0      	beq.n	8003f02 <HAL_RCC_OscConfig+0x46a>
 8003f20:	e035      	b.n	8003f8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f22:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <HAL_RCC_OscConfig+0x4cc>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f28:	f7fe f8de 	bl	80020e8 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f30:	f7fe f8da 	bl	80020e8 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e026      	b.n	8003f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f42:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <HAL_RCC_OscConfig+0x4c4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f0      	bne.n	8003f30 <HAL_RCC_OscConfig+0x498>
 8003f4e:	e01e      	b.n	8003f8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d107      	bne.n	8003f68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e019      	b.n	8003f90 <HAL_RCC_OscConfig+0x4f8>
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	40007000 	.word	0x40007000
 8003f64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <HAL_RCC_OscConfig+0x500>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d106      	bne.n	8003f8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d001      	beq.n	8003f8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40021000 	.word	0x40021000

08003f9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e0d0      	b.n	8004152 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb0:	4b6a      	ldr	r3, [pc, #424]	; (800415c <HAL_RCC_ClockConfig+0x1c0>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d910      	bls.n	8003fe0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fbe:	4b67      	ldr	r3, [pc, #412]	; (800415c <HAL_RCC_ClockConfig+0x1c0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 0207 	bic.w	r2, r3, #7
 8003fc6:	4965      	ldr	r1, [pc, #404]	; (800415c <HAL_RCC_ClockConfig+0x1c0>)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fce:	4b63      	ldr	r3, [pc, #396]	; (800415c <HAL_RCC_ClockConfig+0x1c0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0b8      	b.n	8004152 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d020      	beq.n	800402e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ff8:	4b59      	ldr	r3, [pc, #356]	; (8004160 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4a58      	ldr	r2, [pc, #352]	; (8004160 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004002:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004010:	4b53      	ldr	r3, [pc, #332]	; (8004160 <HAL_RCC_ClockConfig+0x1c4>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	4a52      	ldr	r2, [pc, #328]	; (8004160 <HAL_RCC_ClockConfig+0x1c4>)
 8004016:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800401a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800401c:	4b50      	ldr	r3, [pc, #320]	; (8004160 <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	494d      	ldr	r1, [pc, #308]	; (8004160 <HAL_RCC_ClockConfig+0x1c4>)
 800402a:	4313      	orrs	r3, r2
 800402c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d040      	beq.n	80040bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d107      	bne.n	8004052 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004042:	4b47      	ldr	r3, [pc, #284]	; (8004160 <HAL_RCC_ClockConfig+0x1c4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d115      	bne.n	800407a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e07f      	b.n	8004152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d107      	bne.n	800406a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800405a:	4b41      	ldr	r3, [pc, #260]	; (8004160 <HAL_RCC_ClockConfig+0x1c4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e073      	b.n	8004152 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406a:	4b3d      	ldr	r3, [pc, #244]	; (8004160 <HAL_RCC_ClockConfig+0x1c4>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e06b      	b.n	8004152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800407a:	4b39      	ldr	r3, [pc, #228]	; (8004160 <HAL_RCC_ClockConfig+0x1c4>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f023 0203 	bic.w	r2, r3, #3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	4936      	ldr	r1, [pc, #216]	; (8004160 <HAL_RCC_ClockConfig+0x1c4>)
 8004088:	4313      	orrs	r3, r2
 800408a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800408c:	f7fe f82c 	bl	80020e8 <HAL_GetTick>
 8004090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004092:	e00a      	b.n	80040aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004094:	f7fe f828 	bl	80020e8 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e053      	b.n	8004152 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040aa:	4b2d      	ldr	r3, [pc, #180]	; (8004160 <HAL_RCC_ClockConfig+0x1c4>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f003 020c 	and.w	r2, r3, #12
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d1eb      	bne.n	8004094 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040bc:	4b27      	ldr	r3, [pc, #156]	; (800415c <HAL_RCC_ClockConfig+0x1c0>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d210      	bcs.n	80040ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ca:	4b24      	ldr	r3, [pc, #144]	; (800415c <HAL_RCC_ClockConfig+0x1c0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f023 0207 	bic.w	r2, r3, #7
 80040d2:	4922      	ldr	r1, [pc, #136]	; (800415c <HAL_RCC_ClockConfig+0x1c0>)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040da:	4b20      	ldr	r3, [pc, #128]	; (800415c <HAL_RCC_ClockConfig+0x1c0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e032      	b.n	8004152 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040f8:	4b19      	ldr	r3, [pc, #100]	; (8004160 <HAL_RCC_ClockConfig+0x1c4>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4916      	ldr	r1, [pc, #88]	; (8004160 <HAL_RCC_ClockConfig+0x1c4>)
 8004106:	4313      	orrs	r3, r2
 8004108:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004116:	4b12      	ldr	r3, [pc, #72]	; (8004160 <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	490e      	ldr	r1, [pc, #56]	; (8004160 <HAL_RCC_ClockConfig+0x1c4>)
 8004126:	4313      	orrs	r3, r2
 8004128:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800412a:	f000 f821 	bl	8004170 <HAL_RCC_GetSysClockFreq>
 800412e:	4602      	mov	r2, r0
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <HAL_RCC_ClockConfig+0x1c4>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	490a      	ldr	r1, [pc, #40]	; (8004164 <HAL_RCC_ClockConfig+0x1c8>)
 800413c:	5ccb      	ldrb	r3, [r1, r3]
 800413e:	fa22 f303 	lsr.w	r3, r2, r3
 8004142:	4a09      	ldr	r2, [pc, #36]	; (8004168 <HAL_RCC_ClockConfig+0x1cc>)
 8004144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004146:	4b09      	ldr	r3, [pc, #36]	; (800416c <HAL_RCC_ClockConfig+0x1d0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fd ff8a 	bl	8002064 <HAL_InitTick>

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40022000 	.word	0x40022000
 8004160:	40021000 	.word	0x40021000
 8004164:	080082d8 	.word	0x080082d8
 8004168:	20000000 	.word	0x20000000
 800416c:	20000004 	.word	0x20000004

08004170 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	2300      	movs	r3, #0
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	2300      	movs	r3, #0
 8004184:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800418a:	4b1e      	ldr	r3, [pc, #120]	; (8004204 <HAL_RCC_GetSysClockFreq+0x94>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 030c 	and.w	r3, r3, #12
 8004196:	2b04      	cmp	r3, #4
 8004198:	d002      	beq.n	80041a0 <HAL_RCC_GetSysClockFreq+0x30>
 800419a:	2b08      	cmp	r3, #8
 800419c:	d003      	beq.n	80041a6 <HAL_RCC_GetSysClockFreq+0x36>
 800419e:	e027      	b.n	80041f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041a0:	4b19      	ldr	r3, [pc, #100]	; (8004208 <HAL_RCC_GetSysClockFreq+0x98>)
 80041a2:	613b      	str	r3, [r7, #16]
      break;
 80041a4:	e027      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	0c9b      	lsrs	r3, r3, #18
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	4a17      	ldr	r2, [pc, #92]	; (800420c <HAL_RCC_GetSysClockFreq+0x9c>)
 80041b0:	5cd3      	ldrb	r3, [r2, r3]
 80041b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d010      	beq.n	80041e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041be:	4b11      	ldr	r3, [pc, #68]	; (8004204 <HAL_RCC_GetSysClockFreq+0x94>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	0c5b      	lsrs	r3, r3, #17
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	4a11      	ldr	r2, [pc, #68]	; (8004210 <HAL_RCC_GetSysClockFreq+0xa0>)
 80041ca:	5cd3      	ldrb	r3, [r2, r3]
 80041cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a0d      	ldr	r2, [pc, #52]	; (8004208 <HAL_RCC_GetSysClockFreq+0x98>)
 80041d2:	fb03 f202 	mul.w	r2, r3, r2
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	e004      	b.n	80041ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a0c      	ldr	r2, [pc, #48]	; (8004214 <HAL_RCC_GetSysClockFreq+0xa4>)
 80041e4:	fb02 f303 	mul.w	r3, r2, r3
 80041e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	613b      	str	r3, [r7, #16]
      break;
 80041ee:	e002      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041f0:	4b05      	ldr	r3, [pc, #20]	; (8004208 <HAL_RCC_GetSysClockFreq+0x98>)
 80041f2:	613b      	str	r3, [r7, #16]
      break;
 80041f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041f6:	693b      	ldr	r3, [r7, #16]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40021000 	.word	0x40021000
 8004208:	007a1200 	.word	0x007a1200
 800420c:	080082f0 	.word	0x080082f0
 8004210:	08008300 	.word	0x08008300
 8004214:	003d0900 	.word	0x003d0900

08004218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800421c:	4b02      	ldr	r3, [pc, #8]	; (8004228 <HAL_RCC_GetHCLKFreq+0x10>)
 800421e:	681b      	ldr	r3, [r3, #0]
}
 8004220:	4618      	mov	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr
 8004228:	20000000 	.word	0x20000000

0800422c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004230:	f7ff fff2 	bl	8004218 <HAL_RCC_GetHCLKFreq>
 8004234:	4602      	mov	r2, r0
 8004236:	4b05      	ldr	r3, [pc, #20]	; (800424c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	0a1b      	lsrs	r3, r3, #8
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4903      	ldr	r1, [pc, #12]	; (8004250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004242:	5ccb      	ldrb	r3, [r1, r3]
 8004244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40021000 	.word	0x40021000
 8004250:	080082e8 	.word	0x080082e8

08004254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004258:	f7ff ffde 	bl	8004218 <HAL_RCC_GetHCLKFreq>
 800425c:	4602      	mov	r2, r0
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	0adb      	lsrs	r3, r3, #11
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	4903      	ldr	r1, [pc, #12]	; (8004278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800426a:	5ccb      	ldrb	r3, [r1, r3]
 800426c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004270:	4618      	mov	r0, r3
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40021000 	.word	0x40021000
 8004278:	080082e8 	.word	0x080082e8

0800427c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004284:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <RCC_Delay+0x34>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a0a      	ldr	r2, [pc, #40]	; (80042b4 <RCC_Delay+0x38>)
 800428a:	fba2 2303 	umull	r2, r3, r2, r3
 800428e:	0a5b      	lsrs	r3, r3, #9
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	fb02 f303 	mul.w	r3, r2, r3
 8004296:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004298:	bf00      	nop
  }
  while (Delay --);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	1e5a      	subs	r2, r3, #1
 800429e:	60fa      	str	r2, [r7, #12]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1f9      	bne.n	8004298 <RCC_Delay+0x1c>
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr
 80042b0:	20000000 	.word	0x20000000
 80042b4:	10624dd3 	.word	0x10624dd3

080042b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e042      	b.n	8004350 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fd fcea 	bl	8001cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2224      	movs	r2, #36	; 0x24
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f82b 	bl	8004358 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695a      	ldr	r2, [r3, #20]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004320:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004330:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004392:	f023 030c 	bic.w	r3, r3, #12
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6812      	ldr	r2, [r2, #0]
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	430b      	orrs	r3, r1
 800439e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a2c      	ldr	r2, [pc, #176]	; (800446c <UART_SetConfig+0x114>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d103      	bne.n	80043c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043c0:	f7ff ff48 	bl	8004254 <HAL_RCC_GetPCLK2Freq>
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	e002      	b.n	80043ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043c8:	f7ff ff30 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 80043cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4613      	mov	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	009a      	lsls	r2, r3, #2
 80043d8:	441a      	add	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e4:	4a22      	ldr	r2, [pc, #136]	; (8004470 <UART_SetConfig+0x118>)
 80043e6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	0119      	lsls	r1, r3, #4
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	009a      	lsls	r2, r3, #2
 80043f8:	441a      	add	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	fbb2 f2f3 	udiv	r2, r2, r3
 8004404:	4b1a      	ldr	r3, [pc, #104]	; (8004470 <UART_SetConfig+0x118>)
 8004406:	fba3 0302 	umull	r0, r3, r3, r2
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	2064      	movs	r0, #100	; 0x64
 800440e:	fb00 f303 	mul.w	r3, r0, r3
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	3332      	adds	r3, #50	; 0x32
 8004418:	4a15      	ldr	r2, [pc, #84]	; (8004470 <UART_SetConfig+0x118>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004424:	4419      	add	r1, r3
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	009a      	lsls	r2, r3, #2
 8004430:	441a      	add	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	fbb2 f2f3 	udiv	r2, r2, r3
 800443c:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <UART_SetConfig+0x118>)
 800443e:	fba3 0302 	umull	r0, r3, r3, r2
 8004442:	095b      	lsrs	r3, r3, #5
 8004444:	2064      	movs	r0, #100	; 0x64
 8004446:	fb00 f303 	mul.w	r3, r0, r3
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	3332      	adds	r3, #50	; 0x32
 8004450:	4a07      	ldr	r2, [pc, #28]	; (8004470 <UART_SetConfig+0x118>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	f003 020f 	and.w	r2, r3, #15
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	440a      	add	r2, r1
 8004462:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40013800 	.word	0x40013800
 8004470:	51eb851f 	.word	0x51eb851f

08004474 <__cvt>:
 8004474:	2b00      	cmp	r3, #0
 8004476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800447a:	461f      	mov	r7, r3
 800447c:	bfbb      	ittet	lt
 800447e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004482:	461f      	movlt	r7, r3
 8004484:	2300      	movge	r3, #0
 8004486:	232d      	movlt	r3, #45	; 0x2d
 8004488:	b088      	sub	sp, #32
 800448a:	4614      	mov	r4, r2
 800448c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800448e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004490:	7013      	strb	r3, [r2, #0]
 8004492:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004494:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004498:	f023 0820 	bic.w	r8, r3, #32
 800449c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044a0:	d005      	beq.n	80044ae <__cvt+0x3a>
 80044a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80044a6:	d100      	bne.n	80044aa <__cvt+0x36>
 80044a8:	3501      	adds	r5, #1
 80044aa:	2302      	movs	r3, #2
 80044ac:	e000      	b.n	80044b0 <__cvt+0x3c>
 80044ae:	2303      	movs	r3, #3
 80044b0:	aa07      	add	r2, sp, #28
 80044b2:	9204      	str	r2, [sp, #16]
 80044b4:	aa06      	add	r2, sp, #24
 80044b6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80044ba:	e9cd 3500 	strd	r3, r5, [sp]
 80044be:	4622      	mov	r2, r4
 80044c0:	463b      	mov	r3, r7
 80044c2:	f000 fe61 	bl	8005188 <_dtoa_r>
 80044c6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80044ca:	4606      	mov	r6, r0
 80044cc:	d102      	bne.n	80044d4 <__cvt+0x60>
 80044ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80044d0:	07db      	lsls	r3, r3, #31
 80044d2:	d522      	bpl.n	800451a <__cvt+0xa6>
 80044d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044d8:	eb06 0905 	add.w	r9, r6, r5
 80044dc:	d110      	bne.n	8004500 <__cvt+0x8c>
 80044de:	7833      	ldrb	r3, [r6, #0]
 80044e0:	2b30      	cmp	r3, #48	; 0x30
 80044e2:	d10a      	bne.n	80044fa <__cvt+0x86>
 80044e4:	2200      	movs	r2, #0
 80044e6:	2300      	movs	r3, #0
 80044e8:	4620      	mov	r0, r4
 80044ea:	4639      	mov	r1, r7
 80044ec:	f7fc fa5c 	bl	80009a8 <__aeabi_dcmpeq>
 80044f0:	b918      	cbnz	r0, 80044fa <__cvt+0x86>
 80044f2:	f1c5 0501 	rsb	r5, r5, #1
 80044f6:	f8ca 5000 	str.w	r5, [sl]
 80044fa:	f8da 3000 	ldr.w	r3, [sl]
 80044fe:	4499      	add	r9, r3
 8004500:	2200      	movs	r2, #0
 8004502:	2300      	movs	r3, #0
 8004504:	4620      	mov	r0, r4
 8004506:	4639      	mov	r1, r7
 8004508:	f7fc fa4e 	bl	80009a8 <__aeabi_dcmpeq>
 800450c:	b108      	cbz	r0, 8004512 <__cvt+0x9e>
 800450e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004512:	2230      	movs	r2, #48	; 0x30
 8004514:	9b07      	ldr	r3, [sp, #28]
 8004516:	454b      	cmp	r3, r9
 8004518:	d307      	bcc.n	800452a <__cvt+0xb6>
 800451a:	4630      	mov	r0, r6
 800451c:	9b07      	ldr	r3, [sp, #28]
 800451e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004520:	1b9b      	subs	r3, r3, r6
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	b008      	add	sp, #32
 8004526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800452a:	1c59      	adds	r1, r3, #1
 800452c:	9107      	str	r1, [sp, #28]
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	e7f0      	b.n	8004514 <__cvt+0xa0>

08004532 <__exponent>:
 8004532:	4603      	mov	r3, r0
 8004534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004536:	2900      	cmp	r1, #0
 8004538:	f803 2b02 	strb.w	r2, [r3], #2
 800453c:	bfb6      	itet	lt
 800453e:	222d      	movlt	r2, #45	; 0x2d
 8004540:	222b      	movge	r2, #43	; 0x2b
 8004542:	4249      	neglt	r1, r1
 8004544:	2909      	cmp	r1, #9
 8004546:	7042      	strb	r2, [r0, #1]
 8004548:	dd2a      	ble.n	80045a0 <__exponent+0x6e>
 800454a:	f10d 0207 	add.w	r2, sp, #7
 800454e:	4617      	mov	r7, r2
 8004550:	260a      	movs	r6, #10
 8004552:	fb91 f5f6 	sdiv	r5, r1, r6
 8004556:	4694      	mov	ip, r2
 8004558:	fb06 1415 	mls	r4, r6, r5, r1
 800455c:	3430      	adds	r4, #48	; 0x30
 800455e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004562:	460c      	mov	r4, r1
 8004564:	2c63      	cmp	r4, #99	; 0x63
 8004566:	4629      	mov	r1, r5
 8004568:	f102 32ff 	add.w	r2, r2, #4294967295
 800456c:	dcf1      	bgt.n	8004552 <__exponent+0x20>
 800456e:	3130      	adds	r1, #48	; 0x30
 8004570:	f1ac 0402 	sub.w	r4, ip, #2
 8004574:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004578:	4622      	mov	r2, r4
 800457a:	1c41      	adds	r1, r0, #1
 800457c:	42ba      	cmp	r2, r7
 800457e:	d30a      	bcc.n	8004596 <__exponent+0x64>
 8004580:	f10d 0209 	add.w	r2, sp, #9
 8004584:	eba2 020c 	sub.w	r2, r2, ip
 8004588:	42bc      	cmp	r4, r7
 800458a:	bf88      	it	hi
 800458c:	2200      	movhi	r2, #0
 800458e:	4413      	add	r3, r2
 8004590:	1a18      	subs	r0, r3, r0
 8004592:	b003      	add	sp, #12
 8004594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004596:	f812 5b01 	ldrb.w	r5, [r2], #1
 800459a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800459e:	e7ed      	b.n	800457c <__exponent+0x4a>
 80045a0:	2330      	movs	r3, #48	; 0x30
 80045a2:	3130      	adds	r1, #48	; 0x30
 80045a4:	7083      	strb	r3, [r0, #2]
 80045a6:	70c1      	strb	r1, [r0, #3]
 80045a8:	1d03      	adds	r3, r0, #4
 80045aa:	e7f1      	b.n	8004590 <__exponent+0x5e>

080045ac <_printf_float>:
 80045ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b0:	b091      	sub	sp, #68	; 0x44
 80045b2:	460c      	mov	r4, r1
 80045b4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80045b8:	4616      	mov	r6, r2
 80045ba:	461f      	mov	r7, r3
 80045bc:	4605      	mov	r5, r0
 80045be:	f000 fcd3 	bl	8004f68 <_localeconv_r>
 80045c2:	6803      	ldr	r3, [r0, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	9309      	str	r3, [sp, #36]	; 0x24
 80045c8:	f7fb fdc2 	bl	8000150 <strlen>
 80045cc:	2300      	movs	r3, #0
 80045ce:	930e      	str	r3, [sp, #56]	; 0x38
 80045d0:	f8d8 3000 	ldr.w	r3, [r8]
 80045d4:	900a      	str	r0, [sp, #40]	; 0x28
 80045d6:	3307      	adds	r3, #7
 80045d8:	f023 0307 	bic.w	r3, r3, #7
 80045dc:	f103 0208 	add.w	r2, r3, #8
 80045e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80045e4:	f8d4 b000 	ldr.w	fp, [r4]
 80045e8:	f8c8 2000 	str.w	r2, [r8]
 80045ec:	e9d3 a800 	ldrd	sl, r8, [r3]
 80045f0:	4652      	mov	r2, sl
 80045f2:	4643      	mov	r3, r8
 80045f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80045f8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80045fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80045fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004602:	4650      	mov	r0, sl
 8004604:	4b9c      	ldr	r3, [pc, #624]	; (8004878 <_printf_float+0x2cc>)
 8004606:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004608:	f7fc fa00 	bl	8000a0c <__aeabi_dcmpun>
 800460c:	bb70      	cbnz	r0, 800466c <_printf_float+0xc0>
 800460e:	f04f 32ff 	mov.w	r2, #4294967295
 8004612:	4650      	mov	r0, sl
 8004614:	4b98      	ldr	r3, [pc, #608]	; (8004878 <_printf_float+0x2cc>)
 8004616:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004618:	f7fc f9da 	bl	80009d0 <__aeabi_dcmple>
 800461c:	bb30      	cbnz	r0, 800466c <_printf_float+0xc0>
 800461e:	2200      	movs	r2, #0
 8004620:	2300      	movs	r3, #0
 8004622:	4650      	mov	r0, sl
 8004624:	4641      	mov	r1, r8
 8004626:	f7fc f9c9 	bl	80009bc <__aeabi_dcmplt>
 800462a:	b110      	cbz	r0, 8004632 <_printf_float+0x86>
 800462c:	232d      	movs	r3, #45	; 0x2d
 800462e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004632:	4a92      	ldr	r2, [pc, #584]	; (800487c <_printf_float+0x2d0>)
 8004634:	4b92      	ldr	r3, [pc, #584]	; (8004880 <_printf_float+0x2d4>)
 8004636:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800463a:	bf94      	ite	ls
 800463c:	4690      	movls	r8, r2
 800463e:	4698      	movhi	r8, r3
 8004640:	2303      	movs	r3, #3
 8004642:	f04f 0a00 	mov.w	sl, #0
 8004646:	6123      	str	r3, [r4, #16]
 8004648:	f02b 0304 	bic.w	r3, fp, #4
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	4633      	mov	r3, r6
 8004650:	4621      	mov	r1, r4
 8004652:	4628      	mov	r0, r5
 8004654:	9700      	str	r7, [sp, #0]
 8004656:	aa0f      	add	r2, sp, #60	; 0x3c
 8004658:	f000 f9d6 	bl	8004a08 <_printf_common>
 800465c:	3001      	adds	r0, #1
 800465e:	f040 8090 	bne.w	8004782 <_printf_float+0x1d6>
 8004662:	f04f 30ff 	mov.w	r0, #4294967295
 8004666:	b011      	add	sp, #68	; 0x44
 8004668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800466c:	4652      	mov	r2, sl
 800466e:	4643      	mov	r3, r8
 8004670:	4650      	mov	r0, sl
 8004672:	4641      	mov	r1, r8
 8004674:	f7fc f9ca 	bl	8000a0c <__aeabi_dcmpun>
 8004678:	b148      	cbz	r0, 800468e <_printf_float+0xe2>
 800467a:	f1b8 0f00 	cmp.w	r8, #0
 800467e:	bfb8      	it	lt
 8004680:	232d      	movlt	r3, #45	; 0x2d
 8004682:	4a80      	ldr	r2, [pc, #512]	; (8004884 <_printf_float+0x2d8>)
 8004684:	bfb8      	it	lt
 8004686:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800468a:	4b7f      	ldr	r3, [pc, #508]	; (8004888 <_printf_float+0x2dc>)
 800468c:	e7d3      	b.n	8004636 <_printf_float+0x8a>
 800468e:	6863      	ldr	r3, [r4, #4]
 8004690:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	d142      	bne.n	800471e <_printf_float+0x172>
 8004698:	2306      	movs	r3, #6
 800469a:	6063      	str	r3, [r4, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	9206      	str	r2, [sp, #24]
 80046a0:	aa0e      	add	r2, sp, #56	; 0x38
 80046a2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80046a6:	aa0d      	add	r2, sp, #52	; 0x34
 80046a8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80046ac:	9203      	str	r2, [sp, #12]
 80046ae:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80046b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80046b6:	6023      	str	r3, [r4, #0]
 80046b8:	6863      	ldr	r3, [r4, #4]
 80046ba:	4652      	mov	r2, sl
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	4628      	mov	r0, r5
 80046c0:	4643      	mov	r3, r8
 80046c2:	910b      	str	r1, [sp, #44]	; 0x2c
 80046c4:	f7ff fed6 	bl	8004474 <__cvt>
 80046c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046ca:	4680      	mov	r8, r0
 80046cc:	2947      	cmp	r1, #71	; 0x47
 80046ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 80046d0:	d108      	bne.n	80046e4 <_printf_float+0x138>
 80046d2:	1cc8      	adds	r0, r1, #3
 80046d4:	db02      	blt.n	80046dc <_printf_float+0x130>
 80046d6:	6863      	ldr	r3, [r4, #4]
 80046d8:	4299      	cmp	r1, r3
 80046da:	dd40      	ble.n	800475e <_printf_float+0x1b2>
 80046dc:	f1a9 0902 	sub.w	r9, r9, #2
 80046e0:	fa5f f989 	uxtb.w	r9, r9
 80046e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80046e8:	d81f      	bhi.n	800472a <_printf_float+0x17e>
 80046ea:	464a      	mov	r2, r9
 80046ec:	3901      	subs	r1, #1
 80046ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80046f2:	910d      	str	r1, [sp, #52]	; 0x34
 80046f4:	f7ff ff1d 	bl	8004532 <__exponent>
 80046f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046fa:	4682      	mov	sl, r0
 80046fc:	1813      	adds	r3, r2, r0
 80046fe:	2a01      	cmp	r2, #1
 8004700:	6123      	str	r3, [r4, #16]
 8004702:	dc02      	bgt.n	800470a <_printf_float+0x15e>
 8004704:	6822      	ldr	r2, [r4, #0]
 8004706:	07d2      	lsls	r2, r2, #31
 8004708:	d501      	bpl.n	800470e <_printf_float+0x162>
 800470a:	3301      	adds	r3, #1
 800470c:	6123      	str	r3, [r4, #16]
 800470e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004712:	2b00      	cmp	r3, #0
 8004714:	d09b      	beq.n	800464e <_printf_float+0xa2>
 8004716:	232d      	movs	r3, #45	; 0x2d
 8004718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800471c:	e797      	b.n	800464e <_printf_float+0xa2>
 800471e:	2947      	cmp	r1, #71	; 0x47
 8004720:	d1bc      	bne.n	800469c <_printf_float+0xf0>
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1ba      	bne.n	800469c <_printf_float+0xf0>
 8004726:	2301      	movs	r3, #1
 8004728:	e7b7      	b.n	800469a <_printf_float+0xee>
 800472a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800472e:	d118      	bne.n	8004762 <_printf_float+0x1b6>
 8004730:	2900      	cmp	r1, #0
 8004732:	6863      	ldr	r3, [r4, #4]
 8004734:	dd0b      	ble.n	800474e <_printf_float+0x1a2>
 8004736:	6121      	str	r1, [r4, #16]
 8004738:	b913      	cbnz	r3, 8004740 <_printf_float+0x194>
 800473a:	6822      	ldr	r2, [r4, #0]
 800473c:	07d0      	lsls	r0, r2, #31
 800473e:	d502      	bpl.n	8004746 <_printf_float+0x19a>
 8004740:	3301      	adds	r3, #1
 8004742:	440b      	add	r3, r1
 8004744:	6123      	str	r3, [r4, #16]
 8004746:	f04f 0a00 	mov.w	sl, #0
 800474a:	65a1      	str	r1, [r4, #88]	; 0x58
 800474c:	e7df      	b.n	800470e <_printf_float+0x162>
 800474e:	b913      	cbnz	r3, 8004756 <_printf_float+0x1aa>
 8004750:	6822      	ldr	r2, [r4, #0]
 8004752:	07d2      	lsls	r2, r2, #31
 8004754:	d501      	bpl.n	800475a <_printf_float+0x1ae>
 8004756:	3302      	adds	r3, #2
 8004758:	e7f4      	b.n	8004744 <_printf_float+0x198>
 800475a:	2301      	movs	r3, #1
 800475c:	e7f2      	b.n	8004744 <_printf_float+0x198>
 800475e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004764:	4299      	cmp	r1, r3
 8004766:	db05      	blt.n	8004774 <_printf_float+0x1c8>
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	6121      	str	r1, [r4, #16]
 800476c:	07d8      	lsls	r0, r3, #31
 800476e:	d5ea      	bpl.n	8004746 <_printf_float+0x19a>
 8004770:	1c4b      	adds	r3, r1, #1
 8004772:	e7e7      	b.n	8004744 <_printf_float+0x198>
 8004774:	2900      	cmp	r1, #0
 8004776:	bfcc      	ite	gt
 8004778:	2201      	movgt	r2, #1
 800477a:	f1c1 0202 	rsble	r2, r1, #2
 800477e:	4413      	add	r3, r2
 8004780:	e7e0      	b.n	8004744 <_printf_float+0x198>
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	055a      	lsls	r2, r3, #21
 8004786:	d407      	bmi.n	8004798 <_printf_float+0x1ec>
 8004788:	6923      	ldr	r3, [r4, #16]
 800478a:	4642      	mov	r2, r8
 800478c:	4631      	mov	r1, r6
 800478e:	4628      	mov	r0, r5
 8004790:	47b8      	blx	r7
 8004792:	3001      	adds	r0, #1
 8004794:	d12b      	bne.n	80047ee <_printf_float+0x242>
 8004796:	e764      	b.n	8004662 <_printf_float+0xb6>
 8004798:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800479c:	f240 80dd 	bls.w	800495a <_printf_float+0x3ae>
 80047a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047a4:	2200      	movs	r2, #0
 80047a6:	2300      	movs	r3, #0
 80047a8:	f7fc f8fe 	bl	80009a8 <__aeabi_dcmpeq>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	d033      	beq.n	8004818 <_printf_float+0x26c>
 80047b0:	2301      	movs	r3, #1
 80047b2:	4631      	mov	r1, r6
 80047b4:	4628      	mov	r0, r5
 80047b6:	4a35      	ldr	r2, [pc, #212]	; (800488c <_printf_float+0x2e0>)
 80047b8:	47b8      	blx	r7
 80047ba:	3001      	adds	r0, #1
 80047bc:	f43f af51 	beq.w	8004662 <_printf_float+0xb6>
 80047c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047c4:	429a      	cmp	r2, r3
 80047c6:	db02      	blt.n	80047ce <_printf_float+0x222>
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	07d8      	lsls	r0, r3, #31
 80047cc:	d50f      	bpl.n	80047ee <_printf_float+0x242>
 80047ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047d2:	4631      	mov	r1, r6
 80047d4:	4628      	mov	r0, r5
 80047d6:	47b8      	blx	r7
 80047d8:	3001      	adds	r0, #1
 80047da:	f43f af42 	beq.w	8004662 <_printf_float+0xb6>
 80047de:	f04f 0800 	mov.w	r8, #0
 80047e2:	f104 091a 	add.w	r9, r4, #26
 80047e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047e8:	3b01      	subs	r3, #1
 80047ea:	4543      	cmp	r3, r8
 80047ec:	dc09      	bgt.n	8004802 <_printf_float+0x256>
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	079b      	lsls	r3, r3, #30
 80047f2:	f100 8104 	bmi.w	80049fe <_printf_float+0x452>
 80047f6:	68e0      	ldr	r0, [r4, #12]
 80047f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80047fa:	4298      	cmp	r0, r3
 80047fc:	bfb8      	it	lt
 80047fe:	4618      	movlt	r0, r3
 8004800:	e731      	b.n	8004666 <_printf_float+0xba>
 8004802:	2301      	movs	r3, #1
 8004804:	464a      	mov	r2, r9
 8004806:	4631      	mov	r1, r6
 8004808:	4628      	mov	r0, r5
 800480a:	47b8      	blx	r7
 800480c:	3001      	adds	r0, #1
 800480e:	f43f af28 	beq.w	8004662 <_printf_float+0xb6>
 8004812:	f108 0801 	add.w	r8, r8, #1
 8004816:	e7e6      	b.n	80047e6 <_printf_float+0x23a>
 8004818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800481a:	2b00      	cmp	r3, #0
 800481c:	dc38      	bgt.n	8004890 <_printf_float+0x2e4>
 800481e:	2301      	movs	r3, #1
 8004820:	4631      	mov	r1, r6
 8004822:	4628      	mov	r0, r5
 8004824:	4a19      	ldr	r2, [pc, #100]	; (800488c <_printf_float+0x2e0>)
 8004826:	47b8      	blx	r7
 8004828:	3001      	adds	r0, #1
 800482a:	f43f af1a 	beq.w	8004662 <_printf_float+0xb6>
 800482e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004832:	4313      	orrs	r3, r2
 8004834:	d102      	bne.n	800483c <_printf_float+0x290>
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	07d9      	lsls	r1, r3, #31
 800483a:	d5d8      	bpl.n	80047ee <_printf_float+0x242>
 800483c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004840:	4631      	mov	r1, r6
 8004842:	4628      	mov	r0, r5
 8004844:	47b8      	blx	r7
 8004846:	3001      	adds	r0, #1
 8004848:	f43f af0b 	beq.w	8004662 <_printf_float+0xb6>
 800484c:	f04f 0900 	mov.w	r9, #0
 8004850:	f104 0a1a 	add.w	sl, r4, #26
 8004854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004856:	425b      	negs	r3, r3
 8004858:	454b      	cmp	r3, r9
 800485a:	dc01      	bgt.n	8004860 <_printf_float+0x2b4>
 800485c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800485e:	e794      	b.n	800478a <_printf_float+0x1de>
 8004860:	2301      	movs	r3, #1
 8004862:	4652      	mov	r2, sl
 8004864:	4631      	mov	r1, r6
 8004866:	4628      	mov	r0, r5
 8004868:	47b8      	blx	r7
 800486a:	3001      	adds	r0, #1
 800486c:	f43f aef9 	beq.w	8004662 <_printf_float+0xb6>
 8004870:	f109 0901 	add.w	r9, r9, #1
 8004874:	e7ee      	b.n	8004854 <_printf_float+0x2a8>
 8004876:	bf00      	nop
 8004878:	7fefffff 	.word	0x7fefffff
 800487c:	08008302 	.word	0x08008302
 8004880:	08008306 	.word	0x08008306
 8004884:	0800830a 	.word	0x0800830a
 8004888:	0800830e 	.word	0x0800830e
 800488c:	08008312 	.word	0x08008312
 8004890:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004892:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004894:	429a      	cmp	r2, r3
 8004896:	bfa8      	it	ge
 8004898:	461a      	movge	r2, r3
 800489a:	2a00      	cmp	r2, #0
 800489c:	4691      	mov	r9, r2
 800489e:	dc37      	bgt.n	8004910 <_printf_float+0x364>
 80048a0:	f04f 0b00 	mov.w	fp, #0
 80048a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048a8:	f104 021a 	add.w	r2, r4, #26
 80048ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80048b0:	ebaa 0309 	sub.w	r3, sl, r9
 80048b4:	455b      	cmp	r3, fp
 80048b6:	dc33      	bgt.n	8004920 <_printf_float+0x374>
 80048b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80048bc:	429a      	cmp	r2, r3
 80048be:	db3b      	blt.n	8004938 <_printf_float+0x38c>
 80048c0:	6823      	ldr	r3, [r4, #0]
 80048c2:	07da      	lsls	r2, r3, #31
 80048c4:	d438      	bmi.n	8004938 <_printf_float+0x38c>
 80048c6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80048ca:	eba2 0903 	sub.w	r9, r2, r3
 80048ce:	eba2 020a 	sub.w	r2, r2, sl
 80048d2:	4591      	cmp	r9, r2
 80048d4:	bfa8      	it	ge
 80048d6:	4691      	movge	r9, r2
 80048d8:	f1b9 0f00 	cmp.w	r9, #0
 80048dc:	dc34      	bgt.n	8004948 <_printf_float+0x39c>
 80048de:	f04f 0800 	mov.w	r8, #0
 80048e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048e6:	f104 0a1a 	add.w	sl, r4, #26
 80048ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	eba3 0309 	sub.w	r3, r3, r9
 80048f4:	4543      	cmp	r3, r8
 80048f6:	f77f af7a 	ble.w	80047ee <_printf_float+0x242>
 80048fa:	2301      	movs	r3, #1
 80048fc:	4652      	mov	r2, sl
 80048fe:	4631      	mov	r1, r6
 8004900:	4628      	mov	r0, r5
 8004902:	47b8      	blx	r7
 8004904:	3001      	adds	r0, #1
 8004906:	f43f aeac 	beq.w	8004662 <_printf_float+0xb6>
 800490a:	f108 0801 	add.w	r8, r8, #1
 800490e:	e7ec      	b.n	80048ea <_printf_float+0x33e>
 8004910:	4613      	mov	r3, r2
 8004912:	4631      	mov	r1, r6
 8004914:	4642      	mov	r2, r8
 8004916:	4628      	mov	r0, r5
 8004918:	47b8      	blx	r7
 800491a:	3001      	adds	r0, #1
 800491c:	d1c0      	bne.n	80048a0 <_printf_float+0x2f4>
 800491e:	e6a0      	b.n	8004662 <_printf_float+0xb6>
 8004920:	2301      	movs	r3, #1
 8004922:	4631      	mov	r1, r6
 8004924:	4628      	mov	r0, r5
 8004926:	920b      	str	r2, [sp, #44]	; 0x2c
 8004928:	47b8      	blx	r7
 800492a:	3001      	adds	r0, #1
 800492c:	f43f ae99 	beq.w	8004662 <_printf_float+0xb6>
 8004930:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004932:	f10b 0b01 	add.w	fp, fp, #1
 8004936:	e7b9      	b.n	80048ac <_printf_float+0x300>
 8004938:	4631      	mov	r1, r6
 800493a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800493e:	4628      	mov	r0, r5
 8004940:	47b8      	blx	r7
 8004942:	3001      	adds	r0, #1
 8004944:	d1bf      	bne.n	80048c6 <_printf_float+0x31a>
 8004946:	e68c      	b.n	8004662 <_printf_float+0xb6>
 8004948:	464b      	mov	r3, r9
 800494a:	4631      	mov	r1, r6
 800494c:	4628      	mov	r0, r5
 800494e:	eb08 020a 	add.w	r2, r8, sl
 8004952:	47b8      	blx	r7
 8004954:	3001      	adds	r0, #1
 8004956:	d1c2      	bne.n	80048de <_printf_float+0x332>
 8004958:	e683      	b.n	8004662 <_printf_float+0xb6>
 800495a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800495c:	2a01      	cmp	r2, #1
 800495e:	dc01      	bgt.n	8004964 <_printf_float+0x3b8>
 8004960:	07db      	lsls	r3, r3, #31
 8004962:	d539      	bpl.n	80049d8 <_printf_float+0x42c>
 8004964:	2301      	movs	r3, #1
 8004966:	4642      	mov	r2, r8
 8004968:	4631      	mov	r1, r6
 800496a:	4628      	mov	r0, r5
 800496c:	47b8      	blx	r7
 800496e:	3001      	adds	r0, #1
 8004970:	f43f ae77 	beq.w	8004662 <_printf_float+0xb6>
 8004974:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004978:	4631      	mov	r1, r6
 800497a:	4628      	mov	r0, r5
 800497c:	47b8      	blx	r7
 800497e:	3001      	adds	r0, #1
 8004980:	f43f ae6f 	beq.w	8004662 <_printf_float+0xb6>
 8004984:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004988:	2200      	movs	r2, #0
 800498a:	2300      	movs	r3, #0
 800498c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004990:	f7fc f80a 	bl	80009a8 <__aeabi_dcmpeq>
 8004994:	b9d8      	cbnz	r0, 80049ce <_printf_float+0x422>
 8004996:	f109 33ff 	add.w	r3, r9, #4294967295
 800499a:	f108 0201 	add.w	r2, r8, #1
 800499e:	4631      	mov	r1, r6
 80049a0:	4628      	mov	r0, r5
 80049a2:	47b8      	blx	r7
 80049a4:	3001      	adds	r0, #1
 80049a6:	d10e      	bne.n	80049c6 <_printf_float+0x41a>
 80049a8:	e65b      	b.n	8004662 <_printf_float+0xb6>
 80049aa:	2301      	movs	r3, #1
 80049ac:	464a      	mov	r2, r9
 80049ae:	4631      	mov	r1, r6
 80049b0:	4628      	mov	r0, r5
 80049b2:	47b8      	blx	r7
 80049b4:	3001      	adds	r0, #1
 80049b6:	f43f ae54 	beq.w	8004662 <_printf_float+0xb6>
 80049ba:	f108 0801 	add.w	r8, r8, #1
 80049be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049c0:	3b01      	subs	r3, #1
 80049c2:	4543      	cmp	r3, r8
 80049c4:	dcf1      	bgt.n	80049aa <_printf_float+0x3fe>
 80049c6:	4653      	mov	r3, sl
 80049c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80049cc:	e6de      	b.n	800478c <_printf_float+0x1e0>
 80049ce:	f04f 0800 	mov.w	r8, #0
 80049d2:	f104 091a 	add.w	r9, r4, #26
 80049d6:	e7f2      	b.n	80049be <_printf_float+0x412>
 80049d8:	2301      	movs	r3, #1
 80049da:	4642      	mov	r2, r8
 80049dc:	e7df      	b.n	800499e <_printf_float+0x3f2>
 80049de:	2301      	movs	r3, #1
 80049e0:	464a      	mov	r2, r9
 80049e2:	4631      	mov	r1, r6
 80049e4:	4628      	mov	r0, r5
 80049e6:	47b8      	blx	r7
 80049e8:	3001      	adds	r0, #1
 80049ea:	f43f ae3a 	beq.w	8004662 <_printf_float+0xb6>
 80049ee:	f108 0801 	add.w	r8, r8, #1
 80049f2:	68e3      	ldr	r3, [r4, #12]
 80049f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80049f6:	1a5b      	subs	r3, r3, r1
 80049f8:	4543      	cmp	r3, r8
 80049fa:	dcf0      	bgt.n	80049de <_printf_float+0x432>
 80049fc:	e6fb      	b.n	80047f6 <_printf_float+0x24a>
 80049fe:	f04f 0800 	mov.w	r8, #0
 8004a02:	f104 0919 	add.w	r9, r4, #25
 8004a06:	e7f4      	b.n	80049f2 <_printf_float+0x446>

08004a08 <_printf_common>:
 8004a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a0c:	4616      	mov	r6, r2
 8004a0e:	4699      	mov	r9, r3
 8004a10:	688a      	ldr	r2, [r1, #8]
 8004a12:	690b      	ldr	r3, [r1, #16]
 8004a14:	4607      	mov	r7, r0
 8004a16:	4293      	cmp	r3, r2
 8004a18:	bfb8      	it	lt
 8004a1a:	4613      	movlt	r3, r2
 8004a1c:	6033      	str	r3, [r6, #0]
 8004a1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a22:	460c      	mov	r4, r1
 8004a24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a28:	b10a      	cbz	r2, 8004a2e <_printf_common+0x26>
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	6033      	str	r3, [r6, #0]
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	0699      	lsls	r1, r3, #26
 8004a32:	bf42      	ittt	mi
 8004a34:	6833      	ldrmi	r3, [r6, #0]
 8004a36:	3302      	addmi	r3, #2
 8004a38:	6033      	strmi	r3, [r6, #0]
 8004a3a:	6825      	ldr	r5, [r4, #0]
 8004a3c:	f015 0506 	ands.w	r5, r5, #6
 8004a40:	d106      	bne.n	8004a50 <_printf_common+0x48>
 8004a42:	f104 0a19 	add.w	sl, r4, #25
 8004a46:	68e3      	ldr	r3, [r4, #12]
 8004a48:	6832      	ldr	r2, [r6, #0]
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	42ab      	cmp	r3, r5
 8004a4e:	dc2b      	bgt.n	8004aa8 <_printf_common+0xa0>
 8004a50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a54:	1e13      	subs	r3, r2, #0
 8004a56:	6822      	ldr	r2, [r4, #0]
 8004a58:	bf18      	it	ne
 8004a5a:	2301      	movne	r3, #1
 8004a5c:	0692      	lsls	r2, r2, #26
 8004a5e:	d430      	bmi.n	8004ac2 <_printf_common+0xba>
 8004a60:	4649      	mov	r1, r9
 8004a62:	4638      	mov	r0, r7
 8004a64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a68:	47c0      	blx	r8
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	d023      	beq.n	8004ab6 <_printf_common+0xae>
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	6922      	ldr	r2, [r4, #16]
 8004a72:	f003 0306 	and.w	r3, r3, #6
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	bf14      	ite	ne
 8004a7a:	2500      	movne	r5, #0
 8004a7c:	6833      	ldreq	r3, [r6, #0]
 8004a7e:	f04f 0600 	mov.w	r6, #0
 8004a82:	bf08      	it	eq
 8004a84:	68e5      	ldreq	r5, [r4, #12]
 8004a86:	f104 041a 	add.w	r4, r4, #26
 8004a8a:	bf08      	it	eq
 8004a8c:	1aed      	subeq	r5, r5, r3
 8004a8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004a92:	bf08      	it	eq
 8004a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	bfc4      	itt	gt
 8004a9c:	1a9b      	subgt	r3, r3, r2
 8004a9e:	18ed      	addgt	r5, r5, r3
 8004aa0:	42b5      	cmp	r5, r6
 8004aa2:	d11a      	bne.n	8004ada <_printf_common+0xd2>
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	e008      	b.n	8004aba <_printf_common+0xb2>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	4652      	mov	r2, sl
 8004aac:	4649      	mov	r1, r9
 8004aae:	4638      	mov	r0, r7
 8004ab0:	47c0      	blx	r8
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	d103      	bne.n	8004abe <_printf_common+0xb6>
 8004ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004abe:	3501      	adds	r5, #1
 8004ac0:	e7c1      	b.n	8004a46 <_printf_common+0x3e>
 8004ac2:	2030      	movs	r0, #48	; 0x30
 8004ac4:	18e1      	adds	r1, r4, r3
 8004ac6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ad0:	4422      	add	r2, r4
 8004ad2:	3302      	adds	r3, #2
 8004ad4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ad8:	e7c2      	b.n	8004a60 <_printf_common+0x58>
 8004ada:	2301      	movs	r3, #1
 8004adc:	4622      	mov	r2, r4
 8004ade:	4649      	mov	r1, r9
 8004ae0:	4638      	mov	r0, r7
 8004ae2:	47c0      	blx	r8
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	d0e6      	beq.n	8004ab6 <_printf_common+0xae>
 8004ae8:	3601      	adds	r6, #1
 8004aea:	e7d9      	b.n	8004aa0 <_printf_common+0x98>

08004aec <_printf_i>:
 8004aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004af0:	7e0f      	ldrb	r7, [r1, #24]
 8004af2:	4691      	mov	r9, r2
 8004af4:	2f78      	cmp	r7, #120	; 0x78
 8004af6:	4680      	mov	r8, r0
 8004af8:	460c      	mov	r4, r1
 8004afa:	469a      	mov	sl, r3
 8004afc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004afe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b02:	d807      	bhi.n	8004b14 <_printf_i+0x28>
 8004b04:	2f62      	cmp	r7, #98	; 0x62
 8004b06:	d80a      	bhi.n	8004b1e <_printf_i+0x32>
 8004b08:	2f00      	cmp	r7, #0
 8004b0a:	f000 80d5 	beq.w	8004cb8 <_printf_i+0x1cc>
 8004b0e:	2f58      	cmp	r7, #88	; 0x58
 8004b10:	f000 80c1 	beq.w	8004c96 <_printf_i+0x1aa>
 8004b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b1c:	e03a      	b.n	8004b94 <_printf_i+0xa8>
 8004b1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b22:	2b15      	cmp	r3, #21
 8004b24:	d8f6      	bhi.n	8004b14 <_printf_i+0x28>
 8004b26:	a101      	add	r1, pc, #4	; (adr r1, 8004b2c <_printf_i+0x40>)
 8004b28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b2c:	08004b85 	.word	0x08004b85
 8004b30:	08004b99 	.word	0x08004b99
 8004b34:	08004b15 	.word	0x08004b15
 8004b38:	08004b15 	.word	0x08004b15
 8004b3c:	08004b15 	.word	0x08004b15
 8004b40:	08004b15 	.word	0x08004b15
 8004b44:	08004b99 	.word	0x08004b99
 8004b48:	08004b15 	.word	0x08004b15
 8004b4c:	08004b15 	.word	0x08004b15
 8004b50:	08004b15 	.word	0x08004b15
 8004b54:	08004b15 	.word	0x08004b15
 8004b58:	08004c9f 	.word	0x08004c9f
 8004b5c:	08004bc5 	.word	0x08004bc5
 8004b60:	08004c59 	.word	0x08004c59
 8004b64:	08004b15 	.word	0x08004b15
 8004b68:	08004b15 	.word	0x08004b15
 8004b6c:	08004cc1 	.word	0x08004cc1
 8004b70:	08004b15 	.word	0x08004b15
 8004b74:	08004bc5 	.word	0x08004bc5
 8004b78:	08004b15 	.word	0x08004b15
 8004b7c:	08004b15 	.word	0x08004b15
 8004b80:	08004c61 	.word	0x08004c61
 8004b84:	682b      	ldr	r3, [r5, #0]
 8004b86:	1d1a      	adds	r2, r3, #4
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	602a      	str	r2, [r5, #0]
 8004b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0a0      	b.n	8004cda <_printf_i+0x1ee>
 8004b98:	6820      	ldr	r0, [r4, #0]
 8004b9a:	682b      	ldr	r3, [r5, #0]
 8004b9c:	0607      	lsls	r7, r0, #24
 8004b9e:	f103 0104 	add.w	r1, r3, #4
 8004ba2:	6029      	str	r1, [r5, #0]
 8004ba4:	d501      	bpl.n	8004baa <_printf_i+0xbe>
 8004ba6:	681e      	ldr	r6, [r3, #0]
 8004ba8:	e003      	b.n	8004bb2 <_printf_i+0xc6>
 8004baa:	0646      	lsls	r6, r0, #25
 8004bac:	d5fb      	bpl.n	8004ba6 <_printf_i+0xba>
 8004bae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004bb2:	2e00      	cmp	r6, #0
 8004bb4:	da03      	bge.n	8004bbe <_printf_i+0xd2>
 8004bb6:	232d      	movs	r3, #45	; 0x2d
 8004bb8:	4276      	negs	r6, r6
 8004bba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bbe:	230a      	movs	r3, #10
 8004bc0:	4859      	ldr	r0, [pc, #356]	; (8004d28 <_printf_i+0x23c>)
 8004bc2:	e012      	b.n	8004bea <_printf_i+0xfe>
 8004bc4:	682b      	ldr	r3, [r5, #0]
 8004bc6:	6820      	ldr	r0, [r4, #0]
 8004bc8:	1d19      	adds	r1, r3, #4
 8004bca:	6029      	str	r1, [r5, #0]
 8004bcc:	0605      	lsls	r5, r0, #24
 8004bce:	d501      	bpl.n	8004bd4 <_printf_i+0xe8>
 8004bd0:	681e      	ldr	r6, [r3, #0]
 8004bd2:	e002      	b.n	8004bda <_printf_i+0xee>
 8004bd4:	0641      	lsls	r1, r0, #25
 8004bd6:	d5fb      	bpl.n	8004bd0 <_printf_i+0xe4>
 8004bd8:	881e      	ldrh	r6, [r3, #0]
 8004bda:	2f6f      	cmp	r7, #111	; 0x6f
 8004bdc:	bf0c      	ite	eq
 8004bde:	2308      	moveq	r3, #8
 8004be0:	230a      	movne	r3, #10
 8004be2:	4851      	ldr	r0, [pc, #324]	; (8004d28 <_printf_i+0x23c>)
 8004be4:	2100      	movs	r1, #0
 8004be6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bea:	6865      	ldr	r5, [r4, #4]
 8004bec:	2d00      	cmp	r5, #0
 8004bee:	bfa8      	it	ge
 8004bf0:	6821      	ldrge	r1, [r4, #0]
 8004bf2:	60a5      	str	r5, [r4, #8]
 8004bf4:	bfa4      	itt	ge
 8004bf6:	f021 0104 	bicge.w	r1, r1, #4
 8004bfa:	6021      	strge	r1, [r4, #0]
 8004bfc:	b90e      	cbnz	r6, 8004c02 <_printf_i+0x116>
 8004bfe:	2d00      	cmp	r5, #0
 8004c00:	d04b      	beq.n	8004c9a <_printf_i+0x1ae>
 8004c02:	4615      	mov	r5, r2
 8004c04:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c08:	fb03 6711 	mls	r7, r3, r1, r6
 8004c0c:	5dc7      	ldrb	r7, [r0, r7]
 8004c0e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c12:	4637      	mov	r7, r6
 8004c14:	42bb      	cmp	r3, r7
 8004c16:	460e      	mov	r6, r1
 8004c18:	d9f4      	bls.n	8004c04 <_printf_i+0x118>
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d10b      	bne.n	8004c36 <_printf_i+0x14a>
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	07de      	lsls	r6, r3, #31
 8004c22:	d508      	bpl.n	8004c36 <_printf_i+0x14a>
 8004c24:	6923      	ldr	r3, [r4, #16]
 8004c26:	6861      	ldr	r1, [r4, #4]
 8004c28:	4299      	cmp	r1, r3
 8004c2a:	bfde      	ittt	le
 8004c2c:	2330      	movle	r3, #48	; 0x30
 8004c2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c36:	1b52      	subs	r2, r2, r5
 8004c38:	6122      	str	r2, [r4, #16]
 8004c3a:	464b      	mov	r3, r9
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	4640      	mov	r0, r8
 8004c40:	f8cd a000 	str.w	sl, [sp]
 8004c44:	aa03      	add	r2, sp, #12
 8004c46:	f7ff fedf 	bl	8004a08 <_printf_common>
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d14a      	bne.n	8004ce4 <_printf_i+0x1f8>
 8004c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c52:	b004      	add	sp, #16
 8004c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	f043 0320 	orr.w	r3, r3, #32
 8004c5e:	6023      	str	r3, [r4, #0]
 8004c60:	2778      	movs	r7, #120	; 0x78
 8004c62:	4832      	ldr	r0, [pc, #200]	; (8004d2c <_printf_i+0x240>)
 8004c64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	6829      	ldr	r1, [r5, #0]
 8004c6c:	061f      	lsls	r7, r3, #24
 8004c6e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c72:	d402      	bmi.n	8004c7a <_printf_i+0x18e>
 8004c74:	065f      	lsls	r7, r3, #25
 8004c76:	bf48      	it	mi
 8004c78:	b2b6      	uxthmi	r6, r6
 8004c7a:	07df      	lsls	r7, r3, #31
 8004c7c:	bf48      	it	mi
 8004c7e:	f043 0320 	orrmi.w	r3, r3, #32
 8004c82:	6029      	str	r1, [r5, #0]
 8004c84:	bf48      	it	mi
 8004c86:	6023      	strmi	r3, [r4, #0]
 8004c88:	b91e      	cbnz	r6, 8004c92 <_printf_i+0x1a6>
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	f023 0320 	bic.w	r3, r3, #32
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	2310      	movs	r3, #16
 8004c94:	e7a6      	b.n	8004be4 <_printf_i+0xf8>
 8004c96:	4824      	ldr	r0, [pc, #144]	; (8004d28 <_printf_i+0x23c>)
 8004c98:	e7e4      	b.n	8004c64 <_printf_i+0x178>
 8004c9a:	4615      	mov	r5, r2
 8004c9c:	e7bd      	b.n	8004c1a <_printf_i+0x12e>
 8004c9e:	682b      	ldr	r3, [r5, #0]
 8004ca0:	6826      	ldr	r6, [r4, #0]
 8004ca2:	1d18      	adds	r0, r3, #4
 8004ca4:	6961      	ldr	r1, [r4, #20]
 8004ca6:	6028      	str	r0, [r5, #0]
 8004ca8:	0635      	lsls	r5, r6, #24
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	d501      	bpl.n	8004cb2 <_printf_i+0x1c6>
 8004cae:	6019      	str	r1, [r3, #0]
 8004cb0:	e002      	b.n	8004cb8 <_printf_i+0x1cc>
 8004cb2:	0670      	lsls	r0, r6, #25
 8004cb4:	d5fb      	bpl.n	8004cae <_printf_i+0x1c2>
 8004cb6:	8019      	strh	r1, [r3, #0]
 8004cb8:	2300      	movs	r3, #0
 8004cba:	4615      	mov	r5, r2
 8004cbc:	6123      	str	r3, [r4, #16]
 8004cbe:	e7bc      	b.n	8004c3a <_printf_i+0x14e>
 8004cc0:	682b      	ldr	r3, [r5, #0]
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	1d1a      	adds	r2, r3, #4
 8004cc6:	602a      	str	r2, [r5, #0]
 8004cc8:	681d      	ldr	r5, [r3, #0]
 8004cca:	6862      	ldr	r2, [r4, #4]
 8004ccc:	4628      	mov	r0, r5
 8004cce:	f000 f9c1 	bl	8005054 <memchr>
 8004cd2:	b108      	cbz	r0, 8004cd8 <_printf_i+0x1ec>
 8004cd4:	1b40      	subs	r0, r0, r5
 8004cd6:	6060      	str	r0, [r4, #4]
 8004cd8:	6863      	ldr	r3, [r4, #4]
 8004cda:	6123      	str	r3, [r4, #16]
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ce2:	e7aa      	b.n	8004c3a <_printf_i+0x14e>
 8004ce4:	462a      	mov	r2, r5
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	4640      	mov	r0, r8
 8004cea:	6923      	ldr	r3, [r4, #16]
 8004cec:	47d0      	blx	sl
 8004cee:	3001      	adds	r0, #1
 8004cf0:	d0ad      	beq.n	8004c4e <_printf_i+0x162>
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	079b      	lsls	r3, r3, #30
 8004cf6:	d413      	bmi.n	8004d20 <_printf_i+0x234>
 8004cf8:	68e0      	ldr	r0, [r4, #12]
 8004cfa:	9b03      	ldr	r3, [sp, #12]
 8004cfc:	4298      	cmp	r0, r3
 8004cfe:	bfb8      	it	lt
 8004d00:	4618      	movlt	r0, r3
 8004d02:	e7a6      	b.n	8004c52 <_printf_i+0x166>
 8004d04:	2301      	movs	r3, #1
 8004d06:	4632      	mov	r2, r6
 8004d08:	4649      	mov	r1, r9
 8004d0a:	4640      	mov	r0, r8
 8004d0c:	47d0      	blx	sl
 8004d0e:	3001      	adds	r0, #1
 8004d10:	d09d      	beq.n	8004c4e <_printf_i+0x162>
 8004d12:	3501      	adds	r5, #1
 8004d14:	68e3      	ldr	r3, [r4, #12]
 8004d16:	9903      	ldr	r1, [sp, #12]
 8004d18:	1a5b      	subs	r3, r3, r1
 8004d1a:	42ab      	cmp	r3, r5
 8004d1c:	dcf2      	bgt.n	8004d04 <_printf_i+0x218>
 8004d1e:	e7eb      	b.n	8004cf8 <_printf_i+0x20c>
 8004d20:	2500      	movs	r5, #0
 8004d22:	f104 0619 	add.w	r6, r4, #25
 8004d26:	e7f5      	b.n	8004d14 <_printf_i+0x228>
 8004d28:	08008314 	.word	0x08008314
 8004d2c:	08008325 	.word	0x08008325

08004d30 <std>:
 8004d30:	2300      	movs	r3, #0
 8004d32:	b510      	push	{r4, lr}
 8004d34:	4604      	mov	r4, r0
 8004d36:	e9c0 3300 	strd	r3, r3, [r0]
 8004d3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d3e:	6083      	str	r3, [r0, #8]
 8004d40:	8181      	strh	r1, [r0, #12]
 8004d42:	6643      	str	r3, [r0, #100]	; 0x64
 8004d44:	81c2      	strh	r2, [r0, #14]
 8004d46:	6183      	str	r3, [r0, #24]
 8004d48:	4619      	mov	r1, r3
 8004d4a:	2208      	movs	r2, #8
 8004d4c:	305c      	adds	r0, #92	; 0x5c
 8004d4e:	f000 f902 	bl	8004f56 <memset>
 8004d52:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <std+0x38>)
 8004d54:	6224      	str	r4, [r4, #32]
 8004d56:	6263      	str	r3, [r4, #36]	; 0x24
 8004d58:	4b04      	ldr	r3, [pc, #16]	; (8004d6c <std+0x3c>)
 8004d5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d5c:	4b04      	ldr	r3, [pc, #16]	; (8004d70 <std+0x40>)
 8004d5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d60:	4b04      	ldr	r3, [pc, #16]	; (8004d74 <std+0x44>)
 8004d62:	6323      	str	r3, [r4, #48]	; 0x30
 8004d64:	bd10      	pop	{r4, pc}
 8004d66:	bf00      	nop
 8004d68:	08004ed1 	.word	0x08004ed1
 8004d6c:	08004ef3 	.word	0x08004ef3
 8004d70:	08004f2b 	.word	0x08004f2b
 8004d74:	08004f4f 	.word	0x08004f4f

08004d78 <stdio_exit_handler>:
 8004d78:	4a02      	ldr	r2, [pc, #8]	; (8004d84 <stdio_exit_handler+0xc>)
 8004d7a:	4903      	ldr	r1, [pc, #12]	; (8004d88 <stdio_exit_handler+0x10>)
 8004d7c:	4803      	ldr	r0, [pc, #12]	; (8004d8c <stdio_exit_handler+0x14>)
 8004d7e:	f000 b869 	b.w	8004e54 <_fwalk_sglue>
 8004d82:	bf00      	nop
 8004d84:	2000000c 	.word	0x2000000c
 8004d88:	080069ed 	.word	0x080069ed
 8004d8c:	20000018 	.word	0x20000018

08004d90 <cleanup_stdio>:
 8004d90:	6841      	ldr	r1, [r0, #4]
 8004d92:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <cleanup_stdio+0x34>)
 8004d94:	b510      	push	{r4, lr}
 8004d96:	4299      	cmp	r1, r3
 8004d98:	4604      	mov	r4, r0
 8004d9a:	d001      	beq.n	8004da0 <cleanup_stdio+0x10>
 8004d9c:	f001 fe26 	bl	80069ec <_fflush_r>
 8004da0:	68a1      	ldr	r1, [r4, #8]
 8004da2:	4b09      	ldr	r3, [pc, #36]	; (8004dc8 <cleanup_stdio+0x38>)
 8004da4:	4299      	cmp	r1, r3
 8004da6:	d002      	beq.n	8004dae <cleanup_stdio+0x1e>
 8004da8:	4620      	mov	r0, r4
 8004daa:	f001 fe1f 	bl	80069ec <_fflush_r>
 8004dae:	68e1      	ldr	r1, [r4, #12]
 8004db0:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <cleanup_stdio+0x3c>)
 8004db2:	4299      	cmp	r1, r3
 8004db4:	d004      	beq.n	8004dc0 <cleanup_stdio+0x30>
 8004db6:	4620      	mov	r0, r4
 8004db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dbc:	f001 be16 	b.w	80069ec <_fflush_r>
 8004dc0:	bd10      	pop	{r4, pc}
 8004dc2:	bf00      	nop
 8004dc4:	2000073c 	.word	0x2000073c
 8004dc8:	200007a4 	.word	0x200007a4
 8004dcc:	2000080c 	.word	0x2000080c

08004dd0 <global_stdio_init.part.0>:
 8004dd0:	b510      	push	{r4, lr}
 8004dd2:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <global_stdio_init.part.0+0x30>)
 8004dd4:	4c0b      	ldr	r4, [pc, #44]	; (8004e04 <global_stdio_init.part.0+0x34>)
 8004dd6:	4a0c      	ldr	r2, [pc, #48]	; (8004e08 <global_stdio_init.part.0+0x38>)
 8004dd8:	4620      	mov	r0, r4
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	2104      	movs	r1, #4
 8004dde:	2200      	movs	r2, #0
 8004de0:	f7ff ffa6 	bl	8004d30 <std>
 8004de4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004de8:	2201      	movs	r2, #1
 8004dea:	2109      	movs	r1, #9
 8004dec:	f7ff ffa0 	bl	8004d30 <std>
 8004df0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004df4:	2202      	movs	r2, #2
 8004df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dfa:	2112      	movs	r1, #18
 8004dfc:	f7ff bf98 	b.w	8004d30 <std>
 8004e00:	20000874 	.word	0x20000874
 8004e04:	2000073c 	.word	0x2000073c
 8004e08:	08004d79 	.word	0x08004d79

08004e0c <__sfp_lock_acquire>:
 8004e0c:	4801      	ldr	r0, [pc, #4]	; (8004e14 <__sfp_lock_acquire+0x8>)
 8004e0e:	f000 b91f 	b.w	8005050 <__retarget_lock_acquire_recursive>
 8004e12:	bf00      	nop
 8004e14:	2000087d 	.word	0x2000087d

08004e18 <__sfp_lock_release>:
 8004e18:	4801      	ldr	r0, [pc, #4]	; (8004e20 <__sfp_lock_release+0x8>)
 8004e1a:	f000 b91a 	b.w	8005052 <__retarget_lock_release_recursive>
 8004e1e:	bf00      	nop
 8004e20:	2000087d 	.word	0x2000087d

08004e24 <__sinit>:
 8004e24:	b510      	push	{r4, lr}
 8004e26:	4604      	mov	r4, r0
 8004e28:	f7ff fff0 	bl	8004e0c <__sfp_lock_acquire>
 8004e2c:	6a23      	ldr	r3, [r4, #32]
 8004e2e:	b11b      	cbz	r3, 8004e38 <__sinit+0x14>
 8004e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e34:	f7ff bff0 	b.w	8004e18 <__sfp_lock_release>
 8004e38:	4b04      	ldr	r3, [pc, #16]	; (8004e4c <__sinit+0x28>)
 8004e3a:	6223      	str	r3, [r4, #32]
 8004e3c:	4b04      	ldr	r3, [pc, #16]	; (8004e50 <__sinit+0x2c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1f5      	bne.n	8004e30 <__sinit+0xc>
 8004e44:	f7ff ffc4 	bl	8004dd0 <global_stdio_init.part.0>
 8004e48:	e7f2      	b.n	8004e30 <__sinit+0xc>
 8004e4a:	bf00      	nop
 8004e4c:	08004d91 	.word	0x08004d91
 8004e50:	20000874 	.word	0x20000874

08004e54 <_fwalk_sglue>:
 8004e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e58:	4607      	mov	r7, r0
 8004e5a:	4688      	mov	r8, r1
 8004e5c:	4614      	mov	r4, r2
 8004e5e:	2600      	movs	r6, #0
 8004e60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e64:	f1b9 0901 	subs.w	r9, r9, #1
 8004e68:	d505      	bpl.n	8004e76 <_fwalk_sglue+0x22>
 8004e6a:	6824      	ldr	r4, [r4, #0]
 8004e6c:	2c00      	cmp	r4, #0
 8004e6e:	d1f7      	bne.n	8004e60 <_fwalk_sglue+0xc>
 8004e70:	4630      	mov	r0, r6
 8004e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e76:	89ab      	ldrh	r3, [r5, #12]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d907      	bls.n	8004e8c <_fwalk_sglue+0x38>
 8004e7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e80:	3301      	adds	r3, #1
 8004e82:	d003      	beq.n	8004e8c <_fwalk_sglue+0x38>
 8004e84:	4629      	mov	r1, r5
 8004e86:	4638      	mov	r0, r7
 8004e88:	47c0      	blx	r8
 8004e8a:	4306      	orrs	r6, r0
 8004e8c:	3568      	adds	r5, #104	; 0x68
 8004e8e:	e7e9      	b.n	8004e64 <_fwalk_sglue+0x10>

08004e90 <siprintf>:
 8004e90:	b40e      	push	{r1, r2, r3}
 8004e92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e96:	b500      	push	{lr}
 8004e98:	b09c      	sub	sp, #112	; 0x70
 8004e9a:	ab1d      	add	r3, sp, #116	; 0x74
 8004e9c:	9002      	str	r0, [sp, #8]
 8004e9e:	9006      	str	r0, [sp, #24]
 8004ea0:	9107      	str	r1, [sp, #28]
 8004ea2:	9104      	str	r1, [sp, #16]
 8004ea4:	4808      	ldr	r0, [pc, #32]	; (8004ec8 <siprintf+0x38>)
 8004ea6:	4909      	ldr	r1, [pc, #36]	; (8004ecc <siprintf+0x3c>)
 8004ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eac:	9105      	str	r1, [sp, #20]
 8004eae:	6800      	ldr	r0, [r0, #0]
 8004eb0:	a902      	add	r1, sp, #8
 8004eb2:	9301      	str	r3, [sp, #4]
 8004eb4:	f001 fc1a 	bl	80066ec <_svfiprintf_r>
 8004eb8:	2200      	movs	r2, #0
 8004eba:	9b02      	ldr	r3, [sp, #8]
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	b01c      	add	sp, #112	; 0x70
 8004ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ec4:	b003      	add	sp, #12
 8004ec6:	4770      	bx	lr
 8004ec8:	20000064 	.word	0x20000064
 8004ecc:	ffff0208 	.word	0xffff0208

08004ed0 <__sread>:
 8004ed0:	b510      	push	{r4, lr}
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ed8:	f000 f86c 	bl	8004fb4 <_read_r>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	bfab      	itete	ge
 8004ee0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8004ee4:	181b      	addge	r3, r3, r0
 8004ee6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004eea:	bfac      	ite	ge
 8004eec:	6563      	strge	r3, [r4, #84]	; 0x54
 8004eee:	81a3      	strhlt	r3, [r4, #12]
 8004ef0:	bd10      	pop	{r4, pc}

08004ef2 <__swrite>:
 8004ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef6:	461f      	mov	r7, r3
 8004ef8:	898b      	ldrh	r3, [r1, #12]
 8004efa:	4605      	mov	r5, r0
 8004efc:	05db      	lsls	r3, r3, #23
 8004efe:	460c      	mov	r4, r1
 8004f00:	4616      	mov	r6, r2
 8004f02:	d505      	bpl.n	8004f10 <__swrite+0x1e>
 8004f04:	2302      	movs	r3, #2
 8004f06:	2200      	movs	r2, #0
 8004f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f0c:	f000 f840 	bl	8004f90 <_lseek_r>
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	4632      	mov	r2, r6
 8004f14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f18:	81a3      	strh	r3, [r4, #12]
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	463b      	mov	r3, r7
 8004f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f26:	f000 b857 	b.w	8004fd8 <_write_r>

08004f2a <__sseek>:
 8004f2a:	b510      	push	{r4, lr}
 8004f2c:	460c      	mov	r4, r1
 8004f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f32:	f000 f82d 	bl	8004f90 <_lseek_r>
 8004f36:	1c43      	adds	r3, r0, #1
 8004f38:	89a3      	ldrh	r3, [r4, #12]
 8004f3a:	bf15      	itete	ne
 8004f3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f46:	81a3      	strheq	r3, [r4, #12]
 8004f48:	bf18      	it	ne
 8004f4a:	81a3      	strhne	r3, [r4, #12]
 8004f4c:	bd10      	pop	{r4, pc}

08004f4e <__sclose>:
 8004f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f52:	f000 b80d 	b.w	8004f70 <_close_r>

08004f56 <memset>:
 8004f56:	4603      	mov	r3, r0
 8004f58:	4402      	add	r2, r0
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d100      	bne.n	8004f60 <memset+0xa>
 8004f5e:	4770      	bx	lr
 8004f60:	f803 1b01 	strb.w	r1, [r3], #1
 8004f64:	e7f9      	b.n	8004f5a <memset+0x4>
	...

08004f68 <_localeconv_r>:
 8004f68:	4800      	ldr	r0, [pc, #0]	; (8004f6c <_localeconv_r+0x4>)
 8004f6a:	4770      	bx	lr
 8004f6c:	20000158 	.word	0x20000158

08004f70 <_close_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	2300      	movs	r3, #0
 8004f74:	4d05      	ldr	r5, [pc, #20]	; (8004f8c <_close_r+0x1c>)
 8004f76:	4604      	mov	r4, r0
 8004f78:	4608      	mov	r0, r1
 8004f7a:	602b      	str	r3, [r5, #0]
 8004f7c:	f7fc ffca 	bl	8001f14 <_close>
 8004f80:	1c43      	adds	r3, r0, #1
 8004f82:	d102      	bne.n	8004f8a <_close_r+0x1a>
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	b103      	cbz	r3, 8004f8a <_close_r+0x1a>
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
 8004f8c:	20000878 	.word	0x20000878

08004f90 <_lseek_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	4604      	mov	r4, r0
 8004f94:	4608      	mov	r0, r1
 8004f96:	4611      	mov	r1, r2
 8004f98:	2200      	movs	r2, #0
 8004f9a:	4d05      	ldr	r5, [pc, #20]	; (8004fb0 <_lseek_r+0x20>)
 8004f9c:	602a      	str	r2, [r5, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f7fc ffdc 	bl	8001f5c <_lseek>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	d102      	bne.n	8004fae <_lseek_r+0x1e>
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	b103      	cbz	r3, 8004fae <_lseek_r+0x1e>
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	bd38      	pop	{r3, r4, r5, pc}
 8004fb0:	20000878 	.word	0x20000878

08004fb4 <_read_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	4608      	mov	r0, r1
 8004fba:	4611      	mov	r1, r2
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	4d05      	ldr	r5, [pc, #20]	; (8004fd4 <_read_r+0x20>)
 8004fc0:	602a      	str	r2, [r5, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f7fc ff6d 	bl	8001ea2 <_read>
 8004fc8:	1c43      	adds	r3, r0, #1
 8004fca:	d102      	bne.n	8004fd2 <_read_r+0x1e>
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	b103      	cbz	r3, 8004fd2 <_read_r+0x1e>
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	bd38      	pop	{r3, r4, r5, pc}
 8004fd4:	20000878 	.word	0x20000878

08004fd8 <_write_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	4604      	mov	r4, r0
 8004fdc:	4608      	mov	r0, r1
 8004fde:	4611      	mov	r1, r2
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	4d05      	ldr	r5, [pc, #20]	; (8004ff8 <_write_r+0x20>)
 8004fe4:	602a      	str	r2, [r5, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	f7fc ff78 	bl	8001edc <_write>
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	d102      	bne.n	8004ff6 <_write_r+0x1e>
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	b103      	cbz	r3, 8004ff6 <_write_r+0x1e>
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	bd38      	pop	{r3, r4, r5, pc}
 8004ff8:	20000878 	.word	0x20000878

08004ffc <__errno>:
 8004ffc:	4b01      	ldr	r3, [pc, #4]	; (8005004 <__errno+0x8>)
 8004ffe:	6818      	ldr	r0, [r3, #0]
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20000064 	.word	0x20000064

08005008 <__libc_init_array>:
 8005008:	b570      	push	{r4, r5, r6, lr}
 800500a:	2600      	movs	r6, #0
 800500c:	4d0c      	ldr	r5, [pc, #48]	; (8005040 <__libc_init_array+0x38>)
 800500e:	4c0d      	ldr	r4, [pc, #52]	; (8005044 <__libc_init_array+0x3c>)
 8005010:	1b64      	subs	r4, r4, r5
 8005012:	10a4      	asrs	r4, r4, #2
 8005014:	42a6      	cmp	r6, r4
 8005016:	d109      	bne.n	800502c <__libc_init_array+0x24>
 8005018:	f003 f940 	bl	800829c <_init>
 800501c:	2600      	movs	r6, #0
 800501e:	4d0a      	ldr	r5, [pc, #40]	; (8005048 <__libc_init_array+0x40>)
 8005020:	4c0a      	ldr	r4, [pc, #40]	; (800504c <__libc_init_array+0x44>)
 8005022:	1b64      	subs	r4, r4, r5
 8005024:	10a4      	asrs	r4, r4, #2
 8005026:	42a6      	cmp	r6, r4
 8005028:	d105      	bne.n	8005036 <__libc_init_array+0x2e>
 800502a:	bd70      	pop	{r4, r5, r6, pc}
 800502c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005030:	4798      	blx	r3
 8005032:	3601      	adds	r6, #1
 8005034:	e7ee      	b.n	8005014 <__libc_init_array+0xc>
 8005036:	f855 3b04 	ldr.w	r3, [r5], #4
 800503a:	4798      	blx	r3
 800503c:	3601      	adds	r6, #1
 800503e:	e7f2      	b.n	8005026 <__libc_init_array+0x1e>
 8005040:	080086e8 	.word	0x080086e8
 8005044:	080086e8 	.word	0x080086e8
 8005048:	080086e8 	.word	0x080086e8
 800504c:	080086ec 	.word	0x080086ec

08005050 <__retarget_lock_acquire_recursive>:
 8005050:	4770      	bx	lr

08005052 <__retarget_lock_release_recursive>:
 8005052:	4770      	bx	lr

08005054 <memchr>:
 8005054:	4603      	mov	r3, r0
 8005056:	b510      	push	{r4, lr}
 8005058:	b2c9      	uxtb	r1, r1
 800505a:	4402      	add	r2, r0
 800505c:	4293      	cmp	r3, r2
 800505e:	4618      	mov	r0, r3
 8005060:	d101      	bne.n	8005066 <memchr+0x12>
 8005062:	2000      	movs	r0, #0
 8005064:	e003      	b.n	800506e <memchr+0x1a>
 8005066:	7804      	ldrb	r4, [r0, #0]
 8005068:	3301      	adds	r3, #1
 800506a:	428c      	cmp	r4, r1
 800506c:	d1f6      	bne.n	800505c <memchr+0x8>
 800506e:	bd10      	pop	{r4, pc}

08005070 <quorem>:
 8005070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005074:	6903      	ldr	r3, [r0, #16]
 8005076:	690c      	ldr	r4, [r1, #16]
 8005078:	4607      	mov	r7, r0
 800507a:	42a3      	cmp	r3, r4
 800507c:	db7f      	blt.n	800517e <quorem+0x10e>
 800507e:	3c01      	subs	r4, #1
 8005080:	f100 0514 	add.w	r5, r0, #20
 8005084:	f101 0814 	add.w	r8, r1, #20
 8005088:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800508c:	9301      	str	r3, [sp, #4]
 800508e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005092:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005096:	3301      	adds	r3, #1
 8005098:	429a      	cmp	r2, r3
 800509a:	fbb2 f6f3 	udiv	r6, r2, r3
 800509e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80050a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80050a6:	d331      	bcc.n	800510c <quorem+0x9c>
 80050a8:	f04f 0e00 	mov.w	lr, #0
 80050ac:	4640      	mov	r0, r8
 80050ae:	46ac      	mov	ip, r5
 80050b0:	46f2      	mov	sl, lr
 80050b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80050b6:	b293      	uxth	r3, r2
 80050b8:	fb06 e303 	mla	r3, r6, r3, lr
 80050bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050c0:	0c1a      	lsrs	r2, r3, #16
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	fb06 220e 	mla	r2, r6, lr, r2
 80050c8:	ebaa 0303 	sub.w	r3, sl, r3
 80050cc:	f8dc a000 	ldr.w	sl, [ip]
 80050d0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050d4:	fa1f fa8a 	uxth.w	sl, sl
 80050d8:	4453      	add	r3, sl
 80050da:	f8dc a000 	ldr.w	sl, [ip]
 80050de:	b292      	uxth	r2, r2
 80050e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80050e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050ee:	4581      	cmp	r9, r0
 80050f0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050f4:	f84c 3b04 	str.w	r3, [ip], #4
 80050f8:	d2db      	bcs.n	80050b2 <quorem+0x42>
 80050fa:	f855 300b 	ldr.w	r3, [r5, fp]
 80050fe:	b92b      	cbnz	r3, 800510c <quorem+0x9c>
 8005100:	9b01      	ldr	r3, [sp, #4]
 8005102:	3b04      	subs	r3, #4
 8005104:	429d      	cmp	r5, r3
 8005106:	461a      	mov	r2, r3
 8005108:	d32d      	bcc.n	8005166 <quorem+0xf6>
 800510a:	613c      	str	r4, [r7, #16]
 800510c:	4638      	mov	r0, r7
 800510e:	f001 f995 	bl	800643c <__mcmp>
 8005112:	2800      	cmp	r0, #0
 8005114:	db23      	blt.n	800515e <quorem+0xee>
 8005116:	4629      	mov	r1, r5
 8005118:	2000      	movs	r0, #0
 800511a:	3601      	adds	r6, #1
 800511c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005120:	f8d1 c000 	ldr.w	ip, [r1]
 8005124:	b293      	uxth	r3, r2
 8005126:	1ac3      	subs	r3, r0, r3
 8005128:	0c12      	lsrs	r2, r2, #16
 800512a:	fa1f f08c 	uxth.w	r0, ip
 800512e:	4403      	add	r3, r0
 8005130:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005134:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005138:	b29b      	uxth	r3, r3
 800513a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800513e:	45c1      	cmp	r9, r8
 8005140:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005144:	f841 3b04 	str.w	r3, [r1], #4
 8005148:	d2e8      	bcs.n	800511c <quorem+0xac>
 800514a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800514e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005152:	b922      	cbnz	r2, 800515e <quorem+0xee>
 8005154:	3b04      	subs	r3, #4
 8005156:	429d      	cmp	r5, r3
 8005158:	461a      	mov	r2, r3
 800515a:	d30a      	bcc.n	8005172 <quorem+0x102>
 800515c:	613c      	str	r4, [r7, #16]
 800515e:	4630      	mov	r0, r6
 8005160:	b003      	add	sp, #12
 8005162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005166:	6812      	ldr	r2, [r2, #0]
 8005168:	3b04      	subs	r3, #4
 800516a:	2a00      	cmp	r2, #0
 800516c:	d1cd      	bne.n	800510a <quorem+0x9a>
 800516e:	3c01      	subs	r4, #1
 8005170:	e7c8      	b.n	8005104 <quorem+0x94>
 8005172:	6812      	ldr	r2, [r2, #0]
 8005174:	3b04      	subs	r3, #4
 8005176:	2a00      	cmp	r2, #0
 8005178:	d1f0      	bne.n	800515c <quorem+0xec>
 800517a:	3c01      	subs	r4, #1
 800517c:	e7eb      	b.n	8005156 <quorem+0xe6>
 800517e:	2000      	movs	r0, #0
 8005180:	e7ee      	b.n	8005160 <quorem+0xf0>
 8005182:	0000      	movs	r0, r0
 8005184:	0000      	movs	r0, r0
	...

08005188 <_dtoa_r>:
 8005188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518c:	4616      	mov	r6, r2
 800518e:	461f      	mov	r7, r3
 8005190:	69c4      	ldr	r4, [r0, #28]
 8005192:	b099      	sub	sp, #100	; 0x64
 8005194:	4605      	mov	r5, r0
 8005196:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800519a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800519e:	b974      	cbnz	r4, 80051be <_dtoa_r+0x36>
 80051a0:	2010      	movs	r0, #16
 80051a2:	f000 fe1d 	bl	8005de0 <malloc>
 80051a6:	4602      	mov	r2, r0
 80051a8:	61e8      	str	r0, [r5, #28]
 80051aa:	b920      	cbnz	r0, 80051b6 <_dtoa_r+0x2e>
 80051ac:	21ef      	movs	r1, #239	; 0xef
 80051ae:	4bac      	ldr	r3, [pc, #688]	; (8005460 <_dtoa_r+0x2d8>)
 80051b0:	48ac      	ldr	r0, [pc, #688]	; (8005464 <_dtoa_r+0x2dc>)
 80051b2:	f001 fc7b 	bl	8006aac <__assert_func>
 80051b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80051ba:	6004      	str	r4, [r0, #0]
 80051bc:	60c4      	str	r4, [r0, #12]
 80051be:	69eb      	ldr	r3, [r5, #28]
 80051c0:	6819      	ldr	r1, [r3, #0]
 80051c2:	b151      	cbz	r1, 80051da <_dtoa_r+0x52>
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	2301      	movs	r3, #1
 80051c8:	4093      	lsls	r3, r2
 80051ca:	604a      	str	r2, [r1, #4]
 80051cc:	608b      	str	r3, [r1, #8]
 80051ce:	4628      	mov	r0, r5
 80051d0:	f000 fefa 	bl	8005fc8 <_Bfree>
 80051d4:	2200      	movs	r2, #0
 80051d6:	69eb      	ldr	r3, [r5, #28]
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	1e3b      	subs	r3, r7, #0
 80051dc:	bfaf      	iteee	ge
 80051de:	2300      	movge	r3, #0
 80051e0:	2201      	movlt	r2, #1
 80051e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80051e6:	9305      	strlt	r3, [sp, #20]
 80051e8:	bfa8      	it	ge
 80051ea:	f8c8 3000 	strge.w	r3, [r8]
 80051ee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80051f2:	4b9d      	ldr	r3, [pc, #628]	; (8005468 <_dtoa_r+0x2e0>)
 80051f4:	bfb8      	it	lt
 80051f6:	f8c8 2000 	strlt.w	r2, [r8]
 80051fa:	ea33 0309 	bics.w	r3, r3, r9
 80051fe:	d119      	bne.n	8005234 <_dtoa_r+0xac>
 8005200:	f242 730f 	movw	r3, #9999	; 0x270f
 8005204:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800520c:	4333      	orrs	r3, r6
 800520e:	f000 8589 	beq.w	8005d24 <_dtoa_r+0xb9c>
 8005212:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005214:	b953      	cbnz	r3, 800522c <_dtoa_r+0xa4>
 8005216:	4b95      	ldr	r3, [pc, #596]	; (800546c <_dtoa_r+0x2e4>)
 8005218:	e023      	b.n	8005262 <_dtoa_r+0xda>
 800521a:	4b95      	ldr	r3, [pc, #596]	; (8005470 <_dtoa_r+0x2e8>)
 800521c:	9303      	str	r3, [sp, #12]
 800521e:	3308      	adds	r3, #8
 8005220:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	9803      	ldr	r0, [sp, #12]
 8005226:	b019      	add	sp, #100	; 0x64
 8005228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522c:	4b8f      	ldr	r3, [pc, #572]	; (800546c <_dtoa_r+0x2e4>)
 800522e:	9303      	str	r3, [sp, #12]
 8005230:	3303      	adds	r3, #3
 8005232:	e7f5      	b.n	8005220 <_dtoa_r+0x98>
 8005234:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005238:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800523c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005240:	2200      	movs	r2, #0
 8005242:	2300      	movs	r3, #0
 8005244:	f7fb fbb0 	bl	80009a8 <__aeabi_dcmpeq>
 8005248:	4680      	mov	r8, r0
 800524a:	b160      	cbz	r0, 8005266 <_dtoa_r+0xde>
 800524c:	2301      	movs	r3, #1
 800524e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 8562 	beq.w	8005d1e <_dtoa_r+0xb96>
 800525a:	4b86      	ldr	r3, [pc, #536]	; (8005474 <_dtoa_r+0x2ec>)
 800525c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	3b01      	subs	r3, #1
 8005262:	9303      	str	r3, [sp, #12]
 8005264:	e7de      	b.n	8005224 <_dtoa_r+0x9c>
 8005266:	ab16      	add	r3, sp, #88	; 0x58
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	ab17      	add	r3, sp, #92	; 0x5c
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	4628      	mov	r0, r5
 8005270:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005274:	f001 f98a 	bl	800658c <__d2b>
 8005278:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800527c:	4682      	mov	sl, r0
 800527e:	2c00      	cmp	r4, #0
 8005280:	d07e      	beq.n	8005380 <_dtoa_r+0x1f8>
 8005282:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005288:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800528c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005290:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005294:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005298:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800529c:	4619      	mov	r1, r3
 800529e:	2200      	movs	r2, #0
 80052a0:	4b75      	ldr	r3, [pc, #468]	; (8005478 <_dtoa_r+0x2f0>)
 80052a2:	f7fa ff61 	bl	8000168 <__aeabi_dsub>
 80052a6:	a368      	add	r3, pc, #416	; (adr r3, 8005448 <_dtoa_r+0x2c0>)
 80052a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ac:	f7fb f914 	bl	80004d8 <__aeabi_dmul>
 80052b0:	a367      	add	r3, pc, #412	; (adr r3, 8005450 <_dtoa_r+0x2c8>)
 80052b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b6:	f7fa ff59 	bl	800016c <__adddf3>
 80052ba:	4606      	mov	r6, r0
 80052bc:	4620      	mov	r0, r4
 80052be:	460f      	mov	r7, r1
 80052c0:	f7fb f8a0 	bl	8000404 <__aeabi_i2d>
 80052c4:	a364      	add	r3, pc, #400	; (adr r3, 8005458 <_dtoa_r+0x2d0>)
 80052c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ca:	f7fb f905 	bl	80004d8 <__aeabi_dmul>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	4630      	mov	r0, r6
 80052d4:	4639      	mov	r1, r7
 80052d6:	f7fa ff49 	bl	800016c <__adddf3>
 80052da:	4606      	mov	r6, r0
 80052dc:	460f      	mov	r7, r1
 80052de:	f7fb fbab 	bl	8000a38 <__aeabi_d2iz>
 80052e2:	2200      	movs	r2, #0
 80052e4:	4683      	mov	fp, r0
 80052e6:	2300      	movs	r3, #0
 80052e8:	4630      	mov	r0, r6
 80052ea:	4639      	mov	r1, r7
 80052ec:	f7fb fb66 	bl	80009bc <__aeabi_dcmplt>
 80052f0:	b148      	cbz	r0, 8005306 <_dtoa_r+0x17e>
 80052f2:	4658      	mov	r0, fp
 80052f4:	f7fb f886 	bl	8000404 <__aeabi_i2d>
 80052f8:	4632      	mov	r2, r6
 80052fa:	463b      	mov	r3, r7
 80052fc:	f7fb fb54 	bl	80009a8 <__aeabi_dcmpeq>
 8005300:	b908      	cbnz	r0, 8005306 <_dtoa_r+0x17e>
 8005302:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005306:	f1bb 0f16 	cmp.w	fp, #22
 800530a:	d857      	bhi.n	80053bc <_dtoa_r+0x234>
 800530c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005310:	4b5a      	ldr	r3, [pc, #360]	; (800547c <_dtoa_r+0x2f4>)
 8005312:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531a:	f7fb fb4f 	bl	80009bc <__aeabi_dcmplt>
 800531e:	2800      	cmp	r0, #0
 8005320:	d04e      	beq.n	80053c0 <_dtoa_r+0x238>
 8005322:	2300      	movs	r3, #0
 8005324:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005328:	930f      	str	r3, [sp, #60]	; 0x3c
 800532a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800532c:	1b1b      	subs	r3, r3, r4
 800532e:	1e5a      	subs	r2, r3, #1
 8005330:	bf46      	itte	mi
 8005332:	f1c3 0901 	rsbmi	r9, r3, #1
 8005336:	2300      	movmi	r3, #0
 8005338:	f04f 0900 	movpl.w	r9, #0
 800533c:	9209      	str	r2, [sp, #36]	; 0x24
 800533e:	bf48      	it	mi
 8005340:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005342:	f1bb 0f00 	cmp.w	fp, #0
 8005346:	db3d      	blt.n	80053c4 <_dtoa_r+0x23c>
 8005348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800534a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800534e:	445b      	add	r3, fp
 8005350:	9309      	str	r3, [sp, #36]	; 0x24
 8005352:	2300      	movs	r3, #0
 8005354:	930a      	str	r3, [sp, #40]	; 0x28
 8005356:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005358:	2b09      	cmp	r3, #9
 800535a:	d867      	bhi.n	800542c <_dtoa_r+0x2a4>
 800535c:	2b05      	cmp	r3, #5
 800535e:	bfc4      	itt	gt
 8005360:	3b04      	subgt	r3, #4
 8005362:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005364:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005366:	bfc8      	it	gt
 8005368:	2400      	movgt	r4, #0
 800536a:	f1a3 0302 	sub.w	r3, r3, #2
 800536e:	bfd8      	it	le
 8005370:	2401      	movle	r4, #1
 8005372:	2b03      	cmp	r3, #3
 8005374:	f200 8086 	bhi.w	8005484 <_dtoa_r+0x2fc>
 8005378:	e8df f003 	tbb	[pc, r3]
 800537c:	5637392c 	.word	0x5637392c
 8005380:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005384:	441c      	add	r4, r3
 8005386:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800538a:	2b20      	cmp	r3, #32
 800538c:	bfc1      	itttt	gt
 800538e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005392:	fa09 f903 	lslgt.w	r9, r9, r3
 8005396:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800539a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800539e:	bfd6      	itet	le
 80053a0:	f1c3 0320 	rsble	r3, r3, #32
 80053a4:	ea49 0003 	orrgt.w	r0, r9, r3
 80053a8:	fa06 f003 	lslle.w	r0, r6, r3
 80053ac:	f7fb f81a 	bl	80003e4 <__aeabi_ui2d>
 80053b0:	2201      	movs	r2, #1
 80053b2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80053b6:	3c01      	subs	r4, #1
 80053b8:	9213      	str	r2, [sp, #76]	; 0x4c
 80053ba:	e76f      	b.n	800529c <_dtoa_r+0x114>
 80053bc:	2301      	movs	r3, #1
 80053be:	e7b3      	b.n	8005328 <_dtoa_r+0x1a0>
 80053c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80053c2:	e7b2      	b.n	800532a <_dtoa_r+0x1a2>
 80053c4:	f1cb 0300 	rsb	r3, fp, #0
 80053c8:	930a      	str	r3, [sp, #40]	; 0x28
 80053ca:	2300      	movs	r3, #0
 80053cc:	eba9 090b 	sub.w	r9, r9, fp
 80053d0:	930e      	str	r3, [sp, #56]	; 0x38
 80053d2:	e7c0      	b.n	8005356 <_dtoa_r+0x1ce>
 80053d4:	2300      	movs	r3, #0
 80053d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80053d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	dc55      	bgt.n	800548a <_dtoa_r+0x302>
 80053de:	2301      	movs	r3, #1
 80053e0:	461a      	mov	r2, r3
 80053e2:	9306      	str	r3, [sp, #24]
 80053e4:	9308      	str	r3, [sp, #32]
 80053e6:	9223      	str	r2, [sp, #140]	; 0x8c
 80053e8:	e00b      	b.n	8005402 <_dtoa_r+0x27a>
 80053ea:	2301      	movs	r3, #1
 80053ec:	e7f3      	b.n	80053d6 <_dtoa_r+0x24e>
 80053ee:	2300      	movs	r3, #0
 80053f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80053f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053f4:	445b      	add	r3, fp
 80053f6:	9306      	str	r3, [sp, #24]
 80053f8:	3301      	adds	r3, #1
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	9308      	str	r3, [sp, #32]
 80053fe:	bfb8      	it	lt
 8005400:	2301      	movlt	r3, #1
 8005402:	2100      	movs	r1, #0
 8005404:	2204      	movs	r2, #4
 8005406:	69e8      	ldr	r0, [r5, #28]
 8005408:	f102 0614 	add.w	r6, r2, #20
 800540c:	429e      	cmp	r6, r3
 800540e:	d940      	bls.n	8005492 <_dtoa_r+0x30a>
 8005410:	6041      	str	r1, [r0, #4]
 8005412:	4628      	mov	r0, r5
 8005414:	f000 fd98 	bl	8005f48 <_Balloc>
 8005418:	9003      	str	r0, [sp, #12]
 800541a:	2800      	cmp	r0, #0
 800541c:	d13c      	bne.n	8005498 <_dtoa_r+0x310>
 800541e:	4602      	mov	r2, r0
 8005420:	f240 11af 	movw	r1, #431	; 0x1af
 8005424:	4b16      	ldr	r3, [pc, #88]	; (8005480 <_dtoa_r+0x2f8>)
 8005426:	e6c3      	b.n	80051b0 <_dtoa_r+0x28>
 8005428:	2301      	movs	r3, #1
 800542a:	e7e1      	b.n	80053f0 <_dtoa_r+0x268>
 800542c:	2401      	movs	r4, #1
 800542e:	2300      	movs	r3, #0
 8005430:	940b      	str	r4, [sp, #44]	; 0x2c
 8005432:	9322      	str	r3, [sp, #136]	; 0x88
 8005434:	f04f 33ff 	mov.w	r3, #4294967295
 8005438:	2200      	movs	r2, #0
 800543a:	9306      	str	r3, [sp, #24]
 800543c:	9308      	str	r3, [sp, #32]
 800543e:	2312      	movs	r3, #18
 8005440:	e7d1      	b.n	80053e6 <_dtoa_r+0x25e>
 8005442:	bf00      	nop
 8005444:	f3af 8000 	nop.w
 8005448:	636f4361 	.word	0x636f4361
 800544c:	3fd287a7 	.word	0x3fd287a7
 8005450:	8b60c8b3 	.word	0x8b60c8b3
 8005454:	3fc68a28 	.word	0x3fc68a28
 8005458:	509f79fb 	.word	0x509f79fb
 800545c:	3fd34413 	.word	0x3fd34413
 8005460:	08008343 	.word	0x08008343
 8005464:	0800835a 	.word	0x0800835a
 8005468:	7ff00000 	.word	0x7ff00000
 800546c:	0800833f 	.word	0x0800833f
 8005470:	08008336 	.word	0x08008336
 8005474:	08008313 	.word	0x08008313
 8005478:	3ff80000 	.word	0x3ff80000
 800547c:	08008448 	.word	0x08008448
 8005480:	080083b2 	.word	0x080083b2
 8005484:	2301      	movs	r3, #1
 8005486:	930b      	str	r3, [sp, #44]	; 0x2c
 8005488:	e7d4      	b.n	8005434 <_dtoa_r+0x2ac>
 800548a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800548c:	9306      	str	r3, [sp, #24]
 800548e:	9308      	str	r3, [sp, #32]
 8005490:	e7b7      	b.n	8005402 <_dtoa_r+0x27a>
 8005492:	3101      	adds	r1, #1
 8005494:	0052      	lsls	r2, r2, #1
 8005496:	e7b7      	b.n	8005408 <_dtoa_r+0x280>
 8005498:	69eb      	ldr	r3, [r5, #28]
 800549a:	9a03      	ldr	r2, [sp, #12]
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	9b08      	ldr	r3, [sp, #32]
 80054a0:	2b0e      	cmp	r3, #14
 80054a2:	f200 80a8 	bhi.w	80055f6 <_dtoa_r+0x46e>
 80054a6:	2c00      	cmp	r4, #0
 80054a8:	f000 80a5 	beq.w	80055f6 <_dtoa_r+0x46e>
 80054ac:	f1bb 0f00 	cmp.w	fp, #0
 80054b0:	dd34      	ble.n	800551c <_dtoa_r+0x394>
 80054b2:	4b9a      	ldr	r3, [pc, #616]	; (800571c <_dtoa_r+0x594>)
 80054b4:	f00b 020f 	and.w	r2, fp, #15
 80054b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80054c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054c4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80054c8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80054cc:	d016      	beq.n	80054fc <_dtoa_r+0x374>
 80054ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054d2:	4b93      	ldr	r3, [pc, #588]	; (8005720 <_dtoa_r+0x598>)
 80054d4:	2703      	movs	r7, #3
 80054d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054da:	f7fb f927 	bl	800072c <__aeabi_ddiv>
 80054de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054e2:	f004 040f 	and.w	r4, r4, #15
 80054e6:	4e8e      	ldr	r6, [pc, #568]	; (8005720 <_dtoa_r+0x598>)
 80054e8:	b954      	cbnz	r4, 8005500 <_dtoa_r+0x378>
 80054ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054f2:	f7fb f91b 	bl	800072c <__aeabi_ddiv>
 80054f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054fa:	e029      	b.n	8005550 <_dtoa_r+0x3c8>
 80054fc:	2702      	movs	r7, #2
 80054fe:	e7f2      	b.n	80054e6 <_dtoa_r+0x35e>
 8005500:	07e1      	lsls	r1, r4, #31
 8005502:	d508      	bpl.n	8005516 <_dtoa_r+0x38e>
 8005504:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005508:	e9d6 2300 	ldrd	r2, r3, [r6]
 800550c:	f7fa ffe4 	bl	80004d8 <__aeabi_dmul>
 8005510:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005514:	3701      	adds	r7, #1
 8005516:	1064      	asrs	r4, r4, #1
 8005518:	3608      	adds	r6, #8
 800551a:	e7e5      	b.n	80054e8 <_dtoa_r+0x360>
 800551c:	f000 80a5 	beq.w	800566a <_dtoa_r+0x4e2>
 8005520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005524:	f1cb 0400 	rsb	r4, fp, #0
 8005528:	4b7c      	ldr	r3, [pc, #496]	; (800571c <_dtoa_r+0x594>)
 800552a:	f004 020f 	and.w	r2, r4, #15
 800552e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	f7fa ffcf 	bl	80004d8 <__aeabi_dmul>
 800553a:	2702      	movs	r7, #2
 800553c:	2300      	movs	r3, #0
 800553e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005542:	4e77      	ldr	r6, [pc, #476]	; (8005720 <_dtoa_r+0x598>)
 8005544:	1124      	asrs	r4, r4, #4
 8005546:	2c00      	cmp	r4, #0
 8005548:	f040 8084 	bne.w	8005654 <_dtoa_r+0x4cc>
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1d2      	bne.n	80054f6 <_dtoa_r+0x36e>
 8005550:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005554:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005558:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 8087 	beq.w	800566e <_dtoa_r+0x4e6>
 8005560:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005564:	2200      	movs	r2, #0
 8005566:	4b6f      	ldr	r3, [pc, #444]	; (8005724 <_dtoa_r+0x59c>)
 8005568:	f7fb fa28 	bl	80009bc <__aeabi_dcmplt>
 800556c:	2800      	cmp	r0, #0
 800556e:	d07e      	beq.n	800566e <_dtoa_r+0x4e6>
 8005570:	9b08      	ldr	r3, [sp, #32]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d07b      	beq.n	800566e <_dtoa_r+0x4e6>
 8005576:	9b06      	ldr	r3, [sp, #24]
 8005578:	2b00      	cmp	r3, #0
 800557a:	dd38      	ble.n	80055ee <_dtoa_r+0x466>
 800557c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005580:	2200      	movs	r2, #0
 8005582:	4b69      	ldr	r3, [pc, #420]	; (8005728 <_dtoa_r+0x5a0>)
 8005584:	f7fa ffa8 	bl	80004d8 <__aeabi_dmul>
 8005588:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800558c:	9c06      	ldr	r4, [sp, #24]
 800558e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005592:	3701      	adds	r7, #1
 8005594:	4638      	mov	r0, r7
 8005596:	f7fa ff35 	bl	8000404 <__aeabi_i2d>
 800559a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800559e:	f7fa ff9b 	bl	80004d8 <__aeabi_dmul>
 80055a2:	2200      	movs	r2, #0
 80055a4:	4b61      	ldr	r3, [pc, #388]	; (800572c <_dtoa_r+0x5a4>)
 80055a6:	f7fa fde1 	bl	800016c <__adddf3>
 80055aa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80055ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055b2:	9611      	str	r6, [sp, #68]	; 0x44
 80055b4:	2c00      	cmp	r4, #0
 80055b6:	d15d      	bne.n	8005674 <_dtoa_r+0x4ec>
 80055b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055bc:	2200      	movs	r2, #0
 80055be:	4b5c      	ldr	r3, [pc, #368]	; (8005730 <_dtoa_r+0x5a8>)
 80055c0:	f7fa fdd2 	bl	8000168 <__aeabi_dsub>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055cc:	4633      	mov	r3, r6
 80055ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80055d0:	f7fb fa12 	bl	80009f8 <__aeabi_dcmpgt>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	f040 8295 	bne.w	8005b04 <_dtoa_r+0x97c>
 80055da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80055e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80055e4:	f7fb f9ea 	bl	80009bc <__aeabi_dcmplt>
 80055e8:	2800      	cmp	r0, #0
 80055ea:	f040 8289 	bne.w	8005b00 <_dtoa_r+0x978>
 80055ee:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80055f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80055f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f2c0 8151 	blt.w	80058a0 <_dtoa_r+0x718>
 80055fe:	f1bb 0f0e 	cmp.w	fp, #14
 8005602:	f300 814d 	bgt.w	80058a0 <_dtoa_r+0x718>
 8005606:	4b45      	ldr	r3, [pc, #276]	; (800571c <_dtoa_r+0x594>)
 8005608:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800560c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005610:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005614:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005616:	2b00      	cmp	r3, #0
 8005618:	f280 80da 	bge.w	80057d0 <_dtoa_r+0x648>
 800561c:	9b08      	ldr	r3, [sp, #32]
 800561e:	2b00      	cmp	r3, #0
 8005620:	f300 80d6 	bgt.w	80057d0 <_dtoa_r+0x648>
 8005624:	f040 826b 	bne.w	8005afe <_dtoa_r+0x976>
 8005628:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800562c:	2200      	movs	r2, #0
 800562e:	4b40      	ldr	r3, [pc, #256]	; (8005730 <_dtoa_r+0x5a8>)
 8005630:	f7fa ff52 	bl	80004d8 <__aeabi_dmul>
 8005634:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005638:	f7fb f9d4 	bl	80009e4 <__aeabi_dcmpge>
 800563c:	9c08      	ldr	r4, [sp, #32]
 800563e:	4626      	mov	r6, r4
 8005640:	2800      	cmp	r0, #0
 8005642:	f040 8241 	bne.w	8005ac8 <_dtoa_r+0x940>
 8005646:	2331      	movs	r3, #49	; 0x31
 8005648:	9f03      	ldr	r7, [sp, #12]
 800564a:	f10b 0b01 	add.w	fp, fp, #1
 800564e:	f807 3b01 	strb.w	r3, [r7], #1
 8005652:	e23d      	b.n	8005ad0 <_dtoa_r+0x948>
 8005654:	07e2      	lsls	r2, r4, #31
 8005656:	d505      	bpl.n	8005664 <_dtoa_r+0x4dc>
 8005658:	e9d6 2300 	ldrd	r2, r3, [r6]
 800565c:	f7fa ff3c 	bl	80004d8 <__aeabi_dmul>
 8005660:	2301      	movs	r3, #1
 8005662:	3701      	adds	r7, #1
 8005664:	1064      	asrs	r4, r4, #1
 8005666:	3608      	adds	r6, #8
 8005668:	e76d      	b.n	8005546 <_dtoa_r+0x3be>
 800566a:	2702      	movs	r7, #2
 800566c:	e770      	b.n	8005550 <_dtoa_r+0x3c8>
 800566e:	46d8      	mov	r8, fp
 8005670:	9c08      	ldr	r4, [sp, #32]
 8005672:	e78f      	b.n	8005594 <_dtoa_r+0x40c>
 8005674:	9903      	ldr	r1, [sp, #12]
 8005676:	4b29      	ldr	r3, [pc, #164]	; (800571c <_dtoa_r+0x594>)
 8005678:	4421      	add	r1, r4
 800567a:	9112      	str	r1, [sp, #72]	; 0x48
 800567c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800567e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005682:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005686:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800568a:	2900      	cmp	r1, #0
 800568c:	d054      	beq.n	8005738 <_dtoa_r+0x5b0>
 800568e:	2000      	movs	r0, #0
 8005690:	4928      	ldr	r1, [pc, #160]	; (8005734 <_dtoa_r+0x5ac>)
 8005692:	f7fb f84b 	bl	800072c <__aeabi_ddiv>
 8005696:	463b      	mov	r3, r7
 8005698:	4632      	mov	r2, r6
 800569a:	f7fa fd65 	bl	8000168 <__aeabi_dsub>
 800569e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056a2:	9f03      	ldr	r7, [sp, #12]
 80056a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056a8:	f7fb f9c6 	bl	8000a38 <__aeabi_d2iz>
 80056ac:	4604      	mov	r4, r0
 80056ae:	f7fa fea9 	bl	8000404 <__aeabi_i2d>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056ba:	f7fa fd55 	bl	8000168 <__aeabi_dsub>
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	3430      	adds	r4, #48	; 0x30
 80056c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80056c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056cc:	f807 4b01 	strb.w	r4, [r7], #1
 80056d0:	f7fb f974 	bl	80009bc <__aeabi_dcmplt>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	d173      	bne.n	80057c0 <_dtoa_r+0x638>
 80056d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056dc:	2000      	movs	r0, #0
 80056de:	4911      	ldr	r1, [pc, #68]	; (8005724 <_dtoa_r+0x59c>)
 80056e0:	f7fa fd42 	bl	8000168 <__aeabi_dsub>
 80056e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056e8:	f7fb f968 	bl	80009bc <__aeabi_dcmplt>
 80056ec:	2800      	cmp	r0, #0
 80056ee:	f040 80b6 	bne.w	800585e <_dtoa_r+0x6d6>
 80056f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056f4:	429f      	cmp	r7, r3
 80056f6:	f43f af7a 	beq.w	80055ee <_dtoa_r+0x466>
 80056fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056fe:	2200      	movs	r2, #0
 8005700:	4b09      	ldr	r3, [pc, #36]	; (8005728 <_dtoa_r+0x5a0>)
 8005702:	f7fa fee9 	bl	80004d8 <__aeabi_dmul>
 8005706:	2200      	movs	r2, #0
 8005708:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800570c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <_dtoa_r+0x5a0>)
 8005712:	f7fa fee1 	bl	80004d8 <__aeabi_dmul>
 8005716:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800571a:	e7c3      	b.n	80056a4 <_dtoa_r+0x51c>
 800571c:	08008448 	.word	0x08008448
 8005720:	08008420 	.word	0x08008420
 8005724:	3ff00000 	.word	0x3ff00000
 8005728:	40240000 	.word	0x40240000
 800572c:	401c0000 	.word	0x401c0000
 8005730:	40140000 	.word	0x40140000
 8005734:	3fe00000 	.word	0x3fe00000
 8005738:	4630      	mov	r0, r6
 800573a:	4639      	mov	r1, r7
 800573c:	f7fa fecc 	bl	80004d8 <__aeabi_dmul>
 8005740:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005742:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005746:	9c03      	ldr	r4, [sp, #12]
 8005748:	9314      	str	r3, [sp, #80]	; 0x50
 800574a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800574e:	f7fb f973 	bl	8000a38 <__aeabi_d2iz>
 8005752:	9015      	str	r0, [sp, #84]	; 0x54
 8005754:	f7fa fe56 	bl	8000404 <__aeabi_i2d>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005760:	f7fa fd02 	bl	8000168 <__aeabi_dsub>
 8005764:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005766:	4606      	mov	r6, r0
 8005768:	3330      	adds	r3, #48	; 0x30
 800576a:	f804 3b01 	strb.w	r3, [r4], #1
 800576e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005770:	460f      	mov	r7, r1
 8005772:	429c      	cmp	r4, r3
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	d124      	bne.n	80057c4 <_dtoa_r+0x63c>
 800577a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800577e:	4baf      	ldr	r3, [pc, #700]	; (8005a3c <_dtoa_r+0x8b4>)
 8005780:	f7fa fcf4 	bl	800016c <__adddf3>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	4630      	mov	r0, r6
 800578a:	4639      	mov	r1, r7
 800578c:	f7fb f934 	bl	80009f8 <__aeabi_dcmpgt>
 8005790:	2800      	cmp	r0, #0
 8005792:	d163      	bne.n	800585c <_dtoa_r+0x6d4>
 8005794:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005798:	2000      	movs	r0, #0
 800579a:	49a8      	ldr	r1, [pc, #672]	; (8005a3c <_dtoa_r+0x8b4>)
 800579c:	f7fa fce4 	bl	8000168 <__aeabi_dsub>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4630      	mov	r0, r6
 80057a6:	4639      	mov	r1, r7
 80057a8:	f7fb f908 	bl	80009bc <__aeabi_dcmplt>
 80057ac:	2800      	cmp	r0, #0
 80057ae:	f43f af1e 	beq.w	80055ee <_dtoa_r+0x466>
 80057b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80057b4:	1e7b      	subs	r3, r7, #1
 80057b6:	9314      	str	r3, [sp, #80]	; 0x50
 80057b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80057bc:	2b30      	cmp	r3, #48	; 0x30
 80057be:	d0f8      	beq.n	80057b2 <_dtoa_r+0x62a>
 80057c0:	46c3      	mov	fp, r8
 80057c2:	e03b      	b.n	800583c <_dtoa_r+0x6b4>
 80057c4:	4b9e      	ldr	r3, [pc, #632]	; (8005a40 <_dtoa_r+0x8b8>)
 80057c6:	f7fa fe87 	bl	80004d8 <__aeabi_dmul>
 80057ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057ce:	e7bc      	b.n	800574a <_dtoa_r+0x5c2>
 80057d0:	9f03      	ldr	r7, [sp, #12]
 80057d2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80057d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057da:	4640      	mov	r0, r8
 80057dc:	4649      	mov	r1, r9
 80057de:	f7fa ffa5 	bl	800072c <__aeabi_ddiv>
 80057e2:	f7fb f929 	bl	8000a38 <__aeabi_d2iz>
 80057e6:	4604      	mov	r4, r0
 80057e8:	f7fa fe0c 	bl	8000404 <__aeabi_i2d>
 80057ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057f0:	f7fa fe72 	bl	80004d8 <__aeabi_dmul>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	4640      	mov	r0, r8
 80057fa:	4649      	mov	r1, r9
 80057fc:	f7fa fcb4 	bl	8000168 <__aeabi_dsub>
 8005800:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005804:	f807 6b01 	strb.w	r6, [r7], #1
 8005808:	9e03      	ldr	r6, [sp, #12]
 800580a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800580e:	1bbe      	subs	r6, r7, r6
 8005810:	45b4      	cmp	ip, r6
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	d136      	bne.n	8005886 <_dtoa_r+0x6fe>
 8005818:	f7fa fca8 	bl	800016c <__adddf3>
 800581c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005820:	4680      	mov	r8, r0
 8005822:	4689      	mov	r9, r1
 8005824:	f7fb f8e8 	bl	80009f8 <__aeabi_dcmpgt>
 8005828:	bb58      	cbnz	r0, 8005882 <_dtoa_r+0x6fa>
 800582a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800582e:	4640      	mov	r0, r8
 8005830:	4649      	mov	r1, r9
 8005832:	f7fb f8b9 	bl	80009a8 <__aeabi_dcmpeq>
 8005836:	b108      	cbz	r0, 800583c <_dtoa_r+0x6b4>
 8005838:	07e3      	lsls	r3, r4, #31
 800583a:	d422      	bmi.n	8005882 <_dtoa_r+0x6fa>
 800583c:	4651      	mov	r1, sl
 800583e:	4628      	mov	r0, r5
 8005840:	f000 fbc2 	bl	8005fc8 <_Bfree>
 8005844:	2300      	movs	r3, #0
 8005846:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005848:	703b      	strb	r3, [r7, #0]
 800584a:	f10b 0301 	add.w	r3, fp, #1
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005852:	2b00      	cmp	r3, #0
 8005854:	f43f ace6 	beq.w	8005224 <_dtoa_r+0x9c>
 8005858:	601f      	str	r7, [r3, #0]
 800585a:	e4e3      	b.n	8005224 <_dtoa_r+0x9c>
 800585c:	4627      	mov	r7, r4
 800585e:	463b      	mov	r3, r7
 8005860:	461f      	mov	r7, r3
 8005862:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005866:	2a39      	cmp	r2, #57	; 0x39
 8005868:	d107      	bne.n	800587a <_dtoa_r+0x6f2>
 800586a:	9a03      	ldr	r2, [sp, #12]
 800586c:	429a      	cmp	r2, r3
 800586e:	d1f7      	bne.n	8005860 <_dtoa_r+0x6d8>
 8005870:	2230      	movs	r2, #48	; 0x30
 8005872:	9903      	ldr	r1, [sp, #12]
 8005874:	f108 0801 	add.w	r8, r8, #1
 8005878:	700a      	strb	r2, [r1, #0]
 800587a:	781a      	ldrb	r2, [r3, #0]
 800587c:	3201      	adds	r2, #1
 800587e:	701a      	strb	r2, [r3, #0]
 8005880:	e79e      	b.n	80057c0 <_dtoa_r+0x638>
 8005882:	46d8      	mov	r8, fp
 8005884:	e7eb      	b.n	800585e <_dtoa_r+0x6d6>
 8005886:	2200      	movs	r2, #0
 8005888:	4b6d      	ldr	r3, [pc, #436]	; (8005a40 <_dtoa_r+0x8b8>)
 800588a:	f7fa fe25 	bl	80004d8 <__aeabi_dmul>
 800588e:	2200      	movs	r2, #0
 8005890:	2300      	movs	r3, #0
 8005892:	4680      	mov	r8, r0
 8005894:	4689      	mov	r9, r1
 8005896:	f7fb f887 	bl	80009a8 <__aeabi_dcmpeq>
 800589a:	2800      	cmp	r0, #0
 800589c:	d09b      	beq.n	80057d6 <_dtoa_r+0x64e>
 800589e:	e7cd      	b.n	800583c <_dtoa_r+0x6b4>
 80058a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058a2:	2a00      	cmp	r2, #0
 80058a4:	f000 80c4 	beq.w	8005a30 <_dtoa_r+0x8a8>
 80058a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80058aa:	2a01      	cmp	r2, #1
 80058ac:	f300 80a8 	bgt.w	8005a00 <_dtoa_r+0x878>
 80058b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80058b2:	2a00      	cmp	r2, #0
 80058b4:	f000 80a0 	beq.w	80059f8 <_dtoa_r+0x870>
 80058b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80058bc:	464f      	mov	r7, r9
 80058be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80058c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058c2:	2101      	movs	r1, #1
 80058c4:	441a      	add	r2, r3
 80058c6:	4628      	mov	r0, r5
 80058c8:	4499      	add	r9, r3
 80058ca:	9209      	str	r2, [sp, #36]	; 0x24
 80058cc:	f000 fc32 	bl	8006134 <__i2b>
 80058d0:	4606      	mov	r6, r0
 80058d2:	b15f      	cbz	r7, 80058ec <_dtoa_r+0x764>
 80058d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	dd08      	ble.n	80058ec <_dtoa_r+0x764>
 80058da:	42bb      	cmp	r3, r7
 80058dc:	bfa8      	it	ge
 80058de:	463b      	movge	r3, r7
 80058e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058e2:	eba9 0903 	sub.w	r9, r9, r3
 80058e6:	1aff      	subs	r7, r7, r3
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	9309      	str	r3, [sp, #36]	; 0x24
 80058ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ee:	b1f3      	cbz	r3, 800592e <_dtoa_r+0x7a6>
 80058f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 80a0 	beq.w	8005a38 <_dtoa_r+0x8b0>
 80058f8:	2c00      	cmp	r4, #0
 80058fa:	dd10      	ble.n	800591e <_dtoa_r+0x796>
 80058fc:	4631      	mov	r1, r6
 80058fe:	4622      	mov	r2, r4
 8005900:	4628      	mov	r0, r5
 8005902:	f000 fcd5 	bl	80062b0 <__pow5mult>
 8005906:	4652      	mov	r2, sl
 8005908:	4601      	mov	r1, r0
 800590a:	4606      	mov	r6, r0
 800590c:	4628      	mov	r0, r5
 800590e:	f000 fc27 	bl	8006160 <__multiply>
 8005912:	4680      	mov	r8, r0
 8005914:	4651      	mov	r1, sl
 8005916:	4628      	mov	r0, r5
 8005918:	f000 fb56 	bl	8005fc8 <_Bfree>
 800591c:	46c2      	mov	sl, r8
 800591e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005920:	1b1a      	subs	r2, r3, r4
 8005922:	d004      	beq.n	800592e <_dtoa_r+0x7a6>
 8005924:	4651      	mov	r1, sl
 8005926:	4628      	mov	r0, r5
 8005928:	f000 fcc2 	bl	80062b0 <__pow5mult>
 800592c:	4682      	mov	sl, r0
 800592e:	2101      	movs	r1, #1
 8005930:	4628      	mov	r0, r5
 8005932:	f000 fbff 	bl	8006134 <__i2b>
 8005936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005938:	4604      	mov	r4, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	f340 8082 	ble.w	8005a44 <_dtoa_r+0x8bc>
 8005940:	461a      	mov	r2, r3
 8005942:	4601      	mov	r1, r0
 8005944:	4628      	mov	r0, r5
 8005946:	f000 fcb3 	bl	80062b0 <__pow5mult>
 800594a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800594c:	4604      	mov	r4, r0
 800594e:	2b01      	cmp	r3, #1
 8005950:	dd7b      	ble.n	8005a4a <_dtoa_r+0x8c2>
 8005952:	f04f 0800 	mov.w	r8, #0
 8005956:	6923      	ldr	r3, [r4, #16]
 8005958:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800595c:	6918      	ldr	r0, [r3, #16]
 800595e:	f000 fb9b 	bl	8006098 <__hi0bits>
 8005962:	f1c0 0020 	rsb	r0, r0, #32
 8005966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005968:	4418      	add	r0, r3
 800596a:	f010 001f 	ands.w	r0, r0, #31
 800596e:	f000 8092 	beq.w	8005a96 <_dtoa_r+0x90e>
 8005972:	f1c0 0320 	rsb	r3, r0, #32
 8005976:	2b04      	cmp	r3, #4
 8005978:	f340 8085 	ble.w	8005a86 <_dtoa_r+0x8fe>
 800597c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800597e:	f1c0 001c 	rsb	r0, r0, #28
 8005982:	4403      	add	r3, r0
 8005984:	4481      	add	r9, r0
 8005986:	4407      	add	r7, r0
 8005988:	9309      	str	r3, [sp, #36]	; 0x24
 800598a:	f1b9 0f00 	cmp.w	r9, #0
 800598e:	dd05      	ble.n	800599c <_dtoa_r+0x814>
 8005990:	4651      	mov	r1, sl
 8005992:	464a      	mov	r2, r9
 8005994:	4628      	mov	r0, r5
 8005996:	f000 fce5 	bl	8006364 <__lshift>
 800599a:	4682      	mov	sl, r0
 800599c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800599e:	2b00      	cmp	r3, #0
 80059a0:	dd05      	ble.n	80059ae <_dtoa_r+0x826>
 80059a2:	4621      	mov	r1, r4
 80059a4:	461a      	mov	r2, r3
 80059a6:	4628      	mov	r0, r5
 80059a8:	f000 fcdc 	bl	8006364 <__lshift>
 80059ac:	4604      	mov	r4, r0
 80059ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d072      	beq.n	8005a9a <_dtoa_r+0x912>
 80059b4:	4621      	mov	r1, r4
 80059b6:	4650      	mov	r0, sl
 80059b8:	f000 fd40 	bl	800643c <__mcmp>
 80059bc:	2800      	cmp	r0, #0
 80059be:	da6c      	bge.n	8005a9a <_dtoa_r+0x912>
 80059c0:	2300      	movs	r3, #0
 80059c2:	4651      	mov	r1, sl
 80059c4:	220a      	movs	r2, #10
 80059c6:	4628      	mov	r0, r5
 80059c8:	f000 fb20 	bl	800600c <__multadd>
 80059cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059ce:	4682      	mov	sl, r0
 80059d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 81ac 	beq.w	8005d32 <_dtoa_r+0xbaa>
 80059da:	2300      	movs	r3, #0
 80059dc:	4631      	mov	r1, r6
 80059de:	220a      	movs	r2, #10
 80059e0:	4628      	mov	r0, r5
 80059e2:	f000 fb13 	bl	800600c <__multadd>
 80059e6:	9b06      	ldr	r3, [sp, #24]
 80059e8:	4606      	mov	r6, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f300 8093 	bgt.w	8005b16 <_dtoa_r+0x98e>
 80059f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	dc59      	bgt.n	8005aaa <_dtoa_r+0x922>
 80059f6:	e08e      	b.n	8005b16 <_dtoa_r+0x98e>
 80059f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80059fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059fe:	e75d      	b.n	80058bc <_dtoa_r+0x734>
 8005a00:	9b08      	ldr	r3, [sp, #32]
 8005a02:	1e5c      	subs	r4, r3, #1
 8005a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a06:	42a3      	cmp	r3, r4
 8005a08:	bfbf      	itttt	lt
 8005a0a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005a0c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005a0e:	1ae3      	sublt	r3, r4, r3
 8005a10:	18d2      	addlt	r2, r2, r3
 8005a12:	bfa8      	it	ge
 8005a14:	1b1c      	subge	r4, r3, r4
 8005a16:	9b08      	ldr	r3, [sp, #32]
 8005a18:	bfbe      	ittt	lt
 8005a1a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005a1c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005a1e:	2400      	movlt	r4, #0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	bfb5      	itete	lt
 8005a24:	eba9 0703 	sublt.w	r7, r9, r3
 8005a28:	464f      	movge	r7, r9
 8005a2a:	2300      	movlt	r3, #0
 8005a2c:	9b08      	ldrge	r3, [sp, #32]
 8005a2e:	e747      	b.n	80058c0 <_dtoa_r+0x738>
 8005a30:	464f      	mov	r7, r9
 8005a32:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a34:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005a36:	e74c      	b.n	80058d2 <_dtoa_r+0x74a>
 8005a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a3a:	e773      	b.n	8005924 <_dtoa_r+0x79c>
 8005a3c:	3fe00000 	.word	0x3fe00000
 8005a40:	40240000 	.word	0x40240000
 8005a44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	dc18      	bgt.n	8005a7c <_dtoa_r+0x8f4>
 8005a4a:	9b04      	ldr	r3, [sp, #16]
 8005a4c:	b9b3      	cbnz	r3, 8005a7c <_dtoa_r+0x8f4>
 8005a4e:	9b05      	ldr	r3, [sp, #20]
 8005a50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a54:	b993      	cbnz	r3, 8005a7c <_dtoa_r+0x8f4>
 8005a56:	9b05      	ldr	r3, [sp, #20]
 8005a58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a5c:	0d1b      	lsrs	r3, r3, #20
 8005a5e:	051b      	lsls	r3, r3, #20
 8005a60:	b17b      	cbz	r3, 8005a82 <_dtoa_r+0x8fa>
 8005a62:	f04f 0801 	mov.w	r8, #1
 8005a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a68:	f109 0901 	add.w	r9, r9, #1
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f47f af6f 	bne.w	8005956 <_dtoa_r+0x7ce>
 8005a78:	2001      	movs	r0, #1
 8005a7a:	e774      	b.n	8005966 <_dtoa_r+0x7de>
 8005a7c:	f04f 0800 	mov.w	r8, #0
 8005a80:	e7f6      	b.n	8005a70 <_dtoa_r+0x8e8>
 8005a82:	4698      	mov	r8, r3
 8005a84:	e7f4      	b.n	8005a70 <_dtoa_r+0x8e8>
 8005a86:	d080      	beq.n	800598a <_dtoa_r+0x802>
 8005a88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a8a:	331c      	adds	r3, #28
 8005a8c:	441a      	add	r2, r3
 8005a8e:	4499      	add	r9, r3
 8005a90:	441f      	add	r7, r3
 8005a92:	9209      	str	r2, [sp, #36]	; 0x24
 8005a94:	e779      	b.n	800598a <_dtoa_r+0x802>
 8005a96:	4603      	mov	r3, r0
 8005a98:	e7f6      	b.n	8005a88 <_dtoa_r+0x900>
 8005a9a:	9b08      	ldr	r3, [sp, #32]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	dc34      	bgt.n	8005b0a <_dtoa_r+0x982>
 8005aa0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	dd31      	ble.n	8005b0a <_dtoa_r+0x982>
 8005aa6:	9b08      	ldr	r3, [sp, #32]
 8005aa8:	9306      	str	r3, [sp, #24]
 8005aaa:	9b06      	ldr	r3, [sp, #24]
 8005aac:	b963      	cbnz	r3, 8005ac8 <_dtoa_r+0x940>
 8005aae:	4621      	mov	r1, r4
 8005ab0:	2205      	movs	r2, #5
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	f000 faaa 	bl	800600c <__multadd>
 8005ab8:	4601      	mov	r1, r0
 8005aba:	4604      	mov	r4, r0
 8005abc:	4650      	mov	r0, sl
 8005abe:	f000 fcbd 	bl	800643c <__mcmp>
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	f73f adbf 	bgt.w	8005646 <_dtoa_r+0x4be>
 8005ac8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005aca:	9f03      	ldr	r7, [sp, #12]
 8005acc:	ea6f 0b03 	mvn.w	fp, r3
 8005ad0:	f04f 0800 	mov.w	r8, #0
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	f000 fa76 	bl	8005fc8 <_Bfree>
 8005adc:	2e00      	cmp	r6, #0
 8005ade:	f43f aead 	beq.w	800583c <_dtoa_r+0x6b4>
 8005ae2:	f1b8 0f00 	cmp.w	r8, #0
 8005ae6:	d005      	beq.n	8005af4 <_dtoa_r+0x96c>
 8005ae8:	45b0      	cmp	r8, r6
 8005aea:	d003      	beq.n	8005af4 <_dtoa_r+0x96c>
 8005aec:	4641      	mov	r1, r8
 8005aee:	4628      	mov	r0, r5
 8005af0:	f000 fa6a 	bl	8005fc8 <_Bfree>
 8005af4:	4631      	mov	r1, r6
 8005af6:	4628      	mov	r0, r5
 8005af8:	f000 fa66 	bl	8005fc8 <_Bfree>
 8005afc:	e69e      	b.n	800583c <_dtoa_r+0x6b4>
 8005afe:	2400      	movs	r4, #0
 8005b00:	4626      	mov	r6, r4
 8005b02:	e7e1      	b.n	8005ac8 <_dtoa_r+0x940>
 8005b04:	46c3      	mov	fp, r8
 8005b06:	4626      	mov	r6, r4
 8005b08:	e59d      	b.n	8005646 <_dtoa_r+0x4be>
 8005b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 80c8 	beq.w	8005ca2 <_dtoa_r+0xb1a>
 8005b12:	9b08      	ldr	r3, [sp, #32]
 8005b14:	9306      	str	r3, [sp, #24]
 8005b16:	2f00      	cmp	r7, #0
 8005b18:	dd05      	ble.n	8005b26 <_dtoa_r+0x99e>
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	463a      	mov	r2, r7
 8005b1e:	4628      	mov	r0, r5
 8005b20:	f000 fc20 	bl	8006364 <__lshift>
 8005b24:	4606      	mov	r6, r0
 8005b26:	f1b8 0f00 	cmp.w	r8, #0
 8005b2a:	d05b      	beq.n	8005be4 <_dtoa_r+0xa5c>
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	6871      	ldr	r1, [r6, #4]
 8005b30:	f000 fa0a 	bl	8005f48 <_Balloc>
 8005b34:	4607      	mov	r7, r0
 8005b36:	b928      	cbnz	r0, 8005b44 <_dtoa_r+0x9bc>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005b3e:	4b81      	ldr	r3, [pc, #516]	; (8005d44 <_dtoa_r+0xbbc>)
 8005b40:	f7ff bb36 	b.w	80051b0 <_dtoa_r+0x28>
 8005b44:	6932      	ldr	r2, [r6, #16]
 8005b46:	f106 010c 	add.w	r1, r6, #12
 8005b4a:	3202      	adds	r2, #2
 8005b4c:	0092      	lsls	r2, r2, #2
 8005b4e:	300c      	adds	r0, #12
 8005b50:	f000 ff9e 	bl	8006a90 <memcpy>
 8005b54:	2201      	movs	r2, #1
 8005b56:	4639      	mov	r1, r7
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f000 fc03 	bl	8006364 <__lshift>
 8005b5e:	46b0      	mov	r8, r6
 8005b60:	4606      	mov	r6, r0
 8005b62:	9b03      	ldr	r3, [sp, #12]
 8005b64:	9a03      	ldr	r2, [sp, #12]
 8005b66:	3301      	adds	r3, #1
 8005b68:	9308      	str	r3, [sp, #32]
 8005b6a:	9b06      	ldr	r3, [sp, #24]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b70:	9b04      	ldr	r3, [sp, #16]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	930a      	str	r3, [sp, #40]	; 0x28
 8005b78:	9b08      	ldr	r3, [sp, #32]
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	4650      	mov	r0, sl
 8005b80:	9304      	str	r3, [sp, #16]
 8005b82:	f7ff fa75 	bl	8005070 <quorem>
 8005b86:	4641      	mov	r1, r8
 8005b88:	9006      	str	r0, [sp, #24]
 8005b8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005b8e:	4650      	mov	r0, sl
 8005b90:	f000 fc54 	bl	800643c <__mcmp>
 8005b94:	4632      	mov	r2, r6
 8005b96:	9009      	str	r0, [sp, #36]	; 0x24
 8005b98:	4621      	mov	r1, r4
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	f000 fc6a 	bl	8006474 <__mdiff>
 8005ba0:	68c2      	ldr	r2, [r0, #12]
 8005ba2:	4607      	mov	r7, r0
 8005ba4:	bb02      	cbnz	r2, 8005be8 <_dtoa_r+0xa60>
 8005ba6:	4601      	mov	r1, r0
 8005ba8:	4650      	mov	r0, sl
 8005baa:	f000 fc47 	bl	800643c <__mcmp>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	4639      	mov	r1, r7
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	920c      	str	r2, [sp, #48]	; 0x30
 8005bb6:	f000 fa07 	bl	8005fc8 <_Bfree>
 8005bba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bbe:	9f08      	ldr	r7, [sp, #32]
 8005bc0:	ea43 0102 	orr.w	r1, r3, r2
 8005bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc6:	4319      	orrs	r1, r3
 8005bc8:	d110      	bne.n	8005bec <_dtoa_r+0xa64>
 8005bca:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005bce:	d029      	beq.n	8005c24 <_dtoa_r+0xa9c>
 8005bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	dd02      	ble.n	8005bdc <_dtoa_r+0xa54>
 8005bd6:	9b06      	ldr	r3, [sp, #24]
 8005bd8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005bdc:	9b04      	ldr	r3, [sp, #16]
 8005bde:	f883 9000 	strb.w	r9, [r3]
 8005be2:	e777      	b.n	8005ad4 <_dtoa_r+0x94c>
 8005be4:	4630      	mov	r0, r6
 8005be6:	e7ba      	b.n	8005b5e <_dtoa_r+0x9d6>
 8005be8:	2201      	movs	r2, #1
 8005bea:	e7e1      	b.n	8005bb0 <_dtoa_r+0xa28>
 8005bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	db04      	blt.n	8005bfc <_dtoa_r+0xa74>
 8005bf2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005bf4:	430b      	orrs	r3, r1
 8005bf6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005bf8:	430b      	orrs	r3, r1
 8005bfa:	d120      	bne.n	8005c3e <_dtoa_r+0xab6>
 8005bfc:	2a00      	cmp	r2, #0
 8005bfe:	dded      	ble.n	8005bdc <_dtoa_r+0xa54>
 8005c00:	4651      	mov	r1, sl
 8005c02:	2201      	movs	r2, #1
 8005c04:	4628      	mov	r0, r5
 8005c06:	f000 fbad 	bl	8006364 <__lshift>
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	4682      	mov	sl, r0
 8005c0e:	f000 fc15 	bl	800643c <__mcmp>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	dc03      	bgt.n	8005c1e <_dtoa_r+0xa96>
 8005c16:	d1e1      	bne.n	8005bdc <_dtoa_r+0xa54>
 8005c18:	f019 0f01 	tst.w	r9, #1
 8005c1c:	d0de      	beq.n	8005bdc <_dtoa_r+0xa54>
 8005c1e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c22:	d1d8      	bne.n	8005bd6 <_dtoa_r+0xa4e>
 8005c24:	2339      	movs	r3, #57	; 0x39
 8005c26:	9a04      	ldr	r2, [sp, #16]
 8005c28:	7013      	strb	r3, [r2, #0]
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	461f      	mov	r7, r3
 8005c2e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	2a39      	cmp	r2, #57	; 0x39
 8005c36:	d06b      	beq.n	8005d10 <_dtoa_r+0xb88>
 8005c38:	3201      	adds	r2, #1
 8005c3a:	701a      	strb	r2, [r3, #0]
 8005c3c:	e74a      	b.n	8005ad4 <_dtoa_r+0x94c>
 8005c3e:	2a00      	cmp	r2, #0
 8005c40:	dd07      	ble.n	8005c52 <_dtoa_r+0xaca>
 8005c42:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c46:	d0ed      	beq.n	8005c24 <_dtoa_r+0xa9c>
 8005c48:	9a04      	ldr	r2, [sp, #16]
 8005c4a:	f109 0301 	add.w	r3, r9, #1
 8005c4e:	7013      	strb	r3, [r2, #0]
 8005c50:	e740      	b.n	8005ad4 <_dtoa_r+0x94c>
 8005c52:	9b08      	ldr	r3, [sp, #32]
 8005c54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c56:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d042      	beq.n	8005ce4 <_dtoa_r+0xb5c>
 8005c5e:	4651      	mov	r1, sl
 8005c60:	2300      	movs	r3, #0
 8005c62:	220a      	movs	r2, #10
 8005c64:	4628      	mov	r0, r5
 8005c66:	f000 f9d1 	bl	800600c <__multadd>
 8005c6a:	45b0      	cmp	r8, r6
 8005c6c:	4682      	mov	sl, r0
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	f04f 020a 	mov.w	r2, #10
 8005c76:	4641      	mov	r1, r8
 8005c78:	4628      	mov	r0, r5
 8005c7a:	d107      	bne.n	8005c8c <_dtoa_r+0xb04>
 8005c7c:	f000 f9c6 	bl	800600c <__multadd>
 8005c80:	4680      	mov	r8, r0
 8005c82:	4606      	mov	r6, r0
 8005c84:	9b08      	ldr	r3, [sp, #32]
 8005c86:	3301      	adds	r3, #1
 8005c88:	9308      	str	r3, [sp, #32]
 8005c8a:	e775      	b.n	8005b78 <_dtoa_r+0x9f0>
 8005c8c:	f000 f9be 	bl	800600c <__multadd>
 8005c90:	4631      	mov	r1, r6
 8005c92:	4680      	mov	r8, r0
 8005c94:	2300      	movs	r3, #0
 8005c96:	220a      	movs	r2, #10
 8005c98:	4628      	mov	r0, r5
 8005c9a:	f000 f9b7 	bl	800600c <__multadd>
 8005c9e:	4606      	mov	r6, r0
 8005ca0:	e7f0      	b.n	8005c84 <_dtoa_r+0xafc>
 8005ca2:	9b08      	ldr	r3, [sp, #32]
 8005ca4:	9306      	str	r3, [sp, #24]
 8005ca6:	9f03      	ldr	r7, [sp, #12]
 8005ca8:	4621      	mov	r1, r4
 8005caa:	4650      	mov	r0, sl
 8005cac:	f7ff f9e0 	bl	8005070 <quorem>
 8005cb0:	9b03      	ldr	r3, [sp, #12]
 8005cb2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005cb6:	f807 9b01 	strb.w	r9, [r7], #1
 8005cba:	1afa      	subs	r2, r7, r3
 8005cbc:	9b06      	ldr	r3, [sp, #24]
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	dd07      	ble.n	8005cd2 <_dtoa_r+0xb4a>
 8005cc2:	4651      	mov	r1, sl
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	220a      	movs	r2, #10
 8005cc8:	4628      	mov	r0, r5
 8005cca:	f000 f99f 	bl	800600c <__multadd>
 8005cce:	4682      	mov	sl, r0
 8005cd0:	e7ea      	b.n	8005ca8 <_dtoa_r+0xb20>
 8005cd2:	9b06      	ldr	r3, [sp, #24]
 8005cd4:	f04f 0800 	mov.w	r8, #0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	bfcc      	ite	gt
 8005cdc:	461f      	movgt	r7, r3
 8005cde:	2701      	movle	r7, #1
 8005ce0:	9b03      	ldr	r3, [sp, #12]
 8005ce2:	441f      	add	r7, r3
 8005ce4:	4651      	mov	r1, sl
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f000 fb3b 	bl	8006364 <__lshift>
 8005cee:	4621      	mov	r1, r4
 8005cf0:	4682      	mov	sl, r0
 8005cf2:	f000 fba3 	bl	800643c <__mcmp>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	dc97      	bgt.n	8005c2a <_dtoa_r+0xaa2>
 8005cfa:	d102      	bne.n	8005d02 <_dtoa_r+0xb7a>
 8005cfc:	f019 0f01 	tst.w	r9, #1
 8005d00:	d193      	bne.n	8005c2a <_dtoa_r+0xaa2>
 8005d02:	463b      	mov	r3, r7
 8005d04:	461f      	mov	r7, r3
 8005d06:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d0a:	2a30      	cmp	r2, #48	; 0x30
 8005d0c:	d0fa      	beq.n	8005d04 <_dtoa_r+0xb7c>
 8005d0e:	e6e1      	b.n	8005ad4 <_dtoa_r+0x94c>
 8005d10:	9a03      	ldr	r2, [sp, #12]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d18a      	bne.n	8005c2c <_dtoa_r+0xaa4>
 8005d16:	2331      	movs	r3, #49	; 0x31
 8005d18:	f10b 0b01 	add.w	fp, fp, #1
 8005d1c:	e797      	b.n	8005c4e <_dtoa_r+0xac6>
 8005d1e:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <_dtoa_r+0xbc0>)
 8005d20:	f7ff ba9f 	b.w	8005262 <_dtoa_r+0xda>
 8005d24:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f47f aa77 	bne.w	800521a <_dtoa_r+0x92>
 8005d2c:	4b07      	ldr	r3, [pc, #28]	; (8005d4c <_dtoa_r+0xbc4>)
 8005d2e:	f7ff ba98 	b.w	8005262 <_dtoa_r+0xda>
 8005d32:	9b06      	ldr	r3, [sp, #24]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	dcb6      	bgt.n	8005ca6 <_dtoa_r+0xb1e>
 8005d38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	f73f aeb5 	bgt.w	8005aaa <_dtoa_r+0x922>
 8005d40:	e7b1      	b.n	8005ca6 <_dtoa_r+0xb1e>
 8005d42:	bf00      	nop
 8005d44:	080083b2 	.word	0x080083b2
 8005d48:	08008312 	.word	0x08008312
 8005d4c:	08008336 	.word	0x08008336

08005d50 <_free_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	4605      	mov	r5, r0
 8005d54:	2900      	cmp	r1, #0
 8005d56:	d040      	beq.n	8005dda <_free_r+0x8a>
 8005d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d5c:	1f0c      	subs	r4, r1, #4
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	bfb8      	it	lt
 8005d62:	18e4      	addlt	r4, r4, r3
 8005d64:	f000 f8e4 	bl	8005f30 <__malloc_lock>
 8005d68:	4a1c      	ldr	r2, [pc, #112]	; (8005ddc <_free_r+0x8c>)
 8005d6a:	6813      	ldr	r3, [r2, #0]
 8005d6c:	b933      	cbnz	r3, 8005d7c <_free_r+0x2c>
 8005d6e:	6063      	str	r3, [r4, #4]
 8005d70:	6014      	str	r4, [r2, #0]
 8005d72:	4628      	mov	r0, r5
 8005d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d78:	f000 b8e0 	b.w	8005f3c <__malloc_unlock>
 8005d7c:	42a3      	cmp	r3, r4
 8005d7e:	d908      	bls.n	8005d92 <_free_r+0x42>
 8005d80:	6820      	ldr	r0, [r4, #0]
 8005d82:	1821      	adds	r1, r4, r0
 8005d84:	428b      	cmp	r3, r1
 8005d86:	bf01      	itttt	eq
 8005d88:	6819      	ldreq	r1, [r3, #0]
 8005d8a:	685b      	ldreq	r3, [r3, #4]
 8005d8c:	1809      	addeq	r1, r1, r0
 8005d8e:	6021      	streq	r1, [r4, #0]
 8005d90:	e7ed      	b.n	8005d6e <_free_r+0x1e>
 8005d92:	461a      	mov	r2, r3
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	b10b      	cbz	r3, 8005d9c <_free_r+0x4c>
 8005d98:	42a3      	cmp	r3, r4
 8005d9a:	d9fa      	bls.n	8005d92 <_free_r+0x42>
 8005d9c:	6811      	ldr	r1, [r2, #0]
 8005d9e:	1850      	adds	r0, r2, r1
 8005da0:	42a0      	cmp	r0, r4
 8005da2:	d10b      	bne.n	8005dbc <_free_r+0x6c>
 8005da4:	6820      	ldr	r0, [r4, #0]
 8005da6:	4401      	add	r1, r0
 8005da8:	1850      	adds	r0, r2, r1
 8005daa:	4283      	cmp	r3, r0
 8005dac:	6011      	str	r1, [r2, #0]
 8005dae:	d1e0      	bne.n	8005d72 <_free_r+0x22>
 8005db0:	6818      	ldr	r0, [r3, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	4408      	add	r0, r1
 8005db6:	6010      	str	r0, [r2, #0]
 8005db8:	6053      	str	r3, [r2, #4]
 8005dba:	e7da      	b.n	8005d72 <_free_r+0x22>
 8005dbc:	d902      	bls.n	8005dc4 <_free_r+0x74>
 8005dbe:	230c      	movs	r3, #12
 8005dc0:	602b      	str	r3, [r5, #0]
 8005dc2:	e7d6      	b.n	8005d72 <_free_r+0x22>
 8005dc4:	6820      	ldr	r0, [r4, #0]
 8005dc6:	1821      	adds	r1, r4, r0
 8005dc8:	428b      	cmp	r3, r1
 8005dca:	bf01      	itttt	eq
 8005dcc:	6819      	ldreq	r1, [r3, #0]
 8005dce:	685b      	ldreq	r3, [r3, #4]
 8005dd0:	1809      	addeq	r1, r1, r0
 8005dd2:	6021      	streq	r1, [r4, #0]
 8005dd4:	6063      	str	r3, [r4, #4]
 8005dd6:	6054      	str	r4, [r2, #4]
 8005dd8:	e7cb      	b.n	8005d72 <_free_r+0x22>
 8005dda:	bd38      	pop	{r3, r4, r5, pc}
 8005ddc:	20000880 	.word	0x20000880

08005de0 <malloc>:
 8005de0:	4b02      	ldr	r3, [pc, #8]	; (8005dec <malloc+0xc>)
 8005de2:	4601      	mov	r1, r0
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	f000 b823 	b.w	8005e30 <_malloc_r>
 8005dea:	bf00      	nop
 8005dec:	20000064 	.word	0x20000064

08005df0 <sbrk_aligned>:
 8005df0:	b570      	push	{r4, r5, r6, lr}
 8005df2:	4e0e      	ldr	r6, [pc, #56]	; (8005e2c <sbrk_aligned+0x3c>)
 8005df4:	460c      	mov	r4, r1
 8005df6:	6831      	ldr	r1, [r6, #0]
 8005df8:	4605      	mov	r5, r0
 8005dfa:	b911      	cbnz	r1, 8005e02 <sbrk_aligned+0x12>
 8005dfc:	f000 fe38 	bl	8006a70 <_sbrk_r>
 8005e00:	6030      	str	r0, [r6, #0]
 8005e02:	4621      	mov	r1, r4
 8005e04:	4628      	mov	r0, r5
 8005e06:	f000 fe33 	bl	8006a70 <_sbrk_r>
 8005e0a:	1c43      	adds	r3, r0, #1
 8005e0c:	d00a      	beq.n	8005e24 <sbrk_aligned+0x34>
 8005e0e:	1cc4      	adds	r4, r0, #3
 8005e10:	f024 0403 	bic.w	r4, r4, #3
 8005e14:	42a0      	cmp	r0, r4
 8005e16:	d007      	beq.n	8005e28 <sbrk_aligned+0x38>
 8005e18:	1a21      	subs	r1, r4, r0
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	f000 fe28 	bl	8006a70 <_sbrk_r>
 8005e20:	3001      	adds	r0, #1
 8005e22:	d101      	bne.n	8005e28 <sbrk_aligned+0x38>
 8005e24:	f04f 34ff 	mov.w	r4, #4294967295
 8005e28:	4620      	mov	r0, r4
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
 8005e2c:	20000884 	.word	0x20000884

08005e30 <_malloc_r>:
 8005e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e34:	1ccd      	adds	r5, r1, #3
 8005e36:	f025 0503 	bic.w	r5, r5, #3
 8005e3a:	3508      	adds	r5, #8
 8005e3c:	2d0c      	cmp	r5, #12
 8005e3e:	bf38      	it	cc
 8005e40:	250c      	movcc	r5, #12
 8005e42:	2d00      	cmp	r5, #0
 8005e44:	4607      	mov	r7, r0
 8005e46:	db01      	blt.n	8005e4c <_malloc_r+0x1c>
 8005e48:	42a9      	cmp	r1, r5
 8005e4a:	d905      	bls.n	8005e58 <_malloc_r+0x28>
 8005e4c:	230c      	movs	r3, #12
 8005e4e:	2600      	movs	r6, #0
 8005e50:	603b      	str	r3, [r7, #0]
 8005e52:	4630      	mov	r0, r6
 8005e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f2c <_malloc_r+0xfc>
 8005e5c:	f000 f868 	bl	8005f30 <__malloc_lock>
 8005e60:	f8d8 3000 	ldr.w	r3, [r8]
 8005e64:	461c      	mov	r4, r3
 8005e66:	bb5c      	cbnz	r4, 8005ec0 <_malloc_r+0x90>
 8005e68:	4629      	mov	r1, r5
 8005e6a:	4638      	mov	r0, r7
 8005e6c:	f7ff ffc0 	bl	8005df0 <sbrk_aligned>
 8005e70:	1c43      	adds	r3, r0, #1
 8005e72:	4604      	mov	r4, r0
 8005e74:	d155      	bne.n	8005f22 <_malloc_r+0xf2>
 8005e76:	f8d8 4000 	ldr.w	r4, [r8]
 8005e7a:	4626      	mov	r6, r4
 8005e7c:	2e00      	cmp	r6, #0
 8005e7e:	d145      	bne.n	8005f0c <_malloc_r+0xdc>
 8005e80:	2c00      	cmp	r4, #0
 8005e82:	d048      	beq.n	8005f16 <_malloc_r+0xe6>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	4631      	mov	r1, r6
 8005e88:	4638      	mov	r0, r7
 8005e8a:	eb04 0903 	add.w	r9, r4, r3
 8005e8e:	f000 fdef 	bl	8006a70 <_sbrk_r>
 8005e92:	4581      	cmp	r9, r0
 8005e94:	d13f      	bne.n	8005f16 <_malloc_r+0xe6>
 8005e96:	6821      	ldr	r1, [r4, #0]
 8005e98:	4638      	mov	r0, r7
 8005e9a:	1a6d      	subs	r5, r5, r1
 8005e9c:	4629      	mov	r1, r5
 8005e9e:	f7ff ffa7 	bl	8005df0 <sbrk_aligned>
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	d037      	beq.n	8005f16 <_malloc_r+0xe6>
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	442b      	add	r3, r5
 8005eaa:	6023      	str	r3, [r4, #0]
 8005eac:	f8d8 3000 	ldr.w	r3, [r8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d038      	beq.n	8005f26 <_malloc_r+0xf6>
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	42a2      	cmp	r2, r4
 8005eb8:	d12b      	bne.n	8005f12 <_malloc_r+0xe2>
 8005eba:	2200      	movs	r2, #0
 8005ebc:	605a      	str	r2, [r3, #4]
 8005ebe:	e00f      	b.n	8005ee0 <_malloc_r+0xb0>
 8005ec0:	6822      	ldr	r2, [r4, #0]
 8005ec2:	1b52      	subs	r2, r2, r5
 8005ec4:	d41f      	bmi.n	8005f06 <_malloc_r+0xd6>
 8005ec6:	2a0b      	cmp	r2, #11
 8005ec8:	d917      	bls.n	8005efa <_malloc_r+0xca>
 8005eca:	1961      	adds	r1, r4, r5
 8005ecc:	42a3      	cmp	r3, r4
 8005ece:	6025      	str	r5, [r4, #0]
 8005ed0:	bf18      	it	ne
 8005ed2:	6059      	strne	r1, [r3, #4]
 8005ed4:	6863      	ldr	r3, [r4, #4]
 8005ed6:	bf08      	it	eq
 8005ed8:	f8c8 1000 	streq.w	r1, [r8]
 8005edc:	5162      	str	r2, [r4, r5]
 8005ede:	604b      	str	r3, [r1, #4]
 8005ee0:	4638      	mov	r0, r7
 8005ee2:	f104 060b 	add.w	r6, r4, #11
 8005ee6:	f000 f829 	bl	8005f3c <__malloc_unlock>
 8005eea:	f026 0607 	bic.w	r6, r6, #7
 8005eee:	1d23      	adds	r3, r4, #4
 8005ef0:	1af2      	subs	r2, r6, r3
 8005ef2:	d0ae      	beq.n	8005e52 <_malloc_r+0x22>
 8005ef4:	1b9b      	subs	r3, r3, r6
 8005ef6:	50a3      	str	r3, [r4, r2]
 8005ef8:	e7ab      	b.n	8005e52 <_malloc_r+0x22>
 8005efa:	42a3      	cmp	r3, r4
 8005efc:	6862      	ldr	r2, [r4, #4]
 8005efe:	d1dd      	bne.n	8005ebc <_malloc_r+0x8c>
 8005f00:	f8c8 2000 	str.w	r2, [r8]
 8005f04:	e7ec      	b.n	8005ee0 <_malloc_r+0xb0>
 8005f06:	4623      	mov	r3, r4
 8005f08:	6864      	ldr	r4, [r4, #4]
 8005f0a:	e7ac      	b.n	8005e66 <_malloc_r+0x36>
 8005f0c:	4634      	mov	r4, r6
 8005f0e:	6876      	ldr	r6, [r6, #4]
 8005f10:	e7b4      	b.n	8005e7c <_malloc_r+0x4c>
 8005f12:	4613      	mov	r3, r2
 8005f14:	e7cc      	b.n	8005eb0 <_malloc_r+0x80>
 8005f16:	230c      	movs	r3, #12
 8005f18:	4638      	mov	r0, r7
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	f000 f80e 	bl	8005f3c <__malloc_unlock>
 8005f20:	e797      	b.n	8005e52 <_malloc_r+0x22>
 8005f22:	6025      	str	r5, [r4, #0]
 8005f24:	e7dc      	b.n	8005ee0 <_malloc_r+0xb0>
 8005f26:	605b      	str	r3, [r3, #4]
 8005f28:	deff      	udf	#255	; 0xff
 8005f2a:	bf00      	nop
 8005f2c:	20000880 	.word	0x20000880

08005f30 <__malloc_lock>:
 8005f30:	4801      	ldr	r0, [pc, #4]	; (8005f38 <__malloc_lock+0x8>)
 8005f32:	f7ff b88d 	b.w	8005050 <__retarget_lock_acquire_recursive>
 8005f36:	bf00      	nop
 8005f38:	2000087c 	.word	0x2000087c

08005f3c <__malloc_unlock>:
 8005f3c:	4801      	ldr	r0, [pc, #4]	; (8005f44 <__malloc_unlock+0x8>)
 8005f3e:	f7ff b888 	b.w	8005052 <__retarget_lock_release_recursive>
 8005f42:	bf00      	nop
 8005f44:	2000087c 	.word	0x2000087c

08005f48 <_Balloc>:
 8005f48:	b570      	push	{r4, r5, r6, lr}
 8005f4a:	69c6      	ldr	r6, [r0, #28]
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	460d      	mov	r5, r1
 8005f50:	b976      	cbnz	r6, 8005f70 <_Balloc+0x28>
 8005f52:	2010      	movs	r0, #16
 8005f54:	f7ff ff44 	bl	8005de0 <malloc>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	61e0      	str	r0, [r4, #28]
 8005f5c:	b920      	cbnz	r0, 8005f68 <_Balloc+0x20>
 8005f5e:	216b      	movs	r1, #107	; 0x6b
 8005f60:	4b17      	ldr	r3, [pc, #92]	; (8005fc0 <_Balloc+0x78>)
 8005f62:	4818      	ldr	r0, [pc, #96]	; (8005fc4 <_Balloc+0x7c>)
 8005f64:	f000 fda2 	bl	8006aac <__assert_func>
 8005f68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f6c:	6006      	str	r6, [r0, #0]
 8005f6e:	60c6      	str	r6, [r0, #12]
 8005f70:	69e6      	ldr	r6, [r4, #28]
 8005f72:	68f3      	ldr	r3, [r6, #12]
 8005f74:	b183      	cbz	r3, 8005f98 <_Balloc+0x50>
 8005f76:	69e3      	ldr	r3, [r4, #28]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f7e:	b9b8      	cbnz	r0, 8005fb0 <_Balloc+0x68>
 8005f80:	2101      	movs	r1, #1
 8005f82:	fa01 f605 	lsl.w	r6, r1, r5
 8005f86:	1d72      	adds	r2, r6, #5
 8005f88:	4620      	mov	r0, r4
 8005f8a:	0092      	lsls	r2, r2, #2
 8005f8c:	f000 fdac 	bl	8006ae8 <_calloc_r>
 8005f90:	b160      	cbz	r0, 8005fac <_Balloc+0x64>
 8005f92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f96:	e00e      	b.n	8005fb6 <_Balloc+0x6e>
 8005f98:	2221      	movs	r2, #33	; 0x21
 8005f9a:	2104      	movs	r1, #4
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f000 fda3 	bl	8006ae8 <_calloc_r>
 8005fa2:	69e3      	ldr	r3, [r4, #28]
 8005fa4:	60f0      	str	r0, [r6, #12]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1e4      	bne.n	8005f76 <_Balloc+0x2e>
 8005fac:	2000      	movs	r0, #0
 8005fae:	bd70      	pop	{r4, r5, r6, pc}
 8005fb0:	6802      	ldr	r2, [r0, #0]
 8005fb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005fbc:	e7f7      	b.n	8005fae <_Balloc+0x66>
 8005fbe:	bf00      	nop
 8005fc0:	08008343 	.word	0x08008343
 8005fc4:	080083c3 	.word	0x080083c3

08005fc8 <_Bfree>:
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	69c6      	ldr	r6, [r0, #28]
 8005fcc:	4605      	mov	r5, r0
 8005fce:	460c      	mov	r4, r1
 8005fd0:	b976      	cbnz	r6, 8005ff0 <_Bfree+0x28>
 8005fd2:	2010      	movs	r0, #16
 8005fd4:	f7ff ff04 	bl	8005de0 <malloc>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	61e8      	str	r0, [r5, #28]
 8005fdc:	b920      	cbnz	r0, 8005fe8 <_Bfree+0x20>
 8005fde:	218f      	movs	r1, #143	; 0x8f
 8005fe0:	4b08      	ldr	r3, [pc, #32]	; (8006004 <_Bfree+0x3c>)
 8005fe2:	4809      	ldr	r0, [pc, #36]	; (8006008 <_Bfree+0x40>)
 8005fe4:	f000 fd62 	bl	8006aac <__assert_func>
 8005fe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fec:	6006      	str	r6, [r0, #0]
 8005fee:	60c6      	str	r6, [r0, #12]
 8005ff0:	b13c      	cbz	r4, 8006002 <_Bfree+0x3a>
 8005ff2:	69eb      	ldr	r3, [r5, #28]
 8005ff4:	6862      	ldr	r2, [r4, #4]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ffc:	6021      	str	r1, [r4, #0]
 8005ffe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006002:	bd70      	pop	{r4, r5, r6, pc}
 8006004:	08008343 	.word	0x08008343
 8006008:	080083c3 	.word	0x080083c3

0800600c <__multadd>:
 800600c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006010:	4607      	mov	r7, r0
 8006012:	460c      	mov	r4, r1
 8006014:	461e      	mov	r6, r3
 8006016:	2000      	movs	r0, #0
 8006018:	690d      	ldr	r5, [r1, #16]
 800601a:	f101 0c14 	add.w	ip, r1, #20
 800601e:	f8dc 3000 	ldr.w	r3, [ip]
 8006022:	3001      	adds	r0, #1
 8006024:	b299      	uxth	r1, r3
 8006026:	fb02 6101 	mla	r1, r2, r1, r6
 800602a:	0c1e      	lsrs	r6, r3, #16
 800602c:	0c0b      	lsrs	r3, r1, #16
 800602e:	fb02 3306 	mla	r3, r2, r6, r3
 8006032:	b289      	uxth	r1, r1
 8006034:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006038:	4285      	cmp	r5, r0
 800603a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800603e:	f84c 1b04 	str.w	r1, [ip], #4
 8006042:	dcec      	bgt.n	800601e <__multadd+0x12>
 8006044:	b30e      	cbz	r6, 800608a <__multadd+0x7e>
 8006046:	68a3      	ldr	r3, [r4, #8]
 8006048:	42ab      	cmp	r3, r5
 800604a:	dc19      	bgt.n	8006080 <__multadd+0x74>
 800604c:	6861      	ldr	r1, [r4, #4]
 800604e:	4638      	mov	r0, r7
 8006050:	3101      	adds	r1, #1
 8006052:	f7ff ff79 	bl	8005f48 <_Balloc>
 8006056:	4680      	mov	r8, r0
 8006058:	b928      	cbnz	r0, 8006066 <__multadd+0x5a>
 800605a:	4602      	mov	r2, r0
 800605c:	21ba      	movs	r1, #186	; 0xba
 800605e:	4b0c      	ldr	r3, [pc, #48]	; (8006090 <__multadd+0x84>)
 8006060:	480c      	ldr	r0, [pc, #48]	; (8006094 <__multadd+0x88>)
 8006062:	f000 fd23 	bl	8006aac <__assert_func>
 8006066:	6922      	ldr	r2, [r4, #16]
 8006068:	f104 010c 	add.w	r1, r4, #12
 800606c:	3202      	adds	r2, #2
 800606e:	0092      	lsls	r2, r2, #2
 8006070:	300c      	adds	r0, #12
 8006072:	f000 fd0d 	bl	8006a90 <memcpy>
 8006076:	4621      	mov	r1, r4
 8006078:	4638      	mov	r0, r7
 800607a:	f7ff ffa5 	bl	8005fc8 <_Bfree>
 800607e:	4644      	mov	r4, r8
 8006080:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006084:	3501      	adds	r5, #1
 8006086:	615e      	str	r6, [r3, #20]
 8006088:	6125      	str	r5, [r4, #16]
 800608a:	4620      	mov	r0, r4
 800608c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006090:	080083b2 	.word	0x080083b2
 8006094:	080083c3 	.word	0x080083c3

08006098 <__hi0bits>:
 8006098:	0c02      	lsrs	r2, r0, #16
 800609a:	0412      	lsls	r2, r2, #16
 800609c:	4603      	mov	r3, r0
 800609e:	b9ca      	cbnz	r2, 80060d4 <__hi0bits+0x3c>
 80060a0:	0403      	lsls	r3, r0, #16
 80060a2:	2010      	movs	r0, #16
 80060a4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80060a8:	bf04      	itt	eq
 80060aa:	021b      	lsleq	r3, r3, #8
 80060ac:	3008      	addeq	r0, #8
 80060ae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80060b2:	bf04      	itt	eq
 80060b4:	011b      	lsleq	r3, r3, #4
 80060b6:	3004      	addeq	r0, #4
 80060b8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80060bc:	bf04      	itt	eq
 80060be:	009b      	lsleq	r3, r3, #2
 80060c0:	3002      	addeq	r0, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	db05      	blt.n	80060d2 <__hi0bits+0x3a>
 80060c6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80060ca:	f100 0001 	add.w	r0, r0, #1
 80060ce:	bf08      	it	eq
 80060d0:	2020      	moveq	r0, #32
 80060d2:	4770      	bx	lr
 80060d4:	2000      	movs	r0, #0
 80060d6:	e7e5      	b.n	80060a4 <__hi0bits+0xc>

080060d8 <__lo0bits>:
 80060d8:	6803      	ldr	r3, [r0, #0]
 80060da:	4602      	mov	r2, r0
 80060dc:	f013 0007 	ands.w	r0, r3, #7
 80060e0:	d00b      	beq.n	80060fa <__lo0bits+0x22>
 80060e2:	07d9      	lsls	r1, r3, #31
 80060e4:	d421      	bmi.n	800612a <__lo0bits+0x52>
 80060e6:	0798      	lsls	r0, r3, #30
 80060e8:	bf49      	itett	mi
 80060ea:	085b      	lsrmi	r3, r3, #1
 80060ec:	089b      	lsrpl	r3, r3, #2
 80060ee:	2001      	movmi	r0, #1
 80060f0:	6013      	strmi	r3, [r2, #0]
 80060f2:	bf5c      	itt	pl
 80060f4:	2002      	movpl	r0, #2
 80060f6:	6013      	strpl	r3, [r2, #0]
 80060f8:	4770      	bx	lr
 80060fa:	b299      	uxth	r1, r3
 80060fc:	b909      	cbnz	r1, 8006102 <__lo0bits+0x2a>
 80060fe:	2010      	movs	r0, #16
 8006100:	0c1b      	lsrs	r3, r3, #16
 8006102:	b2d9      	uxtb	r1, r3
 8006104:	b909      	cbnz	r1, 800610a <__lo0bits+0x32>
 8006106:	3008      	adds	r0, #8
 8006108:	0a1b      	lsrs	r3, r3, #8
 800610a:	0719      	lsls	r1, r3, #28
 800610c:	bf04      	itt	eq
 800610e:	091b      	lsreq	r3, r3, #4
 8006110:	3004      	addeq	r0, #4
 8006112:	0799      	lsls	r1, r3, #30
 8006114:	bf04      	itt	eq
 8006116:	089b      	lsreq	r3, r3, #2
 8006118:	3002      	addeq	r0, #2
 800611a:	07d9      	lsls	r1, r3, #31
 800611c:	d403      	bmi.n	8006126 <__lo0bits+0x4e>
 800611e:	085b      	lsrs	r3, r3, #1
 8006120:	f100 0001 	add.w	r0, r0, #1
 8006124:	d003      	beq.n	800612e <__lo0bits+0x56>
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	4770      	bx	lr
 800612a:	2000      	movs	r0, #0
 800612c:	4770      	bx	lr
 800612e:	2020      	movs	r0, #32
 8006130:	4770      	bx	lr
	...

08006134 <__i2b>:
 8006134:	b510      	push	{r4, lr}
 8006136:	460c      	mov	r4, r1
 8006138:	2101      	movs	r1, #1
 800613a:	f7ff ff05 	bl	8005f48 <_Balloc>
 800613e:	4602      	mov	r2, r0
 8006140:	b928      	cbnz	r0, 800614e <__i2b+0x1a>
 8006142:	f240 1145 	movw	r1, #325	; 0x145
 8006146:	4b04      	ldr	r3, [pc, #16]	; (8006158 <__i2b+0x24>)
 8006148:	4804      	ldr	r0, [pc, #16]	; (800615c <__i2b+0x28>)
 800614a:	f000 fcaf 	bl	8006aac <__assert_func>
 800614e:	2301      	movs	r3, #1
 8006150:	6144      	str	r4, [r0, #20]
 8006152:	6103      	str	r3, [r0, #16]
 8006154:	bd10      	pop	{r4, pc}
 8006156:	bf00      	nop
 8006158:	080083b2 	.word	0x080083b2
 800615c:	080083c3 	.word	0x080083c3

08006160 <__multiply>:
 8006160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006164:	4691      	mov	r9, r2
 8006166:	690a      	ldr	r2, [r1, #16]
 8006168:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800616c:	460c      	mov	r4, r1
 800616e:	429a      	cmp	r2, r3
 8006170:	bfbe      	ittt	lt
 8006172:	460b      	movlt	r3, r1
 8006174:	464c      	movlt	r4, r9
 8006176:	4699      	movlt	r9, r3
 8006178:	6927      	ldr	r7, [r4, #16]
 800617a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800617e:	68a3      	ldr	r3, [r4, #8]
 8006180:	6861      	ldr	r1, [r4, #4]
 8006182:	eb07 060a 	add.w	r6, r7, sl
 8006186:	42b3      	cmp	r3, r6
 8006188:	b085      	sub	sp, #20
 800618a:	bfb8      	it	lt
 800618c:	3101      	addlt	r1, #1
 800618e:	f7ff fedb 	bl	8005f48 <_Balloc>
 8006192:	b930      	cbnz	r0, 80061a2 <__multiply+0x42>
 8006194:	4602      	mov	r2, r0
 8006196:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800619a:	4b43      	ldr	r3, [pc, #268]	; (80062a8 <__multiply+0x148>)
 800619c:	4843      	ldr	r0, [pc, #268]	; (80062ac <__multiply+0x14c>)
 800619e:	f000 fc85 	bl	8006aac <__assert_func>
 80061a2:	f100 0514 	add.w	r5, r0, #20
 80061a6:	462b      	mov	r3, r5
 80061a8:	2200      	movs	r2, #0
 80061aa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80061ae:	4543      	cmp	r3, r8
 80061b0:	d321      	bcc.n	80061f6 <__multiply+0x96>
 80061b2:	f104 0314 	add.w	r3, r4, #20
 80061b6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80061ba:	f109 0314 	add.w	r3, r9, #20
 80061be:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80061c2:	9202      	str	r2, [sp, #8]
 80061c4:	1b3a      	subs	r2, r7, r4
 80061c6:	3a15      	subs	r2, #21
 80061c8:	f022 0203 	bic.w	r2, r2, #3
 80061cc:	3204      	adds	r2, #4
 80061ce:	f104 0115 	add.w	r1, r4, #21
 80061d2:	428f      	cmp	r7, r1
 80061d4:	bf38      	it	cc
 80061d6:	2204      	movcc	r2, #4
 80061d8:	9201      	str	r2, [sp, #4]
 80061da:	9a02      	ldr	r2, [sp, #8]
 80061dc:	9303      	str	r3, [sp, #12]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d80c      	bhi.n	80061fc <__multiply+0x9c>
 80061e2:	2e00      	cmp	r6, #0
 80061e4:	dd03      	ble.n	80061ee <__multiply+0x8e>
 80061e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d05a      	beq.n	80062a4 <__multiply+0x144>
 80061ee:	6106      	str	r6, [r0, #16]
 80061f0:	b005      	add	sp, #20
 80061f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f6:	f843 2b04 	str.w	r2, [r3], #4
 80061fa:	e7d8      	b.n	80061ae <__multiply+0x4e>
 80061fc:	f8b3 a000 	ldrh.w	sl, [r3]
 8006200:	f1ba 0f00 	cmp.w	sl, #0
 8006204:	d023      	beq.n	800624e <__multiply+0xee>
 8006206:	46a9      	mov	r9, r5
 8006208:	f04f 0c00 	mov.w	ip, #0
 800620c:	f104 0e14 	add.w	lr, r4, #20
 8006210:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006214:	f8d9 1000 	ldr.w	r1, [r9]
 8006218:	fa1f fb82 	uxth.w	fp, r2
 800621c:	b289      	uxth	r1, r1
 800621e:	fb0a 110b 	mla	r1, sl, fp, r1
 8006222:	4461      	add	r1, ip
 8006224:	f8d9 c000 	ldr.w	ip, [r9]
 8006228:	0c12      	lsrs	r2, r2, #16
 800622a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800622e:	fb0a c202 	mla	r2, sl, r2, ip
 8006232:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006236:	b289      	uxth	r1, r1
 8006238:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800623c:	4577      	cmp	r7, lr
 800623e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006242:	f849 1b04 	str.w	r1, [r9], #4
 8006246:	d8e3      	bhi.n	8006210 <__multiply+0xb0>
 8006248:	9a01      	ldr	r2, [sp, #4]
 800624a:	f845 c002 	str.w	ip, [r5, r2]
 800624e:	9a03      	ldr	r2, [sp, #12]
 8006250:	3304      	adds	r3, #4
 8006252:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006256:	f1b9 0f00 	cmp.w	r9, #0
 800625a:	d021      	beq.n	80062a0 <__multiply+0x140>
 800625c:	46ae      	mov	lr, r5
 800625e:	f04f 0a00 	mov.w	sl, #0
 8006262:	6829      	ldr	r1, [r5, #0]
 8006264:	f104 0c14 	add.w	ip, r4, #20
 8006268:	f8bc b000 	ldrh.w	fp, [ip]
 800626c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006270:	b289      	uxth	r1, r1
 8006272:	fb09 220b 	mla	r2, r9, fp, r2
 8006276:	4452      	add	r2, sl
 8006278:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800627c:	f84e 1b04 	str.w	r1, [lr], #4
 8006280:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006284:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006288:	f8be 1000 	ldrh.w	r1, [lr]
 800628c:	4567      	cmp	r7, ip
 800628e:	fb09 110a 	mla	r1, r9, sl, r1
 8006292:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006296:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800629a:	d8e5      	bhi.n	8006268 <__multiply+0x108>
 800629c:	9a01      	ldr	r2, [sp, #4]
 800629e:	50a9      	str	r1, [r5, r2]
 80062a0:	3504      	adds	r5, #4
 80062a2:	e79a      	b.n	80061da <__multiply+0x7a>
 80062a4:	3e01      	subs	r6, #1
 80062a6:	e79c      	b.n	80061e2 <__multiply+0x82>
 80062a8:	080083b2 	.word	0x080083b2
 80062ac:	080083c3 	.word	0x080083c3

080062b0 <__pow5mult>:
 80062b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062b4:	4615      	mov	r5, r2
 80062b6:	f012 0203 	ands.w	r2, r2, #3
 80062ba:	4606      	mov	r6, r0
 80062bc:	460f      	mov	r7, r1
 80062be:	d007      	beq.n	80062d0 <__pow5mult+0x20>
 80062c0:	4c25      	ldr	r4, [pc, #148]	; (8006358 <__pow5mult+0xa8>)
 80062c2:	3a01      	subs	r2, #1
 80062c4:	2300      	movs	r3, #0
 80062c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062ca:	f7ff fe9f 	bl	800600c <__multadd>
 80062ce:	4607      	mov	r7, r0
 80062d0:	10ad      	asrs	r5, r5, #2
 80062d2:	d03d      	beq.n	8006350 <__pow5mult+0xa0>
 80062d4:	69f4      	ldr	r4, [r6, #28]
 80062d6:	b97c      	cbnz	r4, 80062f8 <__pow5mult+0x48>
 80062d8:	2010      	movs	r0, #16
 80062da:	f7ff fd81 	bl	8005de0 <malloc>
 80062de:	4602      	mov	r2, r0
 80062e0:	61f0      	str	r0, [r6, #28]
 80062e2:	b928      	cbnz	r0, 80062f0 <__pow5mult+0x40>
 80062e4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80062e8:	4b1c      	ldr	r3, [pc, #112]	; (800635c <__pow5mult+0xac>)
 80062ea:	481d      	ldr	r0, [pc, #116]	; (8006360 <__pow5mult+0xb0>)
 80062ec:	f000 fbde 	bl	8006aac <__assert_func>
 80062f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062f4:	6004      	str	r4, [r0, #0]
 80062f6:	60c4      	str	r4, [r0, #12]
 80062f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80062fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006300:	b94c      	cbnz	r4, 8006316 <__pow5mult+0x66>
 8006302:	f240 2171 	movw	r1, #625	; 0x271
 8006306:	4630      	mov	r0, r6
 8006308:	f7ff ff14 	bl	8006134 <__i2b>
 800630c:	2300      	movs	r3, #0
 800630e:	4604      	mov	r4, r0
 8006310:	f8c8 0008 	str.w	r0, [r8, #8]
 8006314:	6003      	str	r3, [r0, #0]
 8006316:	f04f 0900 	mov.w	r9, #0
 800631a:	07eb      	lsls	r3, r5, #31
 800631c:	d50a      	bpl.n	8006334 <__pow5mult+0x84>
 800631e:	4639      	mov	r1, r7
 8006320:	4622      	mov	r2, r4
 8006322:	4630      	mov	r0, r6
 8006324:	f7ff ff1c 	bl	8006160 <__multiply>
 8006328:	4680      	mov	r8, r0
 800632a:	4639      	mov	r1, r7
 800632c:	4630      	mov	r0, r6
 800632e:	f7ff fe4b 	bl	8005fc8 <_Bfree>
 8006332:	4647      	mov	r7, r8
 8006334:	106d      	asrs	r5, r5, #1
 8006336:	d00b      	beq.n	8006350 <__pow5mult+0xa0>
 8006338:	6820      	ldr	r0, [r4, #0]
 800633a:	b938      	cbnz	r0, 800634c <__pow5mult+0x9c>
 800633c:	4622      	mov	r2, r4
 800633e:	4621      	mov	r1, r4
 8006340:	4630      	mov	r0, r6
 8006342:	f7ff ff0d 	bl	8006160 <__multiply>
 8006346:	6020      	str	r0, [r4, #0]
 8006348:	f8c0 9000 	str.w	r9, [r0]
 800634c:	4604      	mov	r4, r0
 800634e:	e7e4      	b.n	800631a <__pow5mult+0x6a>
 8006350:	4638      	mov	r0, r7
 8006352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006356:	bf00      	nop
 8006358:	08008510 	.word	0x08008510
 800635c:	08008343 	.word	0x08008343
 8006360:	080083c3 	.word	0x080083c3

08006364 <__lshift>:
 8006364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006368:	460c      	mov	r4, r1
 800636a:	4607      	mov	r7, r0
 800636c:	4691      	mov	r9, r2
 800636e:	6923      	ldr	r3, [r4, #16]
 8006370:	6849      	ldr	r1, [r1, #4]
 8006372:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006376:	68a3      	ldr	r3, [r4, #8]
 8006378:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800637c:	f108 0601 	add.w	r6, r8, #1
 8006380:	42b3      	cmp	r3, r6
 8006382:	db0b      	blt.n	800639c <__lshift+0x38>
 8006384:	4638      	mov	r0, r7
 8006386:	f7ff fddf 	bl	8005f48 <_Balloc>
 800638a:	4605      	mov	r5, r0
 800638c:	b948      	cbnz	r0, 80063a2 <__lshift+0x3e>
 800638e:	4602      	mov	r2, r0
 8006390:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006394:	4b27      	ldr	r3, [pc, #156]	; (8006434 <__lshift+0xd0>)
 8006396:	4828      	ldr	r0, [pc, #160]	; (8006438 <__lshift+0xd4>)
 8006398:	f000 fb88 	bl	8006aac <__assert_func>
 800639c:	3101      	adds	r1, #1
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	e7ee      	b.n	8006380 <__lshift+0x1c>
 80063a2:	2300      	movs	r3, #0
 80063a4:	f100 0114 	add.w	r1, r0, #20
 80063a8:	f100 0210 	add.w	r2, r0, #16
 80063ac:	4618      	mov	r0, r3
 80063ae:	4553      	cmp	r3, sl
 80063b0:	db33      	blt.n	800641a <__lshift+0xb6>
 80063b2:	6920      	ldr	r0, [r4, #16]
 80063b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80063b8:	f104 0314 	add.w	r3, r4, #20
 80063bc:	f019 091f 	ands.w	r9, r9, #31
 80063c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80063c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80063c8:	d02b      	beq.n	8006422 <__lshift+0xbe>
 80063ca:	468a      	mov	sl, r1
 80063cc:	2200      	movs	r2, #0
 80063ce:	f1c9 0e20 	rsb	lr, r9, #32
 80063d2:	6818      	ldr	r0, [r3, #0]
 80063d4:	fa00 f009 	lsl.w	r0, r0, r9
 80063d8:	4310      	orrs	r0, r2
 80063da:	f84a 0b04 	str.w	r0, [sl], #4
 80063de:	f853 2b04 	ldr.w	r2, [r3], #4
 80063e2:	459c      	cmp	ip, r3
 80063e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80063e8:	d8f3      	bhi.n	80063d2 <__lshift+0x6e>
 80063ea:	ebac 0304 	sub.w	r3, ip, r4
 80063ee:	3b15      	subs	r3, #21
 80063f0:	f023 0303 	bic.w	r3, r3, #3
 80063f4:	3304      	adds	r3, #4
 80063f6:	f104 0015 	add.w	r0, r4, #21
 80063fa:	4584      	cmp	ip, r0
 80063fc:	bf38      	it	cc
 80063fe:	2304      	movcc	r3, #4
 8006400:	50ca      	str	r2, [r1, r3]
 8006402:	b10a      	cbz	r2, 8006408 <__lshift+0xa4>
 8006404:	f108 0602 	add.w	r6, r8, #2
 8006408:	3e01      	subs	r6, #1
 800640a:	4638      	mov	r0, r7
 800640c:	4621      	mov	r1, r4
 800640e:	612e      	str	r6, [r5, #16]
 8006410:	f7ff fdda 	bl	8005fc8 <_Bfree>
 8006414:	4628      	mov	r0, r5
 8006416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800641a:	f842 0f04 	str.w	r0, [r2, #4]!
 800641e:	3301      	adds	r3, #1
 8006420:	e7c5      	b.n	80063ae <__lshift+0x4a>
 8006422:	3904      	subs	r1, #4
 8006424:	f853 2b04 	ldr.w	r2, [r3], #4
 8006428:	459c      	cmp	ip, r3
 800642a:	f841 2f04 	str.w	r2, [r1, #4]!
 800642e:	d8f9      	bhi.n	8006424 <__lshift+0xc0>
 8006430:	e7ea      	b.n	8006408 <__lshift+0xa4>
 8006432:	bf00      	nop
 8006434:	080083b2 	.word	0x080083b2
 8006438:	080083c3 	.word	0x080083c3

0800643c <__mcmp>:
 800643c:	4603      	mov	r3, r0
 800643e:	690a      	ldr	r2, [r1, #16]
 8006440:	6900      	ldr	r0, [r0, #16]
 8006442:	b530      	push	{r4, r5, lr}
 8006444:	1a80      	subs	r0, r0, r2
 8006446:	d10d      	bne.n	8006464 <__mcmp+0x28>
 8006448:	3314      	adds	r3, #20
 800644a:	3114      	adds	r1, #20
 800644c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006450:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006454:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006458:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800645c:	4295      	cmp	r5, r2
 800645e:	d002      	beq.n	8006466 <__mcmp+0x2a>
 8006460:	d304      	bcc.n	800646c <__mcmp+0x30>
 8006462:	2001      	movs	r0, #1
 8006464:	bd30      	pop	{r4, r5, pc}
 8006466:	42a3      	cmp	r3, r4
 8006468:	d3f4      	bcc.n	8006454 <__mcmp+0x18>
 800646a:	e7fb      	b.n	8006464 <__mcmp+0x28>
 800646c:	f04f 30ff 	mov.w	r0, #4294967295
 8006470:	e7f8      	b.n	8006464 <__mcmp+0x28>
	...

08006474 <__mdiff>:
 8006474:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006478:	460d      	mov	r5, r1
 800647a:	4607      	mov	r7, r0
 800647c:	4611      	mov	r1, r2
 800647e:	4628      	mov	r0, r5
 8006480:	4614      	mov	r4, r2
 8006482:	f7ff ffdb 	bl	800643c <__mcmp>
 8006486:	1e06      	subs	r6, r0, #0
 8006488:	d111      	bne.n	80064ae <__mdiff+0x3a>
 800648a:	4631      	mov	r1, r6
 800648c:	4638      	mov	r0, r7
 800648e:	f7ff fd5b 	bl	8005f48 <_Balloc>
 8006492:	4602      	mov	r2, r0
 8006494:	b928      	cbnz	r0, 80064a2 <__mdiff+0x2e>
 8006496:	f240 2137 	movw	r1, #567	; 0x237
 800649a:	4b3a      	ldr	r3, [pc, #232]	; (8006584 <__mdiff+0x110>)
 800649c:	483a      	ldr	r0, [pc, #232]	; (8006588 <__mdiff+0x114>)
 800649e:	f000 fb05 	bl	8006aac <__assert_func>
 80064a2:	2301      	movs	r3, #1
 80064a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80064a8:	4610      	mov	r0, r2
 80064aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ae:	bfa4      	itt	ge
 80064b0:	4623      	movge	r3, r4
 80064b2:	462c      	movge	r4, r5
 80064b4:	4638      	mov	r0, r7
 80064b6:	6861      	ldr	r1, [r4, #4]
 80064b8:	bfa6      	itte	ge
 80064ba:	461d      	movge	r5, r3
 80064bc:	2600      	movge	r6, #0
 80064be:	2601      	movlt	r6, #1
 80064c0:	f7ff fd42 	bl	8005f48 <_Balloc>
 80064c4:	4602      	mov	r2, r0
 80064c6:	b918      	cbnz	r0, 80064d0 <__mdiff+0x5c>
 80064c8:	f240 2145 	movw	r1, #581	; 0x245
 80064cc:	4b2d      	ldr	r3, [pc, #180]	; (8006584 <__mdiff+0x110>)
 80064ce:	e7e5      	b.n	800649c <__mdiff+0x28>
 80064d0:	f102 0814 	add.w	r8, r2, #20
 80064d4:	46c2      	mov	sl, r8
 80064d6:	f04f 0c00 	mov.w	ip, #0
 80064da:	6927      	ldr	r7, [r4, #16]
 80064dc:	60c6      	str	r6, [r0, #12]
 80064de:	692e      	ldr	r6, [r5, #16]
 80064e0:	f104 0014 	add.w	r0, r4, #20
 80064e4:	f105 0914 	add.w	r9, r5, #20
 80064e8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80064ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80064f0:	3410      	adds	r4, #16
 80064f2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80064f6:	f859 3b04 	ldr.w	r3, [r9], #4
 80064fa:	fa1f f18b 	uxth.w	r1, fp
 80064fe:	4461      	add	r1, ip
 8006500:	fa1f fc83 	uxth.w	ip, r3
 8006504:	0c1b      	lsrs	r3, r3, #16
 8006506:	eba1 010c 	sub.w	r1, r1, ip
 800650a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800650e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006512:	b289      	uxth	r1, r1
 8006514:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006518:	454e      	cmp	r6, r9
 800651a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800651e:	f84a 1b04 	str.w	r1, [sl], #4
 8006522:	d8e6      	bhi.n	80064f2 <__mdiff+0x7e>
 8006524:	1b73      	subs	r3, r6, r5
 8006526:	3b15      	subs	r3, #21
 8006528:	f023 0303 	bic.w	r3, r3, #3
 800652c:	3515      	adds	r5, #21
 800652e:	3304      	adds	r3, #4
 8006530:	42ae      	cmp	r6, r5
 8006532:	bf38      	it	cc
 8006534:	2304      	movcc	r3, #4
 8006536:	4418      	add	r0, r3
 8006538:	4443      	add	r3, r8
 800653a:	461e      	mov	r6, r3
 800653c:	4605      	mov	r5, r0
 800653e:	4575      	cmp	r5, lr
 8006540:	d30e      	bcc.n	8006560 <__mdiff+0xec>
 8006542:	f10e 0103 	add.w	r1, lr, #3
 8006546:	1a09      	subs	r1, r1, r0
 8006548:	f021 0103 	bic.w	r1, r1, #3
 800654c:	3803      	subs	r0, #3
 800654e:	4586      	cmp	lr, r0
 8006550:	bf38      	it	cc
 8006552:	2100      	movcc	r1, #0
 8006554:	440b      	add	r3, r1
 8006556:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800655a:	b189      	cbz	r1, 8006580 <__mdiff+0x10c>
 800655c:	6117      	str	r7, [r2, #16]
 800655e:	e7a3      	b.n	80064a8 <__mdiff+0x34>
 8006560:	f855 8b04 	ldr.w	r8, [r5], #4
 8006564:	fa1f f188 	uxth.w	r1, r8
 8006568:	4461      	add	r1, ip
 800656a:	140c      	asrs	r4, r1, #16
 800656c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006570:	b289      	uxth	r1, r1
 8006572:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006576:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800657a:	f846 1b04 	str.w	r1, [r6], #4
 800657e:	e7de      	b.n	800653e <__mdiff+0xca>
 8006580:	3f01      	subs	r7, #1
 8006582:	e7e8      	b.n	8006556 <__mdiff+0xe2>
 8006584:	080083b2 	.word	0x080083b2
 8006588:	080083c3 	.word	0x080083c3

0800658c <__d2b>:
 800658c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800658e:	2101      	movs	r1, #1
 8006590:	4617      	mov	r7, r2
 8006592:	461c      	mov	r4, r3
 8006594:	9e08      	ldr	r6, [sp, #32]
 8006596:	f7ff fcd7 	bl	8005f48 <_Balloc>
 800659a:	4605      	mov	r5, r0
 800659c:	b930      	cbnz	r0, 80065ac <__d2b+0x20>
 800659e:	4602      	mov	r2, r0
 80065a0:	f240 310f 	movw	r1, #783	; 0x30f
 80065a4:	4b22      	ldr	r3, [pc, #136]	; (8006630 <__d2b+0xa4>)
 80065a6:	4823      	ldr	r0, [pc, #140]	; (8006634 <__d2b+0xa8>)
 80065a8:	f000 fa80 	bl	8006aac <__assert_func>
 80065ac:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80065b0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80065b4:	bb24      	cbnz	r4, 8006600 <__d2b+0x74>
 80065b6:	2f00      	cmp	r7, #0
 80065b8:	9301      	str	r3, [sp, #4]
 80065ba:	d026      	beq.n	800660a <__d2b+0x7e>
 80065bc:	4668      	mov	r0, sp
 80065be:	9700      	str	r7, [sp, #0]
 80065c0:	f7ff fd8a 	bl	80060d8 <__lo0bits>
 80065c4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80065c8:	b1e8      	cbz	r0, 8006606 <__d2b+0x7a>
 80065ca:	f1c0 0320 	rsb	r3, r0, #32
 80065ce:	fa02 f303 	lsl.w	r3, r2, r3
 80065d2:	430b      	orrs	r3, r1
 80065d4:	40c2      	lsrs	r2, r0
 80065d6:	616b      	str	r3, [r5, #20]
 80065d8:	9201      	str	r2, [sp, #4]
 80065da:	9b01      	ldr	r3, [sp, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	bf14      	ite	ne
 80065e0:	2102      	movne	r1, #2
 80065e2:	2101      	moveq	r1, #1
 80065e4:	61ab      	str	r3, [r5, #24]
 80065e6:	6129      	str	r1, [r5, #16]
 80065e8:	b1bc      	cbz	r4, 800661a <__d2b+0x8e>
 80065ea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80065ee:	4404      	add	r4, r0
 80065f0:	6034      	str	r4, [r6, #0]
 80065f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80065f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f8:	6018      	str	r0, [r3, #0]
 80065fa:	4628      	mov	r0, r5
 80065fc:	b003      	add	sp, #12
 80065fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006604:	e7d7      	b.n	80065b6 <__d2b+0x2a>
 8006606:	6169      	str	r1, [r5, #20]
 8006608:	e7e7      	b.n	80065da <__d2b+0x4e>
 800660a:	a801      	add	r0, sp, #4
 800660c:	f7ff fd64 	bl	80060d8 <__lo0bits>
 8006610:	9b01      	ldr	r3, [sp, #4]
 8006612:	2101      	movs	r1, #1
 8006614:	616b      	str	r3, [r5, #20]
 8006616:	3020      	adds	r0, #32
 8006618:	e7e5      	b.n	80065e6 <__d2b+0x5a>
 800661a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800661e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006622:	6030      	str	r0, [r6, #0]
 8006624:	6918      	ldr	r0, [r3, #16]
 8006626:	f7ff fd37 	bl	8006098 <__hi0bits>
 800662a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800662e:	e7e2      	b.n	80065f6 <__d2b+0x6a>
 8006630:	080083b2 	.word	0x080083b2
 8006634:	080083c3 	.word	0x080083c3

08006638 <__ssputs_r>:
 8006638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800663c:	461f      	mov	r7, r3
 800663e:	688e      	ldr	r6, [r1, #8]
 8006640:	4682      	mov	sl, r0
 8006642:	42be      	cmp	r6, r7
 8006644:	460c      	mov	r4, r1
 8006646:	4690      	mov	r8, r2
 8006648:	680b      	ldr	r3, [r1, #0]
 800664a:	d82c      	bhi.n	80066a6 <__ssputs_r+0x6e>
 800664c:	898a      	ldrh	r2, [r1, #12]
 800664e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006652:	d026      	beq.n	80066a2 <__ssputs_r+0x6a>
 8006654:	6965      	ldr	r5, [r4, #20]
 8006656:	6909      	ldr	r1, [r1, #16]
 8006658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800665c:	eba3 0901 	sub.w	r9, r3, r1
 8006660:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006664:	1c7b      	adds	r3, r7, #1
 8006666:	444b      	add	r3, r9
 8006668:	106d      	asrs	r5, r5, #1
 800666a:	429d      	cmp	r5, r3
 800666c:	bf38      	it	cc
 800666e:	461d      	movcc	r5, r3
 8006670:	0553      	lsls	r3, r2, #21
 8006672:	d527      	bpl.n	80066c4 <__ssputs_r+0x8c>
 8006674:	4629      	mov	r1, r5
 8006676:	f7ff fbdb 	bl	8005e30 <_malloc_r>
 800667a:	4606      	mov	r6, r0
 800667c:	b360      	cbz	r0, 80066d8 <__ssputs_r+0xa0>
 800667e:	464a      	mov	r2, r9
 8006680:	6921      	ldr	r1, [r4, #16]
 8006682:	f000 fa05 	bl	8006a90 <memcpy>
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800668c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006690:	81a3      	strh	r3, [r4, #12]
 8006692:	6126      	str	r6, [r4, #16]
 8006694:	444e      	add	r6, r9
 8006696:	6026      	str	r6, [r4, #0]
 8006698:	463e      	mov	r6, r7
 800669a:	6165      	str	r5, [r4, #20]
 800669c:	eba5 0509 	sub.w	r5, r5, r9
 80066a0:	60a5      	str	r5, [r4, #8]
 80066a2:	42be      	cmp	r6, r7
 80066a4:	d900      	bls.n	80066a8 <__ssputs_r+0x70>
 80066a6:	463e      	mov	r6, r7
 80066a8:	4632      	mov	r2, r6
 80066aa:	4641      	mov	r1, r8
 80066ac:	6820      	ldr	r0, [r4, #0]
 80066ae:	f000 f9c5 	bl	8006a3c <memmove>
 80066b2:	2000      	movs	r0, #0
 80066b4:	68a3      	ldr	r3, [r4, #8]
 80066b6:	1b9b      	subs	r3, r3, r6
 80066b8:	60a3      	str	r3, [r4, #8]
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	4433      	add	r3, r6
 80066be:	6023      	str	r3, [r4, #0]
 80066c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066c4:	462a      	mov	r2, r5
 80066c6:	f000 fa35 	bl	8006b34 <_realloc_r>
 80066ca:	4606      	mov	r6, r0
 80066cc:	2800      	cmp	r0, #0
 80066ce:	d1e0      	bne.n	8006692 <__ssputs_r+0x5a>
 80066d0:	4650      	mov	r0, sl
 80066d2:	6921      	ldr	r1, [r4, #16]
 80066d4:	f7ff fb3c 	bl	8005d50 <_free_r>
 80066d8:	230c      	movs	r3, #12
 80066da:	f8ca 3000 	str.w	r3, [sl]
 80066de:	89a3      	ldrh	r3, [r4, #12]
 80066e0:	f04f 30ff 	mov.w	r0, #4294967295
 80066e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e8:	81a3      	strh	r3, [r4, #12]
 80066ea:	e7e9      	b.n	80066c0 <__ssputs_r+0x88>

080066ec <_svfiprintf_r>:
 80066ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f0:	4698      	mov	r8, r3
 80066f2:	898b      	ldrh	r3, [r1, #12]
 80066f4:	4607      	mov	r7, r0
 80066f6:	061b      	lsls	r3, r3, #24
 80066f8:	460d      	mov	r5, r1
 80066fa:	4614      	mov	r4, r2
 80066fc:	b09d      	sub	sp, #116	; 0x74
 80066fe:	d50e      	bpl.n	800671e <_svfiprintf_r+0x32>
 8006700:	690b      	ldr	r3, [r1, #16]
 8006702:	b963      	cbnz	r3, 800671e <_svfiprintf_r+0x32>
 8006704:	2140      	movs	r1, #64	; 0x40
 8006706:	f7ff fb93 	bl	8005e30 <_malloc_r>
 800670a:	6028      	str	r0, [r5, #0]
 800670c:	6128      	str	r0, [r5, #16]
 800670e:	b920      	cbnz	r0, 800671a <_svfiprintf_r+0x2e>
 8006710:	230c      	movs	r3, #12
 8006712:	603b      	str	r3, [r7, #0]
 8006714:	f04f 30ff 	mov.w	r0, #4294967295
 8006718:	e0d0      	b.n	80068bc <_svfiprintf_r+0x1d0>
 800671a:	2340      	movs	r3, #64	; 0x40
 800671c:	616b      	str	r3, [r5, #20]
 800671e:	2300      	movs	r3, #0
 8006720:	9309      	str	r3, [sp, #36]	; 0x24
 8006722:	2320      	movs	r3, #32
 8006724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006728:	2330      	movs	r3, #48	; 0x30
 800672a:	f04f 0901 	mov.w	r9, #1
 800672e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006732:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80068d4 <_svfiprintf_r+0x1e8>
 8006736:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800673a:	4623      	mov	r3, r4
 800673c:	469a      	mov	sl, r3
 800673e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006742:	b10a      	cbz	r2, 8006748 <_svfiprintf_r+0x5c>
 8006744:	2a25      	cmp	r2, #37	; 0x25
 8006746:	d1f9      	bne.n	800673c <_svfiprintf_r+0x50>
 8006748:	ebba 0b04 	subs.w	fp, sl, r4
 800674c:	d00b      	beq.n	8006766 <_svfiprintf_r+0x7a>
 800674e:	465b      	mov	r3, fp
 8006750:	4622      	mov	r2, r4
 8006752:	4629      	mov	r1, r5
 8006754:	4638      	mov	r0, r7
 8006756:	f7ff ff6f 	bl	8006638 <__ssputs_r>
 800675a:	3001      	adds	r0, #1
 800675c:	f000 80a9 	beq.w	80068b2 <_svfiprintf_r+0x1c6>
 8006760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006762:	445a      	add	r2, fp
 8006764:	9209      	str	r2, [sp, #36]	; 0x24
 8006766:	f89a 3000 	ldrb.w	r3, [sl]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 80a1 	beq.w	80068b2 <_svfiprintf_r+0x1c6>
 8006770:	2300      	movs	r3, #0
 8006772:	f04f 32ff 	mov.w	r2, #4294967295
 8006776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800677a:	f10a 0a01 	add.w	sl, sl, #1
 800677e:	9304      	str	r3, [sp, #16]
 8006780:	9307      	str	r3, [sp, #28]
 8006782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006786:	931a      	str	r3, [sp, #104]	; 0x68
 8006788:	4654      	mov	r4, sl
 800678a:	2205      	movs	r2, #5
 800678c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006790:	4850      	ldr	r0, [pc, #320]	; (80068d4 <_svfiprintf_r+0x1e8>)
 8006792:	f7fe fc5f 	bl	8005054 <memchr>
 8006796:	9a04      	ldr	r2, [sp, #16]
 8006798:	b9d8      	cbnz	r0, 80067d2 <_svfiprintf_r+0xe6>
 800679a:	06d0      	lsls	r0, r2, #27
 800679c:	bf44      	itt	mi
 800679e:	2320      	movmi	r3, #32
 80067a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067a4:	0711      	lsls	r1, r2, #28
 80067a6:	bf44      	itt	mi
 80067a8:	232b      	movmi	r3, #43	; 0x2b
 80067aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067ae:	f89a 3000 	ldrb.w	r3, [sl]
 80067b2:	2b2a      	cmp	r3, #42	; 0x2a
 80067b4:	d015      	beq.n	80067e2 <_svfiprintf_r+0xf6>
 80067b6:	4654      	mov	r4, sl
 80067b8:	2000      	movs	r0, #0
 80067ba:	f04f 0c0a 	mov.w	ip, #10
 80067be:	9a07      	ldr	r2, [sp, #28]
 80067c0:	4621      	mov	r1, r4
 80067c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067c6:	3b30      	subs	r3, #48	; 0x30
 80067c8:	2b09      	cmp	r3, #9
 80067ca:	d94d      	bls.n	8006868 <_svfiprintf_r+0x17c>
 80067cc:	b1b0      	cbz	r0, 80067fc <_svfiprintf_r+0x110>
 80067ce:	9207      	str	r2, [sp, #28]
 80067d0:	e014      	b.n	80067fc <_svfiprintf_r+0x110>
 80067d2:	eba0 0308 	sub.w	r3, r0, r8
 80067d6:	fa09 f303 	lsl.w	r3, r9, r3
 80067da:	4313      	orrs	r3, r2
 80067dc:	46a2      	mov	sl, r4
 80067de:	9304      	str	r3, [sp, #16]
 80067e0:	e7d2      	b.n	8006788 <_svfiprintf_r+0x9c>
 80067e2:	9b03      	ldr	r3, [sp, #12]
 80067e4:	1d19      	adds	r1, r3, #4
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	9103      	str	r1, [sp, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	bfbb      	ittet	lt
 80067ee:	425b      	neglt	r3, r3
 80067f0:	f042 0202 	orrlt.w	r2, r2, #2
 80067f4:	9307      	strge	r3, [sp, #28]
 80067f6:	9307      	strlt	r3, [sp, #28]
 80067f8:	bfb8      	it	lt
 80067fa:	9204      	strlt	r2, [sp, #16]
 80067fc:	7823      	ldrb	r3, [r4, #0]
 80067fe:	2b2e      	cmp	r3, #46	; 0x2e
 8006800:	d10c      	bne.n	800681c <_svfiprintf_r+0x130>
 8006802:	7863      	ldrb	r3, [r4, #1]
 8006804:	2b2a      	cmp	r3, #42	; 0x2a
 8006806:	d134      	bne.n	8006872 <_svfiprintf_r+0x186>
 8006808:	9b03      	ldr	r3, [sp, #12]
 800680a:	3402      	adds	r4, #2
 800680c:	1d1a      	adds	r2, r3, #4
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	9203      	str	r2, [sp, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	bfb8      	it	lt
 8006816:	f04f 33ff 	movlt.w	r3, #4294967295
 800681a:	9305      	str	r3, [sp, #20]
 800681c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80068d8 <_svfiprintf_r+0x1ec>
 8006820:	2203      	movs	r2, #3
 8006822:	4650      	mov	r0, sl
 8006824:	7821      	ldrb	r1, [r4, #0]
 8006826:	f7fe fc15 	bl	8005054 <memchr>
 800682a:	b138      	cbz	r0, 800683c <_svfiprintf_r+0x150>
 800682c:	2240      	movs	r2, #64	; 0x40
 800682e:	9b04      	ldr	r3, [sp, #16]
 8006830:	eba0 000a 	sub.w	r0, r0, sl
 8006834:	4082      	lsls	r2, r0
 8006836:	4313      	orrs	r3, r2
 8006838:	3401      	adds	r4, #1
 800683a:	9304      	str	r3, [sp, #16]
 800683c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006840:	2206      	movs	r2, #6
 8006842:	4826      	ldr	r0, [pc, #152]	; (80068dc <_svfiprintf_r+0x1f0>)
 8006844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006848:	f7fe fc04 	bl	8005054 <memchr>
 800684c:	2800      	cmp	r0, #0
 800684e:	d038      	beq.n	80068c2 <_svfiprintf_r+0x1d6>
 8006850:	4b23      	ldr	r3, [pc, #140]	; (80068e0 <_svfiprintf_r+0x1f4>)
 8006852:	bb1b      	cbnz	r3, 800689c <_svfiprintf_r+0x1b0>
 8006854:	9b03      	ldr	r3, [sp, #12]
 8006856:	3307      	adds	r3, #7
 8006858:	f023 0307 	bic.w	r3, r3, #7
 800685c:	3308      	adds	r3, #8
 800685e:	9303      	str	r3, [sp, #12]
 8006860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006862:	4433      	add	r3, r6
 8006864:	9309      	str	r3, [sp, #36]	; 0x24
 8006866:	e768      	b.n	800673a <_svfiprintf_r+0x4e>
 8006868:	460c      	mov	r4, r1
 800686a:	2001      	movs	r0, #1
 800686c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006870:	e7a6      	b.n	80067c0 <_svfiprintf_r+0xd4>
 8006872:	2300      	movs	r3, #0
 8006874:	f04f 0c0a 	mov.w	ip, #10
 8006878:	4619      	mov	r1, r3
 800687a:	3401      	adds	r4, #1
 800687c:	9305      	str	r3, [sp, #20]
 800687e:	4620      	mov	r0, r4
 8006880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006884:	3a30      	subs	r2, #48	; 0x30
 8006886:	2a09      	cmp	r2, #9
 8006888:	d903      	bls.n	8006892 <_svfiprintf_r+0x1a6>
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0c6      	beq.n	800681c <_svfiprintf_r+0x130>
 800688e:	9105      	str	r1, [sp, #20]
 8006890:	e7c4      	b.n	800681c <_svfiprintf_r+0x130>
 8006892:	4604      	mov	r4, r0
 8006894:	2301      	movs	r3, #1
 8006896:	fb0c 2101 	mla	r1, ip, r1, r2
 800689a:	e7f0      	b.n	800687e <_svfiprintf_r+0x192>
 800689c:	ab03      	add	r3, sp, #12
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	462a      	mov	r2, r5
 80068a2:	4638      	mov	r0, r7
 80068a4:	4b0f      	ldr	r3, [pc, #60]	; (80068e4 <_svfiprintf_r+0x1f8>)
 80068a6:	a904      	add	r1, sp, #16
 80068a8:	f7fd fe80 	bl	80045ac <_printf_float>
 80068ac:	1c42      	adds	r2, r0, #1
 80068ae:	4606      	mov	r6, r0
 80068b0:	d1d6      	bne.n	8006860 <_svfiprintf_r+0x174>
 80068b2:	89ab      	ldrh	r3, [r5, #12]
 80068b4:	065b      	lsls	r3, r3, #25
 80068b6:	f53f af2d 	bmi.w	8006714 <_svfiprintf_r+0x28>
 80068ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068bc:	b01d      	add	sp, #116	; 0x74
 80068be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c2:	ab03      	add	r3, sp, #12
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	462a      	mov	r2, r5
 80068c8:	4638      	mov	r0, r7
 80068ca:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <_svfiprintf_r+0x1f8>)
 80068cc:	a904      	add	r1, sp, #16
 80068ce:	f7fe f90d 	bl	8004aec <_printf_i>
 80068d2:	e7eb      	b.n	80068ac <_svfiprintf_r+0x1c0>
 80068d4:	0800851c 	.word	0x0800851c
 80068d8:	08008522 	.word	0x08008522
 80068dc:	08008526 	.word	0x08008526
 80068e0:	080045ad 	.word	0x080045ad
 80068e4:	08006639 	.word	0x08006639

080068e8 <__sflush_r>:
 80068e8:	898a      	ldrh	r2, [r1, #12]
 80068ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ec:	4605      	mov	r5, r0
 80068ee:	0710      	lsls	r0, r2, #28
 80068f0:	460c      	mov	r4, r1
 80068f2:	d457      	bmi.n	80069a4 <__sflush_r+0xbc>
 80068f4:	684b      	ldr	r3, [r1, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	dc04      	bgt.n	8006904 <__sflush_r+0x1c>
 80068fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	dc01      	bgt.n	8006904 <__sflush_r+0x1c>
 8006900:	2000      	movs	r0, #0
 8006902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006906:	2e00      	cmp	r6, #0
 8006908:	d0fa      	beq.n	8006900 <__sflush_r+0x18>
 800690a:	2300      	movs	r3, #0
 800690c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006910:	682f      	ldr	r7, [r5, #0]
 8006912:	6a21      	ldr	r1, [r4, #32]
 8006914:	602b      	str	r3, [r5, #0]
 8006916:	d032      	beq.n	800697e <__sflush_r+0x96>
 8006918:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800691a:	89a3      	ldrh	r3, [r4, #12]
 800691c:	075a      	lsls	r2, r3, #29
 800691e:	d505      	bpl.n	800692c <__sflush_r+0x44>
 8006920:	6863      	ldr	r3, [r4, #4]
 8006922:	1ac0      	subs	r0, r0, r3
 8006924:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006926:	b10b      	cbz	r3, 800692c <__sflush_r+0x44>
 8006928:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800692a:	1ac0      	subs	r0, r0, r3
 800692c:	2300      	movs	r3, #0
 800692e:	4602      	mov	r2, r0
 8006930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006932:	4628      	mov	r0, r5
 8006934:	6a21      	ldr	r1, [r4, #32]
 8006936:	47b0      	blx	r6
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	d106      	bne.n	800694c <__sflush_r+0x64>
 800693e:	6829      	ldr	r1, [r5, #0]
 8006940:	291d      	cmp	r1, #29
 8006942:	d82b      	bhi.n	800699c <__sflush_r+0xb4>
 8006944:	4a28      	ldr	r2, [pc, #160]	; (80069e8 <__sflush_r+0x100>)
 8006946:	410a      	asrs	r2, r1
 8006948:	07d6      	lsls	r6, r2, #31
 800694a:	d427      	bmi.n	800699c <__sflush_r+0xb4>
 800694c:	2200      	movs	r2, #0
 800694e:	6062      	str	r2, [r4, #4]
 8006950:	6922      	ldr	r2, [r4, #16]
 8006952:	04d9      	lsls	r1, r3, #19
 8006954:	6022      	str	r2, [r4, #0]
 8006956:	d504      	bpl.n	8006962 <__sflush_r+0x7a>
 8006958:	1c42      	adds	r2, r0, #1
 800695a:	d101      	bne.n	8006960 <__sflush_r+0x78>
 800695c:	682b      	ldr	r3, [r5, #0]
 800695e:	b903      	cbnz	r3, 8006962 <__sflush_r+0x7a>
 8006960:	6560      	str	r0, [r4, #84]	; 0x54
 8006962:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006964:	602f      	str	r7, [r5, #0]
 8006966:	2900      	cmp	r1, #0
 8006968:	d0ca      	beq.n	8006900 <__sflush_r+0x18>
 800696a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800696e:	4299      	cmp	r1, r3
 8006970:	d002      	beq.n	8006978 <__sflush_r+0x90>
 8006972:	4628      	mov	r0, r5
 8006974:	f7ff f9ec 	bl	8005d50 <_free_r>
 8006978:	2000      	movs	r0, #0
 800697a:	6360      	str	r0, [r4, #52]	; 0x34
 800697c:	e7c1      	b.n	8006902 <__sflush_r+0x1a>
 800697e:	2301      	movs	r3, #1
 8006980:	4628      	mov	r0, r5
 8006982:	47b0      	blx	r6
 8006984:	1c41      	adds	r1, r0, #1
 8006986:	d1c8      	bne.n	800691a <__sflush_r+0x32>
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0c5      	beq.n	800691a <__sflush_r+0x32>
 800698e:	2b1d      	cmp	r3, #29
 8006990:	d001      	beq.n	8006996 <__sflush_r+0xae>
 8006992:	2b16      	cmp	r3, #22
 8006994:	d101      	bne.n	800699a <__sflush_r+0xb2>
 8006996:	602f      	str	r7, [r5, #0]
 8006998:	e7b2      	b.n	8006900 <__sflush_r+0x18>
 800699a:	89a3      	ldrh	r3, [r4, #12]
 800699c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069a0:	81a3      	strh	r3, [r4, #12]
 80069a2:	e7ae      	b.n	8006902 <__sflush_r+0x1a>
 80069a4:	690f      	ldr	r7, [r1, #16]
 80069a6:	2f00      	cmp	r7, #0
 80069a8:	d0aa      	beq.n	8006900 <__sflush_r+0x18>
 80069aa:	0793      	lsls	r3, r2, #30
 80069ac:	bf18      	it	ne
 80069ae:	2300      	movne	r3, #0
 80069b0:	680e      	ldr	r6, [r1, #0]
 80069b2:	bf08      	it	eq
 80069b4:	694b      	ldreq	r3, [r1, #20]
 80069b6:	1bf6      	subs	r6, r6, r7
 80069b8:	600f      	str	r7, [r1, #0]
 80069ba:	608b      	str	r3, [r1, #8]
 80069bc:	2e00      	cmp	r6, #0
 80069be:	dd9f      	ble.n	8006900 <__sflush_r+0x18>
 80069c0:	4633      	mov	r3, r6
 80069c2:	463a      	mov	r2, r7
 80069c4:	4628      	mov	r0, r5
 80069c6:	6a21      	ldr	r1, [r4, #32]
 80069c8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80069cc:	47e0      	blx	ip
 80069ce:	2800      	cmp	r0, #0
 80069d0:	dc06      	bgt.n	80069e0 <__sflush_r+0xf8>
 80069d2:	89a3      	ldrh	r3, [r4, #12]
 80069d4:	f04f 30ff 	mov.w	r0, #4294967295
 80069d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069dc:	81a3      	strh	r3, [r4, #12]
 80069de:	e790      	b.n	8006902 <__sflush_r+0x1a>
 80069e0:	4407      	add	r7, r0
 80069e2:	1a36      	subs	r6, r6, r0
 80069e4:	e7ea      	b.n	80069bc <__sflush_r+0xd4>
 80069e6:	bf00      	nop
 80069e8:	dfbffffe 	.word	0xdfbffffe

080069ec <_fflush_r>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	690b      	ldr	r3, [r1, #16]
 80069f0:	4605      	mov	r5, r0
 80069f2:	460c      	mov	r4, r1
 80069f4:	b913      	cbnz	r3, 80069fc <_fflush_r+0x10>
 80069f6:	2500      	movs	r5, #0
 80069f8:	4628      	mov	r0, r5
 80069fa:	bd38      	pop	{r3, r4, r5, pc}
 80069fc:	b118      	cbz	r0, 8006a06 <_fflush_r+0x1a>
 80069fe:	6a03      	ldr	r3, [r0, #32]
 8006a00:	b90b      	cbnz	r3, 8006a06 <_fflush_r+0x1a>
 8006a02:	f7fe fa0f 	bl	8004e24 <__sinit>
 8006a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0f3      	beq.n	80069f6 <_fflush_r+0xa>
 8006a0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a10:	07d0      	lsls	r0, r2, #31
 8006a12:	d404      	bmi.n	8006a1e <_fflush_r+0x32>
 8006a14:	0599      	lsls	r1, r3, #22
 8006a16:	d402      	bmi.n	8006a1e <_fflush_r+0x32>
 8006a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a1a:	f7fe fb19 	bl	8005050 <__retarget_lock_acquire_recursive>
 8006a1e:	4628      	mov	r0, r5
 8006a20:	4621      	mov	r1, r4
 8006a22:	f7ff ff61 	bl	80068e8 <__sflush_r>
 8006a26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a28:	4605      	mov	r5, r0
 8006a2a:	07da      	lsls	r2, r3, #31
 8006a2c:	d4e4      	bmi.n	80069f8 <_fflush_r+0xc>
 8006a2e:	89a3      	ldrh	r3, [r4, #12]
 8006a30:	059b      	lsls	r3, r3, #22
 8006a32:	d4e1      	bmi.n	80069f8 <_fflush_r+0xc>
 8006a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a36:	f7fe fb0c 	bl	8005052 <__retarget_lock_release_recursive>
 8006a3a:	e7dd      	b.n	80069f8 <_fflush_r+0xc>

08006a3c <memmove>:
 8006a3c:	4288      	cmp	r0, r1
 8006a3e:	b510      	push	{r4, lr}
 8006a40:	eb01 0402 	add.w	r4, r1, r2
 8006a44:	d902      	bls.n	8006a4c <memmove+0x10>
 8006a46:	4284      	cmp	r4, r0
 8006a48:	4623      	mov	r3, r4
 8006a4a:	d807      	bhi.n	8006a5c <memmove+0x20>
 8006a4c:	1e43      	subs	r3, r0, #1
 8006a4e:	42a1      	cmp	r1, r4
 8006a50:	d008      	beq.n	8006a64 <memmove+0x28>
 8006a52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a5a:	e7f8      	b.n	8006a4e <memmove+0x12>
 8006a5c:	4601      	mov	r1, r0
 8006a5e:	4402      	add	r2, r0
 8006a60:	428a      	cmp	r2, r1
 8006a62:	d100      	bne.n	8006a66 <memmove+0x2a>
 8006a64:	bd10      	pop	{r4, pc}
 8006a66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a6e:	e7f7      	b.n	8006a60 <memmove+0x24>

08006a70 <_sbrk_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	2300      	movs	r3, #0
 8006a74:	4d05      	ldr	r5, [pc, #20]	; (8006a8c <_sbrk_r+0x1c>)
 8006a76:	4604      	mov	r4, r0
 8006a78:	4608      	mov	r0, r1
 8006a7a:	602b      	str	r3, [r5, #0]
 8006a7c:	f7fb fa7a 	bl	8001f74 <_sbrk>
 8006a80:	1c43      	adds	r3, r0, #1
 8006a82:	d102      	bne.n	8006a8a <_sbrk_r+0x1a>
 8006a84:	682b      	ldr	r3, [r5, #0]
 8006a86:	b103      	cbz	r3, 8006a8a <_sbrk_r+0x1a>
 8006a88:	6023      	str	r3, [r4, #0]
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}
 8006a8c:	20000878 	.word	0x20000878

08006a90 <memcpy>:
 8006a90:	440a      	add	r2, r1
 8006a92:	4291      	cmp	r1, r2
 8006a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a98:	d100      	bne.n	8006a9c <memcpy+0xc>
 8006a9a:	4770      	bx	lr
 8006a9c:	b510      	push	{r4, lr}
 8006a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aa2:	4291      	cmp	r1, r2
 8006aa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aa8:	d1f9      	bne.n	8006a9e <memcpy+0xe>
 8006aaa:	bd10      	pop	{r4, pc}

08006aac <__assert_func>:
 8006aac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006aae:	4614      	mov	r4, r2
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	4b09      	ldr	r3, [pc, #36]	; (8006ad8 <__assert_func+0x2c>)
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68d8      	ldr	r0, [r3, #12]
 8006aba:	b14c      	cbz	r4, 8006ad0 <__assert_func+0x24>
 8006abc:	4b07      	ldr	r3, [pc, #28]	; (8006adc <__assert_func+0x30>)
 8006abe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ac2:	9100      	str	r1, [sp, #0]
 8006ac4:	462b      	mov	r3, r5
 8006ac6:	4906      	ldr	r1, [pc, #24]	; (8006ae0 <__assert_func+0x34>)
 8006ac8:	f000 f870 	bl	8006bac <fiprintf>
 8006acc:	f000 f880 	bl	8006bd0 <abort>
 8006ad0:	4b04      	ldr	r3, [pc, #16]	; (8006ae4 <__assert_func+0x38>)
 8006ad2:	461c      	mov	r4, r3
 8006ad4:	e7f3      	b.n	8006abe <__assert_func+0x12>
 8006ad6:	bf00      	nop
 8006ad8:	20000064 	.word	0x20000064
 8006adc:	08008537 	.word	0x08008537
 8006ae0:	08008544 	.word	0x08008544
 8006ae4:	08008572 	.word	0x08008572

08006ae8 <_calloc_r>:
 8006ae8:	b570      	push	{r4, r5, r6, lr}
 8006aea:	fba1 5402 	umull	r5, r4, r1, r2
 8006aee:	b934      	cbnz	r4, 8006afe <_calloc_r+0x16>
 8006af0:	4629      	mov	r1, r5
 8006af2:	f7ff f99d 	bl	8005e30 <_malloc_r>
 8006af6:	4606      	mov	r6, r0
 8006af8:	b928      	cbnz	r0, 8006b06 <_calloc_r+0x1e>
 8006afa:	4630      	mov	r0, r6
 8006afc:	bd70      	pop	{r4, r5, r6, pc}
 8006afe:	220c      	movs	r2, #12
 8006b00:	2600      	movs	r6, #0
 8006b02:	6002      	str	r2, [r0, #0]
 8006b04:	e7f9      	b.n	8006afa <_calloc_r+0x12>
 8006b06:	462a      	mov	r2, r5
 8006b08:	4621      	mov	r1, r4
 8006b0a:	f7fe fa24 	bl	8004f56 <memset>
 8006b0e:	e7f4      	b.n	8006afa <_calloc_r+0x12>

08006b10 <__ascii_mbtowc>:
 8006b10:	b082      	sub	sp, #8
 8006b12:	b901      	cbnz	r1, 8006b16 <__ascii_mbtowc+0x6>
 8006b14:	a901      	add	r1, sp, #4
 8006b16:	b142      	cbz	r2, 8006b2a <__ascii_mbtowc+0x1a>
 8006b18:	b14b      	cbz	r3, 8006b2e <__ascii_mbtowc+0x1e>
 8006b1a:	7813      	ldrb	r3, [r2, #0]
 8006b1c:	600b      	str	r3, [r1, #0]
 8006b1e:	7812      	ldrb	r2, [r2, #0]
 8006b20:	1e10      	subs	r0, r2, #0
 8006b22:	bf18      	it	ne
 8006b24:	2001      	movne	r0, #1
 8006b26:	b002      	add	sp, #8
 8006b28:	4770      	bx	lr
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	e7fb      	b.n	8006b26 <__ascii_mbtowc+0x16>
 8006b2e:	f06f 0001 	mvn.w	r0, #1
 8006b32:	e7f8      	b.n	8006b26 <__ascii_mbtowc+0x16>

08006b34 <_realloc_r>:
 8006b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b38:	4680      	mov	r8, r0
 8006b3a:	4614      	mov	r4, r2
 8006b3c:	460e      	mov	r6, r1
 8006b3e:	b921      	cbnz	r1, 8006b4a <_realloc_r+0x16>
 8006b40:	4611      	mov	r1, r2
 8006b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b46:	f7ff b973 	b.w	8005e30 <_malloc_r>
 8006b4a:	b92a      	cbnz	r2, 8006b58 <_realloc_r+0x24>
 8006b4c:	f7ff f900 	bl	8005d50 <_free_r>
 8006b50:	4625      	mov	r5, r4
 8006b52:	4628      	mov	r0, r5
 8006b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b58:	f000 f841 	bl	8006bde <_malloc_usable_size_r>
 8006b5c:	4284      	cmp	r4, r0
 8006b5e:	4607      	mov	r7, r0
 8006b60:	d802      	bhi.n	8006b68 <_realloc_r+0x34>
 8006b62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b66:	d812      	bhi.n	8006b8e <_realloc_r+0x5a>
 8006b68:	4621      	mov	r1, r4
 8006b6a:	4640      	mov	r0, r8
 8006b6c:	f7ff f960 	bl	8005e30 <_malloc_r>
 8006b70:	4605      	mov	r5, r0
 8006b72:	2800      	cmp	r0, #0
 8006b74:	d0ed      	beq.n	8006b52 <_realloc_r+0x1e>
 8006b76:	42bc      	cmp	r4, r7
 8006b78:	4622      	mov	r2, r4
 8006b7a:	4631      	mov	r1, r6
 8006b7c:	bf28      	it	cs
 8006b7e:	463a      	movcs	r2, r7
 8006b80:	f7ff ff86 	bl	8006a90 <memcpy>
 8006b84:	4631      	mov	r1, r6
 8006b86:	4640      	mov	r0, r8
 8006b88:	f7ff f8e2 	bl	8005d50 <_free_r>
 8006b8c:	e7e1      	b.n	8006b52 <_realloc_r+0x1e>
 8006b8e:	4635      	mov	r5, r6
 8006b90:	e7df      	b.n	8006b52 <_realloc_r+0x1e>

08006b92 <__ascii_wctomb>:
 8006b92:	4603      	mov	r3, r0
 8006b94:	4608      	mov	r0, r1
 8006b96:	b141      	cbz	r1, 8006baa <__ascii_wctomb+0x18>
 8006b98:	2aff      	cmp	r2, #255	; 0xff
 8006b9a:	d904      	bls.n	8006ba6 <__ascii_wctomb+0x14>
 8006b9c:	228a      	movs	r2, #138	; 0x8a
 8006b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	4770      	bx	lr
 8006ba6:	2001      	movs	r0, #1
 8006ba8:	700a      	strb	r2, [r1, #0]
 8006baa:	4770      	bx	lr

08006bac <fiprintf>:
 8006bac:	b40e      	push	{r1, r2, r3}
 8006bae:	b503      	push	{r0, r1, lr}
 8006bb0:	4601      	mov	r1, r0
 8006bb2:	ab03      	add	r3, sp, #12
 8006bb4:	4805      	ldr	r0, [pc, #20]	; (8006bcc <fiprintf+0x20>)
 8006bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bba:	6800      	ldr	r0, [r0, #0]
 8006bbc:	9301      	str	r3, [sp, #4]
 8006bbe:	f000 f83d 	bl	8006c3c <_vfiprintf_r>
 8006bc2:	b002      	add	sp, #8
 8006bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bc8:	b003      	add	sp, #12
 8006bca:	4770      	bx	lr
 8006bcc:	20000064 	.word	0x20000064

08006bd0 <abort>:
 8006bd0:	2006      	movs	r0, #6
 8006bd2:	b508      	push	{r3, lr}
 8006bd4:	f000 fa0a 	bl	8006fec <raise>
 8006bd8:	2001      	movs	r0, #1
 8006bda:	f7fb f958 	bl	8001e8e <_exit>

08006bde <_malloc_usable_size_r>:
 8006bde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006be2:	1f18      	subs	r0, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	bfbc      	itt	lt
 8006be8:	580b      	ldrlt	r3, [r1, r0]
 8006bea:	18c0      	addlt	r0, r0, r3
 8006bec:	4770      	bx	lr

08006bee <__sfputc_r>:
 8006bee:	6893      	ldr	r3, [r2, #8]
 8006bf0:	b410      	push	{r4}
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	6093      	str	r3, [r2, #8]
 8006bf8:	da07      	bge.n	8006c0a <__sfputc_r+0x1c>
 8006bfa:	6994      	ldr	r4, [r2, #24]
 8006bfc:	42a3      	cmp	r3, r4
 8006bfe:	db01      	blt.n	8006c04 <__sfputc_r+0x16>
 8006c00:	290a      	cmp	r1, #10
 8006c02:	d102      	bne.n	8006c0a <__sfputc_r+0x1c>
 8006c04:	bc10      	pop	{r4}
 8006c06:	f000 b933 	b.w	8006e70 <__swbuf_r>
 8006c0a:	6813      	ldr	r3, [r2, #0]
 8006c0c:	1c58      	adds	r0, r3, #1
 8006c0e:	6010      	str	r0, [r2, #0]
 8006c10:	7019      	strb	r1, [r3, #0]
 8006c12:	4608      	mov	r0, r1
 8006c14:	bc10      	pop	{r4}
 8006c16:	4770      	bx	lr

08006c18 <__sfputs_r>:
 8006c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1a:	4606      	mov	r6, r0
 8006c1c:	460f      	mov	r7, r1
 8006c1e:	4614      	mov	r4, r2
 8006c20:	18d5      	adds	r5, r2, r3
 8006c22:	42ac      	cmp	r4, r5
 8006c24:	d101      	bne.n	8006c2a <__sfputs_r+0x12>
 8006c26:	2000      	movs	r0, #0
 8006c28:	e007      	b.n	8006c3a <__sfputs_r+0x22>
 8006c2a:	463a      	mov	r2, r7
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c32:	f7ff ffdc 	bl	8006bee <__sfputc_r>
 8006c36:	1c43      	adds	r3, r0, #1
 8006c38:	d1f3      	bne.n	8006c22 <__sfputs_r+0xa>
 8006c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006c3c <_vfiprintf_r>:
 8006c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c40:	460d      	mov	r5, r1
 8006c42:	4614      	mov	r4, r2
 8006c44:	4698      	mov	r8, r3
 8006c46:	4606      	mov	r6, r0
 8006c48:	b09d      	sub	sp, #116	; 0x74
 8006c4a:	b118      	cbz	r0, 8006c54 <_vfiprintf_r+0x18>
 8006c4c:	6a03      	ldr	r3, [r0, #32]
 8006c4e:	b90b      	cbnz	r3, 8006c54 <_vfiprintf_r+0x18>
 8006c50:	f7fe f8e8 	bl	8004e24 <__sinit>
 8006c54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c56:	07d9      	lsls	r1, r3, #31
 8006c58:	d405      	bmi.n	8006c66 <_vfiprintf_r+0x2a>
 8006c5a:	89ab      	ldrh	r3, [r5, #12]
 8006c5c:	059a      	lsls	r2, r3, #22
 8006c5e:	d402      	bmi.n	8006c66 <_vfiprintf_r+0x2a>
 8006c60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c62:	f7fe f9f5 	bl	8005050 <__retarget_lock_acquire_recursive>
 8006c66:	89ab      	ldrh	r3, [r5, #12]
 8006c68:	071b      	lsls	r3, r3, #28
 8006c6a:	d501      	bpl.n	8006c70 <_vfiprintf_r+0x34>
 8006c6c:	692b      	ldr	r3, [r5, #16]
 8006c6e:	b99b      	cbnz	r3, 8006c98 <_vfiprintf_r+0x5c>
 8006c70:	4629      	mov	r1, r5
 8006c72:	4630      	mov	r0, r6
 8006c74:	f000 f93a 	bl	8006eec <__swsetup_r>
 8006c78:	b170      	cbz	r0, 8006c98 <_vfiprintf_r+0x5c>
 8006c7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c7c:	07dc      	lsls	r4, r3, #31
 8006c7e:	d504      	bpl.n	8006c8a <_vfiprintf_r+0x4e>
 8006c80:	f04f 30ff 	mov.w	r0, #4294967295
 8006c84:	b01d      	add	sp, #116	; 0x74
 8006c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c8a:	89ab      	ldrh	r3, [r5, #12]
 8006c8c:	0598      	lsls	r0, r3, #22
 8006c8e:	d4f7      	bmi.n	8006c80 <_vfiprintf_r+0x44>
 8006c90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c92:	f7fe f9de 	bl	8005052 <__retarget_lock_release_recursive>
 8006c96:	e7f3      	b.n	8006c80 <_vfiprintf_r+0x44>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c9c:	2320      	movs	r3, #32
 8006c9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ca2:	2330      	movs	r3, #48	; 0x30
 8006ca4:	f04f 0901 	mov.w	r9, #1
 8006ca8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cac:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006e5c <_vfiprintf_r+0x220>
 8006cb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cb4:	4623      	mov	r3, r4
 8006cb6:	469a      	mov	sl, r3
 8006cb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cbc:	b10a      	cbz	r2, 8006cc2 <_vfiprintf_r+0x86>
 8006cbe:	2a25      	cmp	r2, #37	; 0x25
 8006cc0:	d1f9      	bne.n	8006cb6 <_vfiprintf_r+0x7a>
 8006cc2:	ebba 0b04 	subs.w	fp, sl, r4
 8006cc6:	d00b      	beq.n	8006ce0 <_vfiprintf_r+0xa4>
 8006cc8:	465b      	mov	r3, fp
 8006cca:	4622      	mov	r2, r4
 8006ccc:	4629      	mov	r1, r5
 8006cce:	4630      	mov	r0, r6
 8006cd0:	f7ff ffa2 	bl	8006c18 <__sfputs_r>
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	f000 80a9 	beq.w	8006e2c <_vfiprintf_r+0x1f0>
 8006cda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cdc:	445a      	add	r2, fp
 8006cde:	9209      	str	r2, [sp, #36]	; 0x24
 8006ce0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 80a1 	beq.w	8006e2c <_vfiprintf_r+0x1f0>
 8006cea:	2300      	movs	r3, #0
 8006cec:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cf4:	f10a 0a01 	add.w	sl, sl, #1
 8006cf8:	9304      	str	r3, [sp, #16]
 8006cfa:	9307      	str	r3, [sp, #28]
 8006cfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d00:	931a      	str	r3, [sp, #104]	; 0x68
 8006d02:	4654      	mov	r4, sl
 8006d04:	2205      	movs	r2, #5
 8006d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d0a:	4854      	ldr	r0, [pc, #336]	; (8006e5c <_vfiprintf_r+0x220>)
 8006d0c:	f7fe f9a2 	bl	8005054 <memchr>
 8006d10:	9a04      	ldr	r2, [sp, #16]
 8006d12:	b9d8      	cbnz	r0, 8006d4c <_vfiprintf_r+0x110>
 8006d14:	06d1      	lsls	r1, r2, #27
 8006d16:	bf44      	itt	mi
 8006d18:	2320      	movmi	r3, #32
 8006d1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d1e:	0713      	lsls	r3, r2, #28
 8006d20:	bf44      	itt	mi
 8006d22:	232b      	movmi	r3, #43	; 0x2b
 8006d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d28:	f89a 3000 	ldrb.w	r3, [sl]
 8006d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d2e:	d015      	beq.n	8006d5c <_vfiprintf_r+0x120>
 8006d30:	4654      	mov	r4, sl
 8006d32:	2000      	movs	r0, #0
 8006d34:	f04f 0c0a 	mov.w	ip, #10
 8006d38:	9a07      	ldr	r2, [sp, #28]
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d40:	3b30      	subs	r3, #48	; 0x30
 8006d42:	2b09      	cmp	r3, #9
 8006d44:	d94d      	bls.n	8006de2 <_vfiprintf_r+0x1a6>
 8006d46:	b1b0      	cbz	r0, 8006d76 <_vfiprintf_r+0x13a>
 8006d48:	9207      	str	r2, [sp, #28]
 8006d4a:	e014      	b.n	8006d76 <_vfiprintf_r+0x13a>
 8006d4c:	eba0 0308 	sub.w	r3, r0, r8
 8006d50:	fa09 f303 	lsl.w	r3, r9, r3
 8006d54:	4313      	orrs	r3, r2
 8006d56:	46a2      	mov	sl, r4
 8006d58:	9304      	str	r3, [sp, #16]
 8006d5a:	e7d2      	b.n	8006d02 <_vfiprintf_r+0xc6>
 8006d5c:	9b03      	ldr	r3, [sp, #12]
 8006d5e:	1d19      	adds	r1, r3, #4
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	9103      	str	r1, [sp, #12]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	bfbb      	ittet	lt
 8006d68:	425b      	neglt	r3, r3
 8006d6a:	f042 0202 	orrlt.w	r2, r2, #2
 8006d6e:	9307      	strge	r3, [sp, #28]
 8006d70:	9307      	strlt	r3, [sp, #28]
 8006d72:	bfb8      	it	lt
 8006d74:	9204      	strlt	r2, [sp, #16]
 8006d76:	7823      	ldrb	r3, [r4, #0]
 8006d78:	2b2e      	cmp	r3, #46	; 0x2e
 8006d7a:	d10c      	bne.n	8006d96 <_vfiprintf_r+0x15a>
 8006d7c:	7863      	ldrb	r3, [r4, #1]
 8006d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8006d80:	d134      	bne.n	8006dec <_vfiprintf_r+0x1b0>
 8006d82:	9b03      	ldr	r3, [sp, #12]
 8006d84:	3402      	adds	r4, #2
 8006d86:	1d1a      	adds	r2, r3, #4
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	9203      	str	r2, [sp, #12]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	bfb8      	it	lt
 8006d90:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d94:	9305      	str	r3, [sp, #20]
 8006d96:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e60 <_vfiprintf_r+0x224>
 8006d9a:	2203      	movs	r2, #3
 8006d9c:	4650      	mov	r0, sl
 8006d9e:	7821      	ldrb	r1, [r4, #0]
 8006da0:	f7fe f958 	bl	8005054 <memchr>
 8006da4:	b138      	cbz	r0, 8006db6 <_vfiprintf_r+0x17a>
 8006da6:	2240      	movs	r2, #64	; 0x40
 8006da8:	9b04      	ldr	r3, [sp, #16]
 8006daa:	eba0 000a 	sub.w	r0, r0, sl
 8006dae:	4082      	lsls	r2, r0
 8006db0:	4313      	orrs	r3, r2
 8006db2:	3401      	adds	r4, #1
 8006db4:	9304      	str	r3, [sp, #16]
 8006db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dba:	2206      	movs	r2, #6
 8006dbc:	4829      	ldr	r0, [pc, #164]	; (8006e64 <_vfiprintf_r+0x228>)
 8006dbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dc2:	f7fe f947 	bl	8005054 <memchr>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d03f      	beq.n	8006e4a <_vfiprintf_r+0x20e>
 8006dca:	4b27      	ldr	r3, [pc, #156]	; (8006e68 <_vfiprintf_r+0x22c>)
 8006dcc:	bb1b      	cbnz	r3, 8006e16 <_vfiprintf_r+0x1da>
 8006dce:	9b03      	ldr	r3, [sp, #12]
 8006dd0:	3307      	adds	r3, #7
 8006dd2:	f023 0307 	bic.w	r3, r3, #7
 8006dd6:	3308      	adds	r3, #8
 8006dd8:	9303      	str	r3, [sp, #12]
 8006dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ddc:	443b      	add	r3, r7
 8006dde:	9309      	str	r3, [sp, #36]	; 0x24
 8006de0:	e768      	b.n	8006cb4 <_vfiprintf_r+0x78>
 8006de2:	460c      	mov	r4, r1
 8006de4:	2001      	movs	r0, #1
 8006de6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dea:	e7a6      	b.n	8006d3a <_vfiprintf_r+0xfe>
 8006dec:	2300      	movs	r3, #0
 8006dee:	f04f 0c0a 	mov.w	ip, #10
 8006df2:	4619      	mov	r1, r3
 8006df4:	3401      	adds	r4, #1
 8006df6:	9305      	str	r3, [sp, #20]
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dfe:	3a30      	subs	r2, #48	; 0x30
 8006e00:	2a09      	cmp	r2, #9
 8006e02:	d903      	bls.n	8006e0c <_vfiprintf_r+0x1d0>
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0c6      	beq.n	8006d96 <_vfiprintf_r+0x15a>
 8006e08:	9105      	str	r1, [sp, #20]
 8006e0a:	e7c4      	b.n	8006d96 <_vfiprintf_r+0x15a>
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	2301      	movs	r3, #1
 8006e10:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e14:	e7f0      	b.n	8006df8 <_vfiprintf_r+0x1bc>
 8006e16:	ab03      	add	r3, sp, #12
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	462a      	mov	r2, r5
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	4b13      	ldr	r3, [pc, #76]	; (8006e6c <_vfiprintf_r+0x230>)
 8006e20:	a904      	add	r1, sp, #16
 8006e22:	f7fd fbc3 	bl	80045ac <_printf_float>
 8006e26:	4607      	mov	r7, r0
 8006e28:	1c78      	adds	r0, r7, #1
 8006e2a:	d1d6      	bne.n	8006dda <_vfiprintf_r+0x19e>
 8006e2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e2e:	07d9      	lsls	r1, r3, #31
 8006e30:	d405      	bmi.n	8006e3e <_vfiprintf_r+0x202>
 8006e32:	89ab      	ldrh	r3, [r5, #12]
 8006e34:	059a      	lsls	r2, r3, #22
 8006e36:	d402      	bmi.n	8006e3e <_vfiprintf_r+0x202>
 8006e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e3a:	f7fe f90a 	bl	8005052 <__retarget_lock_release_recursive>
 8006e3e:	89ab      	ldrh	r3, [r5, #12]
 8006e40:	065b      	lsls	r3, r3, #25
 8006e42:	f53f af1d 	bmi.w	8006c80 <_vfiprintf_r+0x44>
 8006e46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e48:	e71c      	b.n	8006c84 <_vfiprintf_r+0x48>
 8006e4a:	ab03      	add	r3, sp, #12
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	462a      	mov	r2, r5
 8006e50:	4630      	mov	r0, r6
 8006e52:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <_vfiprintf_r+0x230>)
 8006e54:	a904      	add	r1, sp, #16
 8006e56:	f7fd fe49 	bl	8004aec <_printf_i>
 8006e5a:	e7e4      	b.n	8006e26 <_vfiprintf_r+0x1ea>
 8006e5c:	0800851c 	.word	0x0800851c
 8006e60:	08008522 	.word	0x08008522
 8006e64:	08008526 	.word	0x08008526
 8006e68:	080045ad 	.word	0x080045ad
 8006e6c:	08006c19 	.word	0x08006c19

08006e70 <__swbuf_r>:
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	460e      	mov	r6, r1
 8006e74:	4614      	mov	r4, r2
 8006e76:	4605      	mov	r5, r0
 8006e78:	b118      	cbz	r0, 8006e82 <__swbuf_r+0x12>
 8006e7a:	6a03      	ldr	r3, [r0, #32]
 8006e7c:	b90b      	cbnz	r3, 8006e82 <__swbuf_r+0x12>
 8006e7e:	f7fd ffd1 	bl	8004e24 <__sinit>
 8006e82:	69a3      	ldr	r3, [r4, #24]
 8006e84:	60a3      	str	r3, [r4, #8]
 8006e86:	89a3      	ldrh	r3, [r4, #12]
 8006e88:	071a      	lsls	r2, r3, #28
 8006e8a:	d525      	bpl.n	8006ed8 <__swbuf_r+0x68>
 8006e8c:	6923      	ldr	r3, [r4, #16]
 8006e8e:	b31b      	cbz	r3, 8006ed8 <__swbuf_r+0x68>
 8006e90:	6823      	ldr	r3, [r4, #0]
 8006e92:	6922      	ldr	r2, [r4, #16]
 8006e94:	b2f6      	uxtb	r6, r6
 8006e96:	1a98      	subs	r0, r3, r2
 8006e98:	6963      	ldr	r3, [r4, #20]
 8006e9a:	4637      	mov	r7, r6
 8006e9c:	4283      	cmp	r3, r0
 8006e9e:	dc04      	bgt.n	8006eaa <__swbuf_r+0x3a>
 8006ea0:	4621      	mov	r1, r4
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	f7ff fda2 	bl	80069ec <_fflush_r>
 8006ea8:	b9e0      	cbnz	r0, 8006ee4 <__swbuf_r+0x74>
 8006eaa:	68a3      	ldr	r3, [r4, #8]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	60a3      	str	r3, [r4, #8]
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	6022      	str	r2, [r4, #0]
 8006eb6:	701e      	strb	r6, [r3, #0]
 8006eb8:	6962      	ldr	r2, [r4, #20]
 8006eba:	1c43      	adds	r3, r0, #1
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d004      	beq.n	8006eca <__swbuf_r+0x5a>
 8006ec0:	89a3      	ldrh	r3, [r4, #12]
 8006ec2:	07db      	lsls	r3, r3, #31
 8006ec4:	d506      	bpl.n	8006ed4 <__swbuf_r+0x64>
 8006ec6:	2e0a      	cmp	r6, #10
 8006ec8:	d104      	bne.n	8006ed4 <__swbuf_r+0x64>
 8006eca:	4621      	mov	r1, r4
 8006ecc:	4628      	mov	r0, r5
 8006ece:	f7ff fd8d 	bl	80069ec <_fflush_r>
 8006ed2:	b938      	cbnz	r0, 8006ee4 <__swbuf_r+0x74>
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ed8:	4621      	mov	r1, r4
 8006eda:	4628      	mov	r0, r5
 8006edc:	f000 f806 	bl	8006eec <__swsetup_r>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d0d5      	beq.n	8006e90 <__swbuf_r+0x20>
 8006ee4:	f04f 37ff 	mov.w	r7, #4294967295
 8006ee8:	e7f4      	b.n	8006ed4 <__swbuf_r+0x64>
	...

08006eec <__swsetup_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	4b2a      	ldr	r3, [pc, #168]	; (8006f98 <__swsetup_r+0xac>)
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	6818      	ldr	r0, [r3, #0]
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	b118      	cbz	r0, 8006f00 <__swsetup_r+0x14>
 8006ef8:	6a03      	ldr	r3, [r0, #32]
 8006efa:	b90b      	cbnz	r3, 8006f00 <__swsetup_r+0x14>
 8006efc:	f7fd ff92 	bl	8004e24 <__sinit>
 8006f00:	89a3      	ldrh	r3, [r4, #12]
 8006f02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f06:	0718      	lsls	r0, r3, #28
 8006f08:	d422      	bmi.n	8006f50 <__swsetup_r+0x64>
 8006f0a:	06d9      	lsls	r1, r3, #27
 8006f0c:	d407      	bmi.n	8006f1e <__swsetup_r+0x32>
 8006f0e:	2309      	movs	r3, #9
 8006f10:	602b      	str	r3, [r5, #0]
 8006f12:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f16:	f04f 30ff 	mov.w	r0, #4294967295
 8006f1a:	81a3      	strh	r3, [r4, #12]
 8006f1c:	e034      	b.n	8006f88 <__swsetup_r+0x9c>
 8006f1e:	0758      	lsls	r0, r3, #29
 8006f20:	d512      	bpl.n	8006f48 <__swsetup_r+0x5c>
 8006f22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f24:	b141      	cbz	r1, 8006f38 <__swsetup_r+0x4c>
 8006f26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f2a:	4299      	cmp	r1, r3
 8006f2c:	d002      	beq.n	8006f34 <__swsetup_r+0x48>
 8006f2e:	4628      	mov	r0, r5
 8006f30:	f7fe ff0e 	bl	8005d50 <_free_r>
 8006f34:	2300      	movs	r3, #0
 8006f36:	6363      	str	r3, [r4, #52]	; 0x34
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f3e:	81a3      	strh	r3, [r4, #12]
 8006f40:	2300      	movs	r3, #0
 8006f42:	6063      	str	r3, [r4, #4]
 8006f44:	6923      	ldr	r3, [r4, #16]
 8006f46:	6023      	str	r3, [r4, #0]
 8006f48:	89a3      	ldrh	r3, [r4, #12]
 8006f4a:	f043 0308 	orr.w	r3, r3, #8
 8006f4e:	81a3      	strh	r3, [r4, #12]
 8006f50:	6923      	ldr	r3, [r4, #16]
 8006f52:	b94b      	cbnz	r3, 8006f68 <__swsetup_r+0x7c>
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f5e:	d003      	beq.n	8006f68 <__swsetup_r+0x7c>
 8006f60:	4621      	mov	r1, r4
 8006f62:	4628      	mov	r0, r5
 8006f64:	f000 f883 	bl	800706e <__smakebuf_r>
 8006f68:	89a0      	ldrh	r0, [r4, #12]
 8006f6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f6e:	f010 0301 	ands.w	r3, r0, #1
 8006f72:	d00a      	beq.n	8006f8a <__swsetup_r+0x9e>
 8006f74:	2300      	movs	r3, #0
 8006f76:	60a3      	str	r3, [r4, #8]
 8006f78:	6963      	ldr	r3, [r4, #20]
 8006f7a:	425b      	negs	r3, r3
 8006f7c:	61a3      	str	r3, [r4, #24]
 8006f7e:	6923      	ldr	r3, [r4, #16]
 8006f80:	b943      	cbnz	r3, 8006f94 <__swsetup_r+0xa8>
 8006f82:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f86:	d1c4      	bne.n	8006f12 <__swsetup_r+0x26>
 8006f88:	bd38      	pop	{r3, r4, r5, pc}
 8006f8a:	0781      	lsls	r1, r0, #30
 8006f8c:	bf58      	it	pl
 8006f8e:	6963      	ldrpl	r3, [r4, #20]
 8006f90:	60a3      	str	r3, [r4, #8]
 8006f92:	e7f4      	b.n	8006f7e <__swsetup_r+0x92>
 8006f94:	2000      	movs	r0, #0
 8006f96:	e7f7      	b.n	8006f88 <__swsetup_r+0x9c>
 8006f98:	20000064 	.word	0x20000064

08006f9c <_raise_r>:
 8006f9c:	291f      	cmp	r1, #31
 8006f9e:	b538      	push	{r3, r4, r5, lr}
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	460d      	mov	r5, r1
 8006fa4:	d904      	bls.n	8006fb0 <_raise_r+0x14>
 8006fa6:	2316      	movs	r3, #22
 8006fa8:	6003      	str	r3, [r0, #0]
 8006faa:	f04f 30ff 	mov.w	r0, #4294967295
 8006fae:	bd38      	pop	{r3, r4, r5, pc}
 8006fb0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006fb2:	b112      	cbz	r2, 8006fba <_raise_r+0x1e>
 8006fb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006fb8:	b94b      	cbnz	r3, 8006fce <_raise_r+0x32>
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f000 f830 	bl	8007020 <_getpid_r>
 8006fc0:	462a      	mov	r2, r5
 8006fc2:	4601      	mov	r1, r0
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fca:	f000 b817 	b.w	8006ffc <_kill_r>
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d00a      	beq.n	8006fe8 <_raise_r+0x4c>
 8006fd2:	1c59      	adds	r1, r3, #1
 8006fd4:	d103      	bne.n	8006fde <_raise_r+0x42>
 8006fd6:	2316      	movs	r3, #22
 8006fd8:	6003      	str	r3, [r0, #0]
 8006fda:	2001      	movs	r0, #1
 8006fdc:	e7e7      	b.n	8006fae <_raise_r+0x12>
 8006fde:	2400      	movs	r4, #0
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006fe6:	4798      	blx	r3
 8006fe8:	2000      	movs	r0, #0
 8006fea:	e7e0      	b.n	8006fae <_raise_r+0x12>

08006fec <raise>:
 8006fec:	4b02      	ldr	r3, [pc, #8]	; (8006ff8 <raise+0xc>)
 8006fee:	4601      	mov	r1, r0
 8006ff0:	6818      	ldr	r0, [r3, #0]
 8006ff2:	f7ff bfd3 	b.w	8006f9c <_raise_r>
 8006ff6:	bf00      	nop
 8006ff8:	20000064 	.word	0x20000064

08006ffc <_kill_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	2300      	movs	r3, #0
 8007000:	4d06      	ldr	r5, [pc, #24]	; (800701c <_kill_r+0x20>)
 8007002:	4604      	mov	r4, r0
 8007004:	4608      	mov	r0, r1
 8007006:	4611      	mov	r1, r2
 8007008:	602b      	str	r3, [r5, #0]
 800700a:	f7fa ff30 	bl	8001e6e <_kill>
 800700e:	1c43      	adds	r3, r0, #1
 8007010:	d102      	bne.n	8007018 <_kill_r+0x1c>
 8007012:	682b      	ldr	r3, [r5, #0]
 8007014:	b103      	cbz	r3, 8007018 <_kill_r+0x1c>
 8007016:	6023      	str	r3, [r4, #0]
 8007018:	bd38      	pop	{r3, r4, r5, pc}
 800701a:	bf00      	nop
 800701c:	20000878 	.word	0x20000878

08007020 <_getpid_r>:
 8007020:	f7fa bf1e 	b.w	8001e60 <_getpid>

08007024 <__swhatbuf_r>:
 8007024:	b570      	push	{r4, r5, r6, lr}
 8007026:	460c      	mov	r4, r1
 8007028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800702c:	4615      	mov	r5, r2
 800702e:	2900      	cmp	r1, #0
 8007030:	461e      	mov	r6, r3
 8007032:	b096      	sub	sp, #88	; 0x58
 8007034:	da0c      	bge.n	8007050 <__swhatbuf_r+0x2c>
 8007036:	89a3      	ldrh	r3, [r4, #12]
 8007038:	2100      	movs	r1, #0
 800703a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800703e:	bf0c      	ite	eq
 8007040:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007044:	2340      	movne	r3, #64	; 0x40
 8007046:	2000      	movs	r0, #0
 8007048:	6031      	str	r1, [r6, #0]
 800704a:	602b      	str	r3, [r5, #0]
 800704c:	b016      	add	sp, #88	; 0x58
 800704e:	bd70      	pop	{r4, r5, r6, pc}
 8007050:	466a      	mov	r2, sp
 8007052:	f000 f849 	bl	80070e8 <_fstat_r>
 8007056:	2800      	cmp	r0, #0
 8007058:	dbed      	blt.n	8007036 <__swhatbuf_r+0x12>
 800705a:	9901      	ldr	r1, [sp, #4]
 800705c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007060:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007064:	4259      	negs	r1, r3
 8007066:	4159      	adcs	r1, r3
 8007068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800706c:	e7eb      	b.n	8007046 <__swhatbuf_r+0x22>

0800706e <__smakebuf_r>:
 800706e:	898b      	ldrh	r3, [r1, #12]
 8007070:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007072:	079d      	lsls	r5, r3, #30
 8007074:	4606      	mov	r6, r0
 8007076:	460c      	mov	r4, r1
 8007078:	d507      	bpl.n	800708a <__smakebuf_r+0x1c>
 800707a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800707e:	6023      	str	r3, [r4, #0]
 8007080:	6123      	str	r3, [r4, #16]
 8007082:	2301      	movs	r3, #1
 8007084:	6163      	str	r3, [r4, #20]
 8007086:	b002      	add	sp, #8
 8007088:	bd70      	pop	{r4, r5, r6, pc}
 800708a:	466a      	mov	r2, sp
 800708c:	ab01      	add	r3, sp, #4
 800708e:	f7ff ffc9 	bl	8007024 <__swhatbuf_r>
 8007092:	9900      	ldr	r1, [sp, #0]
 8007094:	4605      	mov	r5, r0
 8007096:	4630      	mov	r0, r6
 8007098:	f7fe feca 	bl	8005e30 <_malloc_r>
 800709c:	b948      	cbnz	r0, 80070b2 <__smakebuf_r+0x44>
 800709e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070a2:	059a      	lsls	r2, r3, #22
 80070a4:	d4ef      	bmi.n	8007086 <__smakebuf_r+0x18>
 80070a6:	f023 0303 	bic.w	r3, r3, #3
 80070aa:	f043 0302 	orr.w	r3, r3, #2
 80070ae:	81a3      	strh	r3, [r4, #12]
 80070b0:	e7e3      	b.n	800707a <__smakebuf_r+0xc>
 80070b2:	89a3      	ldrh	r3, [r4, #12]
 80070b4:	6020      	str	r0, [r4, #0]
 80070b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ba:	81a3      	strh	r3, [r4, #12]
 80070bc:	9b00      	ldr	r3, [sp, #0]
 80070be:	6120      	str	r0, [r4, #16]
 80070c0:	6163      	str	r3, [r4, #20]
 80070c2:	9b01      	ldr	r3, [sp, #4]
 80070c4:	b15b      	cbz	r3, 80070de <__smakebuf_r+0x70>
 80070c6:	4630      	mov	r0, r6
 80070c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070cc:	f000 f81e 	bl	800710c <_isatty_r>
 80070d0:	b128      	cbz	r0, 80070de <__smakebuf_r+0x70>
 80070d2:	89a3      	ldrh	r3, [r4, #12]
 80070d4:	f023 0303 	bic.w	r3, r3, #3
 80070d8:	f043 0301 	orr.w	r3, r3, #1
 80070dc:	81a3      	strh	r3, [r4, #12]
 80070de:	89a3      	ldrh	r3, [r4, #12]
 80070e0:	431d      	orrs	r5, r3
 80070e2:	81a5      	strh	r5, [r4, #12]
 80070e4:	e7cf      	b.n	8007086 <__smakebuf_r+0x18>
	...

080070e8 <_fstat_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	2300      	movs	r3, #0
 80070ec:	4d06      	ldr	r5, [pc, #24]	; (8007108 <_fstat_r+0x20>)
 80070ee:	4604      	mov	r4, r0
 80070f0:	4608      	mov	r0, r1
 80070f2:	4611      	mov	r1, r2
 80070f4:	602b      	str	r3, [r5, #0]
 80070f6:	f7fa ff18 	bl	8001f2a <_fstat>
 80070fa:	1c43      	adds	r3, r0, #1
 80070fc:	d102      	bne.n	8007104 <_fstat_r+0x1c>
 80070fe:	682b      	ldr	r3, [r5, #0]
 8007100:	b103      	cbz	r3, 8007104 <_fstat_r+0x1c>
 8007102:	6023      	str	r3, [r4, #0]
 8007104:	bd38      	pop	{r3, r4, r5, pc}
 8007106:	bf00      	nop
 8007108:	20000878 	.word	0x20000878

0800710c <_isatty_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	2300      	movs	r3, #0
 8007110:	4d05      	ldr	r5, [pc, #20]	; (8007128 <_isatty_r+0x1c>)
 8007112:	4604      	mov	r4, r0
 8007114:	4608      	mov	r0, r1
 8007116:	602b      	str	r3, [r5, #0]
 8007118:	f7fa ff16 	bl	8001f48 <_isatty>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d102      	bne.n	8007126 <_isatty_r+0x1a>
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	b103      	cbz	r3, 8007126 <_isatty_r+0x1a>
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	bd38      	pop	{r3, r4, r5, pc}
 8007128:	20000878 	.word	0x20000878

0800712c <pow>:
 800712c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007130:	4614      	mov	r4, r2
 8007132:	461d      	mov	r5, r3
 8007134:	4680      	mov	r8, r0
 8007136:	4689      	mov	r9, r1
 8007138:	f000 faf2 	bl	8007720 <__ieee754_pow>
 800713c:	4622      	mov	r2, r4
 800713e:	4606      	mov	r6, r0
 8007140:	460f      	mov	r7, r1
 8007142:	462b      	mov	r3, r5
 8007144:	4620      	mov	r0, r4
 8007146:	4629      	mov	r1, r5
 8007148:	f7f9 fc60 	bl	8000a0c <__aeabi_dcmpun>
 800714c:	bbc8      	cbnz	r0, 80071c2 <pow+0x96>
 800714e:	2200      	movs	r2, #0
 8007150:	2300      	movs	r3, #0
 8007152:	4640      	mov	r0, r8
 8007154:	4649      	mov	r1, r9
 8007156:	f7f9 fc27 	bl	80009a8 <__aeabi_dcmpeq>
 800715a:	b1b8      	cbz	r0, 800718c <pow+0x60>
 800715c:	2200      	movs	r2, #0
 800715e:	2300      	movs	r3, #0
 8007160:	4620      	mov	r0, r4
 8007162:	4629      	mov	r1, r5
 8007164:	f7f9 fc20 	bl	80009a8 <__aeabi_dcmpeq>
 8007168:	2800      	cmp	r0, #0
 800716a:	d141      	bne.n	80071f0 <pow+0xc4>
 800716c:	4620      	mov	r0, r4
 800716e:	4629      	mov	r1, r5
 8007170:	f000 f9f8 	bl	8007564 <finite>
 8007174:	b328      	cbz	r0, 80071c2 <pow+0x96>
 8007176:	2200      	movs	r2, #0
 8007178:	2300      	movs	r3, #0
 800717a:	4620      	mov	r0, r4
 800717c:	4629      	mov	r1, r5
 800717e:	f7f9 fc1d 	bl	80009bc <__aeabi_dcmplt>
 8007182:	b1f0      	cbz	r0, 80071c2 <pow+0x96>
 8007184:	f7fd ff3a 	bl	8004ffc <__errno>
 8007188:	2322      	movs	r3, #34	; 0x22
 800718a:	e019      	b.n	80071c0 <pow+0x94>
 800718c:	4630      	mov	r0, r6
 800718e:	4639      	mov	r1, r7
 8007190:	f000 f9e8 	bl	8007564 <finite>
 8007194:	b9c8      	cbnz	r0, 80071ca <pow+0x9e>
 8007196:	4640      	mov	r0, r8
 8007198:	4649      	mov	r1, r9
 800719a:	f000 f9e3 	bl	8007564 <finite>
 800719e:	b1a0      	cbz	r0, 80071ca <pow+0x9e>
 80071a0:	4620      	mov	r0, r4
 80071a2:	4629      	mov	r1, r5
 80071a4:	f000 f9de 	bl	8007564 <finite>
 80071a8:	b178      	cbz	r0, 80071ca <pow+0x9e>
 80071aa:	4632      	mov	r2, r6
 80071ac:	463b      	mov	r3, r7
 80071ae:	4630      	mov	r0, r6
 80071b0:	4639      	mov	r1, r7
 80071b2:	f7f9 fc2b 	bl	8000a0c <__aeabi_dcmpun>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d0e4      	beq.n	8007184 <pow+0x58>
 80071ba:	f7fd ff1f 	bl	8004ffc <__errno>
 80071be:	2321      	movs	r3, #33	; 0x21
 80071c0:	6003      	str	r3, [r0, #0]
 80071c2:	4630      	mov	r0, r6
 80071c4:	4639      	mov	r1, r7
 80071c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ca:	2200      	movs	r2, #0
 80071cc:	2300      	movs	r3, #0
 80071ce:	4630      	mov	r0, r6
 80071d0:	4639      	mov	r1, r7
 80071d2:	f7f9 fbe9 	bl	80009a8 <__aeabi_dcmpeq>
 80071d6:	2800      	cmp	r0, #0
 80071d8:	d0f3      	beq.n	80071c2 <pow+0x96>
 80071da:	4640      	mov	r0, r8
 80071dc:	4649      	mov	r1, r9
 80071de:	f000 f9c1 	bl	8007564 <finite>
 80071e2:	2800      	cmp	r0, #0
 80071e4:	d0ed      	beq.n	80071c2 <pow+0x96>
 80071e6:	4620      	mov	r0, r4
 80071e8:	4629      	mov	r1, r5
 80071ea:	f000 f9bb 	bl	8007564 <finite>
 80071ee:	e7c8      	b.n	8007182 <pow+0x56>
 80071f0:	2600      	movs	r6, #0
 80071f2:	4f01      	ldr	r7, [pc, #4]	; (80071f8 <pow+0xcc>)
 80071f4:	e7e5      	b.n	80071c2 <pow+0x96>
 80071f6:	bf00      	nop
 80071f8:	3ff00000 	.word	0x3ff00000

080071fc <sqrt>:
 80071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fe:	4606      	mov	r6, r0
 8007200:	460f      	mov	r7, r1
 8007202:	f000 f9b5 	bl	8007570 <__ieee754_sqrt>
 8007206:	4632      	mov	r2, r6
 8007208:	4604      	mov	r4, r0
 800720a:	460d      	mov	r5, r1
 800720c:	463b      	mov	r3, r7
 800720e:	4630      	mov	r0, r6
 8007210:	4639      	mov	r1, r7
 8007212:	f7f9 fbfb 	bl	8000a0c <__aeabi_dcmpun>
 8007216:	b990      	cbnz	r0, 800723e <sqrt+0x42>
 8007218:	2200      	movs	r2, #0
 800721a:	2300      	movs	r3, #0
 800721c:	4630      	mov	r0, r6
 800721e:	4639      	mov	r1, r7
 8007220:	f7f9 fbcc 	bl	80009bc <__aeabi_dcmplt>
 8007224:	b158      	cbz	r0, 800723e <sqrt+0x42>
 8007226:	f7fd fee9 	bl	8004ffc <__errno>
 800722a:	2321      	movs	r3, #33	; 0x21
 800722c:	2200      	movs	r2, #0
 800722e:	6003      	str	r3, [r0, #0]
 8007230:	2300      	movs	r3, #0
 8007232:	4610      	mov	r0, r2
 8007234:	4619      	mov	r1, r3
 8007236:	f7f9 fa79 	bl	800072c <__aeabi_ddiv>
 800723a:	4604      	mov	r4, r0
 800723c:	460d      	mov	r5, r1
 800723e:	4620      	mov	r0, r4
 8007240:	4629      	mov	r1, r5
 8007242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007244:	0000      	movs	r0, r0
	...

08007248 <atan>:
 8007248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	4bb6      	ldr	r3, [pc, #728]	; (8007528 <atan+0x2e0>)
 800724e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007252:	429e      	cmp	r6, r3
 8007254:	4604      	mov	r4, r0
 8007256:	460d      	mov	r5, r1
 8007258:	468b      	mov	fp, r1
 800725a:	dd17      	ble.n	800728c <atan+0x44>
 800725c:	4bb3      	ldr	r3, [pc, #716]	; (800752c <atan+0x2e4>)
 800725e:	429e      	cmp	r6, r3
 8007260:	dc01      	bgt.n	8007266 <atan+0x1e>
 8007262:	d109      	bne.n	8007278 <atan+0x30>
 8007264:	b140      	cbz	r0, 8007278 <atan+0x30>
 8007266:	4622      	mov	r2, r4
 8007268:	462b      	mov	r3, r5
 800726a:	4620      	mov	r0, r4
 800726c:	4629      	mov	r1, r5
 800726e:	f7f8 ff7d 	bl	800016c <__adddf3>
 8007272:	4604      	mov	r4, r0
 8007274:	460d      	mov	r5, r1
 8007276:	e005      	b.n	8007284 <atan+0x3c>
 8007278:	f1bb 0f00 	cmp.w	fp, #0
 800727c:	4cac      	ldr	r4, [pc, #688]	; (8007530 <atan+0x2e8>)
 800727e:	f300 8121 	bgt.w	80074c4 <atan+0x27c>
 8007282:	4dac      	ldr	r5, [pc, #688]	; (8007534 <atan+0x2ec>)
 8007284:	4620      	mov	r0, r4
 8007286:	4629      	mov	r1, r5
 8007288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800728c:	4baa      	ldr	r3, [pc, #680]	; (8007538 <atan+0x2f0>)
 800728e:	429e      	cmp	r6, r3
 8007290:	dc11      	bgt.n	80072b6 <atan+0x6e>
 8007292:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007296:	429e      	cmp	r6, r3
 8007298:	dc0a      	bgt.n	80072b0 <atan+0x68>
 800729a:	a38b      	add	r3, pc, #556	; (adr r3, 80074c8 <atan+0x280>)
 800729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a0:	f7f8 ff64 	bl	800016c <__adddf3>
 80072a4:	2200      	movs	r2, #0
 80072a6:	4ba5      	ldr	r3, [pc, #660]	; (800753c <atan+0x2f4>)
 80072a8:	f7f9 fba6 	bl	80009f8 <__aeabi_dcmpgt>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d1e9      	bne.n	8007284 <atan+0x3c>
 80072b0:	f04f 3aff 	mov.w	sl, #4294967295
 80072b4:	e027      	b.n	8007306 <atan+0xbe>
 80072b6:	f000 f951 	bl	800755c <fabs>
 80072ba:	4ba1      	ldr	r3, [pc, #644]	; (8007540 <atan+0x2f8>)
 80072bc:	4604      	mov	r4, r0
 80072be:	429e      	cmp	r6, r3
 80072c0:	460d      	mov	r5, r1
 80072c2:	f300 80b8 	bgt.w	8007436 <atan+0x1ee>
 80072c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80072ca:	429e      	cmp	r6, r3
 80072cc:	f300 809c 	bgt.w	8007408 <atan+0x1c0>
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	f7f8 ff4a 	bl	800016c <__adddf3>
 80072d8:	2200      	movs	r2, #0
 80072da:	4b98      	ldr	r3, [pc, #608]	; (800753c <atan+0x2f4>)
 80072dc:	f7f8 ff44 	bl	8000168 <__aeabi_dsub>
 80072e0:	2200      	movs	r2, #0
 80072e2:	4606      	mov	r6, r0
 80072e4:	460f      	mov	r7, r1
 80072e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80072ea:	4620      	mov	r0, r4
 80072ec:	4629      	mov	r1, r5
 80072ee:	f7f8 ff3d 	bl	800016c <__adddf3>
 80072f2:	4602      	mov	r2, r0
 80072f4:	460b      	mov	r3, r1
 80072f6:	4630      	mov	r0, r6
 80072f8:	4639      	mov	r1, r7
 80072fa:	f7f9 fa17 	bl	800072c <__aeabi_ddiv>
 80072fe:	f04f 0a00 	mov.w	sl, #0
 8007302:	4604      	mov	r4, r0
 8007304:	460d      	mov	r5, r1
 8007306:	4622      	mov	r2, r4
 8007308:	462b      	mov	r3, r5
 800730a:	4620      	mov	r0, r4
 800730c:	4629      	mov	r1, r5
 800730e:	f7f9 f8e3 	bl	80004d8 <__aeabi_dmul>
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	4680      	mov	r8, r0
 8007318:	4689      	mov	r9, r1
 800731a:	f7f9 f8dd 	bl	80004d8 <__aeabi_dmul>
 800731e:	a36c      	add	r3, pc, #432	; (adr r3, 80074d0 <atan+0x288>)
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	4606      	mov	r6, r0
 8007326:	460f      	mov	r7, r1
 8007328:	f7f9 f8d6 	bl	80004d8 <__aeabi_dmul>
 800732c:	a36a      	add	r3, pc, #424	; (adr r3, 80074d8 <atan+0x290>)
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	f7f8 ff1b 	bl	800016c <__adddf3>
 8007336:	4632      	mov	r2, r6
 8007338:	463b      	mov	r3, r7
 800733a:	f7f9 f8cd 	bl	80004d8 <__aeabi_dmul>
 800733e:	a368      	add	r3, pc, #416	; (adr r3, 80074e0 <atan+0x298>)
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	f7f8 ff12 	bl	800016c <__adddf3>
 8007348:	4632      	mov	r2, r6
 800734a:	463b      	mov	r3, r7
 800734c:	f7f9 f8c4 	bl	80004d8 <__aeabi_dmul>
 8007350:	a365      	add	r3, pc, #404	; (adr r3, 80074e8 <atan+0x2a0>)
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	f7f8 ff09 	bl	800016c <__adddf3>
 800735a:	4632      	mov	r2, r6
 800735c:	463b      	mov	r3, r7
 800735e:	f7f9 f8bb 	bl	80004d8 <__aeabi_dmul>
 8007362:	a363      	add	r3, pc, #396	; (adr r3, 80074f0 <atan+0x2a8>)
 8007364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007368:	f7f8 ff00 	bl	800016c <__adddf3>
 800736c:	4632      	mov	r2, r6
 800736e:	463b      	mov	r3, r7
 8007370:	f7f9 f8b2 	bl	80004d8 <__aeabi_dmul>
 8007374:	a360      	add	r3, pc, #384	; (adr r3, 80074f8 <atan+0x2b0>)
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	f7f8 fef7 	bl	800016c <__adddf3>
 800737e:	4642      	mov	r2, r8
 8007380:	464b      	mov	r3, r9
 8007382:	f7f9 f8a9 	bl	80004d8 <__aeabi_dmul>
 8007386:	a35e      	add	r3, pc, #376	; (adr r3, 8007500 <atan+0x2b8>)
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	4680      	mov	r8, r0
 800738e:	4689      	mov	r9, r1
 8007390:	4630      	mov	r0, r6
 8007392:	4639      	mov	r1, r7
 8007394:	f7f9 f8a0 	bl	80004d8 <__aeabi_dmul>
 8007398:	a35b      	add	r3, pc, #364	; (adr r3, 8007508 <atan+0x2c0>)
 800739a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739e:	f7f8 fee3 	bl	8000168 <__aeabi_dsub>
 80073a2:	4632      	mov	r2, r6
 80073a4:	463b      	mov	r3, r7
 80073a6:	f7f9 f897 	bl	80004d8 <__aeabi_dmul>
 80073aa:	a359      	add	r3, pc, #356	; (adr r3, 8007510 <atan+0x2c8>)
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	f7f8 feda 	bl	8000168 <__aeabi_dsub>
 80073b4:	4632      	mov	r2, r6
 80073b6:	463b      	mov	r3, r7
 80073b8:	f7f9 f88e 	bl	80004d8 <__aeabi_dmul>
 80073bc:	a356      	add	r3, pc, #344	; (adr r3, 8007518 <atan+0x2d0>)
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	f7f8 fed1 	bl	8000168 <__aeabi_dsub>
 80073c6:	4632      	mov	r2, r6
 80073c8:	463b      	mov	r3, r7
 80073ca:	f7f9 f885 	bl	80004d8 <__aeabi_dmul>
 80073ce:	a354      	add	r3, pc, #336	; (adr r3, 8007520 <atan+0x2d8>)
 80073d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d4:	f7f8 fec8 	bl	8000168 <__aeabi_dsub>
 80073d8:	4632      	mov	r2, r6
 80073da:	463b      	mov	r3, r7
 80073dc:	f7f9 f87c 	bl	80004d8 <__aeabi_dmul>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	4640      	mov	r0, r8
 80073e6:	4649      	mov	r1, r9
 80073e8:	f7f8 fec0 	bl	800016c <__adddf3>
 80073ec:	4622      	mov	r2, r4
 80073ee:	462b      	mov	r3, r5
 80073f0:	f7f9 f872 	bl	80004d8 <__aeabi_dmul>
 80073f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	d144      	bne.n	8007488 <atan+0x240>
 80073fe:	4620      	mov	r0, r4
 8007400:	4629      	mov	r1, r5
 8007402:	f7f8 feb1 	bl	8000168 <__aeabi_dsub>
 8007406:	e734      	b.n	8007272 <atan+0x2a>
 8007408:	2200      	movs	r2, #0
 800740a:	4b4c      	ldr	r3, [pc, #304]	; (800753c <atan+0x2f4>)
 800740c:	f7f8 feac 	bl	8000168 <__aeabi_dsub>
 8007410:	2200      	movs	r2, #0
 8007412:	4606      	mov	r6, r0
 8007414:	460f      	mov	r7, r1
 8007416:	4620      	mov	r0, r4
 8007418:	4629      	mov	r1, r5
 800741a:	4b48      	ldr	r3, [pc, #288]	; (800753c <atan+0x2f4>)
 800741c:	f7f8 fea6 	bl	800016c <__adddf3>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	4630      	mov	r0, r6
 8007426:	4639      	mov	r1, r7
 8007428:	f7f9 f980 	bl	800072c <__aeabi_ddiv>
 800742c:	f04f 0a01 	mov.w	sl, #1
 8007430:	4604      	mov	r4, r0
 8007432:	460d      	mov	r5, r1
 8007434:	e767      	b.n	8007306 <atan+0xbe>
 8007436:	4b43      	ldr	r3, [pc, #268]	; (8007544 <atan+0x2fc>)
 8007438:	429e      	cmp	r6, r3
 800743a:	da1a      	bge.n	8007472 <atan+0x22a>
 800743c:	2200      	movs	r2, #0
 800743e:	4b42      	ldr	r3, [pc, #264]	; (8007548 <atan+0x300>)
 8007440:	f7f8 fe92 	bl	8000168 <__aeabi_dsub>
 8007444:	2200      	movs	r2, #0
 8007446:	4606      	mov	r6, r0
 8007448:	460f      	mov	r7, r1
 800744a:	4620      	mov	r0, r4
 800744c:	4629      	mov	r1, r5
 800744e:	4b3e      	ldr	r3, [pc, #248]	; (8007548 <atan+0x300>)
 8007450:	f7f9 f842 	bl	80004d8 <__aeabi_dmul>
 8007454:	2200      	movs	r2, #0
 8007456:	4b39      	ldr	r3, [pc, #228]	; (800753c <atan+0x2f4>)
 8007458:	f7f8 fe88 	bl	800016c <__adddf3>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	4630      	mov	r0, r6
 8007462:	4639      	mov	r1, r7
 8007464:	f7f9 f962 	bl	800072c <__aeabi_ddiv>
 8007468:	f04f 0a02 	mov.w	sl, #2
 800746c:	4604      	mov	r4, r0
 800746e:	460d      	mov	r5, r1
 8007470:	e749      	b.n	8007306 <atan+0xbe>
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	2000      	movs	r0, #0
 8007478:	4934      	ldr	r1, [pc, #208]	; (800754c <atan+0x304>)
 800747a:	f7f9 f957 	bl	800072c <__aeabi_ddiv>
 800747e:	f04f 0a03 	mov.w	sl, #3
 8007482:	4604      	mov	r4, r0
 8007484:	460d      	mov	r5, r1
 8007486:	e73e      	b.n	8007306 <atan+0xbe>
 8007488:	4b31      	ldr	r3, [pc, #196]	; (8007550 <atan+0x308>)
 800748a:	4e32      	ldr	r6, [pc, #200]	; (8007554 <atan+0x30c>)
 800748c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007494:	f7f8 fe68 	bl	8000168 <__aeabi_dsub>
 8007498:	4622      	mov	r2, r4
 800749a:	462b      	mov	r3, r5
 800749c:	f7f8 fe64 	bl	8000168 <__aeabi_dsub>
 80074a0:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80074ac:	f7f8 fe5c 	bl	8000168 <__aeabi_dsub>
 80074b0:	f1bb 0f00 	cmp.w	fp, #0
 80074b4:	4604      	mov	r4, r0
 80074b6:	460d      	mov	r5, r1
 80074b8:	f6bf aee4 	bge.w	8007284 <atan+0x3c>
 80074bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074c0:	461d      	mov	r5, r3
 80074c2:	e6df      	b.n	8007284 <atan+0x3c>
 80074c4:	4d24      	ldr	r5, [pc, #144]	; (8007558 <atan+0x310>)
 80074c6:	e6dd      	b.n	8007284 <atan+0x3c>
 80074c8:	8800759c 	.word	0x8800759c
 80074cc:	7e37e43c 	.word	0x7e37e43c
 80074d0:	e322da11 	.word	0xe322da11
 80074d4:	3f90ad3a 	.word	0x3f90ad3a
 80074d8:	24760deb 	.word	0x24760deb
 80074dc:	3fa97b4b 	.word	0x3fa97b4b
 80074e0:	a0d03d51 	.word	0xa0d03d51
 80074e4:	3fb10d66 	.word	0x3fb10d66
 80074e8:	c54c206e 	.word	0xc54c206e
 80074ec:	3fb745cd 	.word	0x3fb745cd
 80074f0:	920083ff 	.word	0x920083ff
 80074f4:	3fc24924 	.word	0x3fc24924
 80074f8:	5555550d 	.word	0x5555550d
 80074fc:	3fd55555 	.word	0x3fd55555
 8007500:	2c6a6c2f 	.word	0x2c6a6c2f
 8007504:	bfa2b444 	.word	0xbfa2b444
 8007508:	52defd9a 	.word	0x52defd9a
 800750c:	3fadde2d 	.word	0x3fadde2d
 8007510:	af749a6d 	.word	0xaf749a6d
 8007514:	3fb3b0f2 	.word	0x3fb3b0f2
 8007518:	fe231671 	.word	0xfe231671
 800751c:	3fbc71c6 	.word	0x3fbc71c6
 8007520:	9998ebc4 	.word	0x9998ebc4
 8007524:	3fc99999 	.word	0x3fc99999
 8007528:	440fffff 	.word	0x440fffff
 800752c:	7ff00000 	.word	0x7ff00000
 8007530:	54442d18 	.word	0x54442d18
 8007534:	bff921fb 	.word	0xbff921fb
 8007538:	3fdbffff 	.word	0x3fdbffff
 800753c:	3ff00000 	.word	0x3ff00000
 8007540:	3ff2ffff 	.word	0x3ff2ffff
 8007544:	40038000 	.word	0x40038000
 8007548:	3ff80000 	.word	0x3ff80000
 800754c:	bff00000 	.word	0xbff00000
 8007550:	08008698 	.word	0x08008698
 8007554:	08008678 	.word	0x08008678
 8007558:	3ff921fb 	.word	0x3ff921fb

0800755c <fabs>:
 800755c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007560:	4619      	mov	r1, r3
 8007562:	4770      	bx	lr

08007564 <finite>:
 8007564:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8007568:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800756c:	0fc0      	lsrs	r0, r0, #31
 800756e:	4770      	bx	lr

08007570 <__ieee754_sqrt>:
 8007570:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8007714 <__ieee754_sqrt+0x1a4>
 8007574:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007578:	ea3c 0c01 	bics.w	ip, ip, r1
 800757c:	460b      	mov	r3, r1
 800757e:	4606      	mov	r6, r0
 8007580:	460d      	mov	r5, r1
 8007582:	460a      	mov	r2, r1
 8007584:	4604      	mov	r4, r0
 8007586:	d10e      	bne.n	80075a6 <__ieee754_sqrt+0x36>
 8007588:	4602      	mov	r2, r0
 800758a:	f7f8 ffa5 	bl	80004d8 <__aeabi_dmul>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	4630      	mov	r0, r6
 8007594:	4629      	mov	r1, r5
 8007596:	f7f8 fde9 	bl	800016c <__adddf3>
 800759a:	4606      	mov	r6, r0
 800759c:	460d      	mov	r5, r1
 800759e:	4630      	mov	r0, r6
 80075a0:	4629      	mov	r1, r5
 80075a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a6:	2900      	cmp	r1, #0
 80075a8:	dc0d      	bgt.n	80075c6 <__ieee754_sqrt+0x56>
 80075aa:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80075ae:	ea5c 0c00 	orrs.w	ip, ip, r0
 80075b2:	d0f4      	beq.n	800759e <__ieee754_sqrt+0x2e>
 80075b4:	b139      	cbz	r1, 80075c6 <__ieee754_sqrt+0x56>
 80075b6:	4602      	mov	r2, r0
 80075b8:	f7f8 fdd6 	bl	8000168 <__aeabi_dsub>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	f7f9 f8b4 	bl	800072c <__aeabi_ddiv>
 80075c4:	e7e9      	b.n	800759a <__ieee754_sqrt+0x2a>
 80075c6:	1512      	asrs	r2, r2, #20
 80075c8:	f000 8089 	beq.w	80076de <__ieee754_sqrt+0x16e>
 80075cc:	2500      	movs	r5, #0
 80075ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075d2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80075d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075da:	07d2      	lsls	r2, r2, #31
 80075dc:	bf5c      	itt	pl
 80075de:	005b      	lslpl	r3, r3, #1
 80075e0:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80075e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80075e8:	bf58      	it	pl
 80075ea:	0064      	lslpl	r4, r4, #1
 80075ec:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80075f0:	0062      	lsls	r2, r4, #1
 80075f2:	2016      	movs	r0, #22
 80075f4:	4629      	mov	r1, r5
 80075f6:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80075fa:	1076      	asrs	r6, r6, #1
 80075fc:	190f      	adds	r7, r1, r4
 80075fe:	429f      	cmp	r7, r3
 8007600:	bfde      	ittt	le
 8007602:	1bdb      	suble	r3, r3, r7
 8007604:	1939      	addle	r1, r7, r4
 8007606:	192d      	addle	r5, r5, r4
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	3801      	subs	r0, #1
 800760c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007610:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007614:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007618:	d1f0      	bne.n	80075fc <__ieee754_sqrt+0x8c>
 800761a:	4604      	mov	r4, r0
 800761c:	2720      	movs	r7, #32
 800761e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007622:	428b      	cmp	r3, r1
 8007624:	eb0c 0e00 	add.w	lr, ip, r0
 8007628:	dc02      	bgt.n	8007630 <__ieee754_sqrt+0xc0>
 800762a:	d113      	bne.n	8007654 <__ieee754_sqrt+0xe4>
 800762c:	4596      	cmp	lr, r2
 800762e:	d811      	bhi.n	8007654 <__ieee754_sqrt+0xe4>
 8007630:	f1be 0f00 	cmp.w	lr, #0
 8007634:	eb0e 000c 	add.w	r0, lr, ip
 8007638:	da56      	bge.n	80076e8 <__ieee754_sqrt+0x178>
 800763a:	2800      	cmp	r0, #0
 800763c:	db54      	blt.n	80076e8 <__ieee754_sqrt+0x178>
 800763e:	f101 0801 	add.w	r8, r1, #1
 8007642:	1a5b      	subs	r3, r3, r1
 8007644:	4641      	mov	r1, r8
 8007646:	4596      	cmp	lr, r2
 8007648:	bf88      	it	hi
 800764a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800764e:	eba2 020e 	sub.w	r2, r2, lr
 8007652:	4464      	add	r4, ip
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	3f01      	subs	r7, #1
 8007658:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800765c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007660:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007664:	d1dd      	bne.n	8007622 <__ieee754_sqrt+0xb2>
 8007666:	4313      	orrs	r3, r2
 8007668:	d01b      	beq.n	80076a2 <__ieee754_sqrt+0x132>
 800766a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007718 <__ieee754_sqrt+0x1a8>
 800766e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800771c <__ieee754_sqrt+0x1ac>
 8007672:	e9da 0100 	ldrd	r0, r1, [sl]
 8007676:	e9db 2300 	ldrd	r2, r3, [fp]
 800767a:	f7f8 fd75 	bl	8000168 <__aeabi_dsub>
 800767e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	4640      	mov	r0, r8
 8007688:	4649      	mov	r1, r9
 800768a:	f7f9 f9a1 	bl	80009d0 <__aeabi_dcmple>
 800768e:	b140      	cbz	r0, 80076a2 <__ieee754_sqrt+0x132>
 8007690:	e9da 0100 	ldrd	r0, r1, [sl]
 8007694:	e9db 2300 	ldrd	r2, r3, [fp]
 8007698:	f1b4 3fff 	cmp.w	r4, #4294967295
 800769c:	d126      	bne.n	80076ec <__ieee754_sqrt+0x17c>
 800769e:	463c      	mov	r4, r7
 80076a0:	3501      	adds	r5, #1
 80076a2:	106b      	asrs	r3, r5, #1
 80076a4:	0864      	lsrs	r4, r4, #1
 80076a6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80076aa:	07ea      	lsls	r2, r5, #31
 80076ac:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80076b0:	bf48      	it	mi
 80076b2:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80076b6:	4620      	mov	r0, r4
 80076b8:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80076bc:	e76d      	b.n	800759a <__ieee754_sqrt+0x2a>
 80076be:	0ae3      	lsrs	r3, r4, #11
 80076c0:	3915      	subs	r1, #21
 80076c2:	0564      	lsls	r4, r4, #21
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d0fa      	beq.n	80076be <__ieee754_sqrt+0x14e>
 80076c8:	02d8      	lsls	r0, r3, #11
 80076ca:	d50a      	bpl.n	80076e2 <__ieee754_sqrt+0x172>
 80076cc:	f1c2 0020 	rsb	r0, r2, #32
 80076d0:	fa24 f000 	lsr.w	r0, r4, r0
 80076d4:	1e55      	subs	r5, r2, #1
 80076d6:	4094      	lsls	r4, r2
 80076d8:	4303      	orrs	r3, r0
 80076da:	1b4a      	subs	r2, r1, r5
 80076dc:	e776      	b.n	80075cc <__ieee754_sqrt+0x5c>
 80076de:	4611      	mov	r1, r2
 80076e0:	e7f0      	b.n	80076c4 <__ieee754_sqrt+0x154>
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	3201      	adds	r2, #1
 80076e6:	e7ef      	b.n	80076c8 <__ieee754_sqrt+0x158>
 80076e8:	4688      	mov	r8, r1
 80076ea:	e7aa      	b.n	8007642 <__ieee754_sqrt+0xd2>
 80076ec:	f7f8 fd3e 	bl	800016c <__adddf3>
 80076f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	4640      	mov	r0, r8
 80076fa:	4649      	mov	r1, r9
 80076fc:	f7f9 f95e 	bl	80009bc <__aeabi_dcmplt>
 8007700:	b120      	cbz	r0, 800770c <__ieee754_sqrt+0x19c>
 8007702:	1ca1      	adds	r1, r4, #2
 8007704:	bf08      	it	eq
 8007706:	3501      	addeq	r5, #1
 8007708:	3402      	adds	r4, #2
 800770a:	e7ca      	b.n	80076a2 <__ieee754_sqrt+0x132>
 800770c:	3401      	adds	r4, #1
 800770e:	f024 0401 	bic.w	r4, r4, #1
 8007712:	e7c6      	b.n	80076a2 <__ieee754_sqrt+0x132>
 8007714:	7ff00000 	.word	0x7ff00000
 8007718:	200001d8 	.word	0x200001d8
 800771c:	200001e0 	.word	0x200001e0

08007720 <__ieee754_pow>:
 8007720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	b093      	sub	sp, #76	; 0x4c
 8007726:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800772a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800772e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8007732:	4689      	mov	r9, r1
 8007734:	ea56 0102 	orrs.w	r1, r6, r2
 8007738:	4680      	mov	r8, r0
 800773a:	d111      	bne.n	8007760 <__ieee754_pow+0x40>
 800773c:	1803      	adds	r3, r0, r0
 800773e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8007742:	4152      	adcs	r2, r2
 8007744:	4299      	cmp	r1, r3
 8007746:	4b82      	ldr	r3, [pc, #520]	; (8007950 <__ieee754_pow+0x230>)
 8007748:	4193      	sbcs	r3, r2
 800774a:	f080 84ba 	bcs.w	80080c2 <__ieee754_pow+0x9a2>
 800774e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007752:	4640      	mov	r0, r8
 8007754:	4649      	mov	r1, r9
 8007756:	f7f8 fd09 	bl	800016c <__adddf3>
 800775a:	4683      	mov	fp, r0
 800775c:	468c      	mov	ip, r1
 800775e:	e06f      	b.n	8007840 <__ieee754_pow+0x120>
 8007760:	4b7c      	ldr	r3, [pc, #496]	; (8007954 <__ieee754_pow+0x234>)
 8007762:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8007766:	429c      	cmp	r4, r3
 8007768:	464d      	mov	r5, r9
 800776a:	4682      	mov	sl, r0
 800776c:	dc06      	bgt.n	800777c <__ieee754_pow+0x5c>
 800776e:	d101      	bne.n	8007774 <__ieee754_pow+0x54>
 8007770:	2800      	cmp	r0, #0
 8007772:	d1ec      	bne.n	800774e <__ieee754_pow+0x2e>
 8007774:	429e      	cmp	r6, r3
 8007776:	dc01      	bgt.n	800777c <__ieee754_pow+0x5c>
 8007778:	d10f      	bne.n	800779a <__ieee754_pow+0x7a>
 800777a:	b172      	cbz	r2, 800779a <__ieee754_pow+0x7a>
 800777c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007780:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007784:	ea55 050a 	orrs.w	r5, r5, sl
 8007788:	d1e1      	bne.n	800774e <__ieee754_pow+0x2e>
 800778a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800778e:	18db      	adds	r3, r3, r3
 8007790:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007794:	4152      	adcs	r2, r2
 8007796:	429d      	cmp	r5, r3
 8007798:	e7d5      	b.n	8007746 <__ieee754_pow+0x26>
 800779a:	2d00      	cmp	r5, #0
 800779c:	da39      	bge.n	8007812 <__ieee754_pow+0xf2>
 800779e:	4b6e      	ldr	r3, [pc, #440]	; (8007958 <__ieee754_pow+0x238>)
 80077a0:	429e      	cmp	r6, r3
 80077a2:	dc52      	bgt.n	800784a <__ieee754_pow+0x12a>
 80077a4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80077a8:	429e      	cmp	r6, r3
 80077aa:	f340 849d 	ble.w	80080e8 <__ieee754_pow+0x9c8>
 80077ae:	1533      	asrs	r3, r6, #20
 80077b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80077b4:	2b14      	cmp	r3, #20
 80077b6:	dd0f      	ble.n	80077d8 <__ieee754_pow+0xb8>
 80077b8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80077bc:	fa22 f103 	lsr.w	r1, r2, r3
 80077c0:	fa01 f303 	lsl.w	r3, r1, r3
 80077c4:	4293      	cmp	r3, r2
 80077c6:	f040 848f 	bne.w	80080e8 <__ieee754_pow+0x9c8>
 80077ca:	f001 0101 	and.w	r1, r1, #1
 80077ce:	f1c1 0302 	rsb	r3, r1, #2
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	b182      	cbz	r2, 80077f8 <__ieee754_pow+0xd8>
 80077d6:	e05d      	b.n	8007894 <__ieee754_pow+0x174>
 80077d8:	2a00      	cmp	r2, #0
 80077da:	d159      	bne.n	8007890 <__ieee754_pow+0x170>
 80077dc:	f1c3 0314 	rsb	r3, r3, #20
 80077e0:	fa46 f103 	asr.w	r1, r6, r3
 80077e4:	fa01 f303 	lsl.w	r3, r1, r3
 80077e8:	42b3      	cmp	r3, r6
 80077ea:	f040 847a 	bne.w	80080e2 <__ieee754_pow+0x9c2>
 80077ee:	f001 0101 	and.w	r1, r1, #1
 80077f2:	f1c1 0302 	rsb	r3, r1, #2
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	4b58      	ldr	r3, [pc, #352]	; (800795c <__ieee754_pow+0x23c>)
 80077fa:	429e      	cmp	r6, r3
 80077fc:	d132      	bne.n	8007864 <__ieee754_pow+0x144>
 80077fe:	2f00      	cmp	r7, #0
 8007800:	f280 846b 	bge.w	80080da <__ieee754_pow+0x9ba>
 8007804:	4642      	mov	r2, r8
 8007806:	464b      	mov	r3, r9
 8007808:	2000      	movs	r0, #0
 800780a:	4954      	ldr	r1, [pc, #336]	; (800795c <__ieee754_pow+0x23c>)
 800780c:	f7f8 ff8e 	bl	800072c <__aeabi_ddiv>
 8007810:	e7a3      	b.n	800775a <__ieee754_pow+0x3a>
 8007812:	2300      	movs	r3, #0
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	2a00      	cmp	r2, #0
 8007818:	d13c      	bne.n	8007894 <__ieee754_pow+0x174>
 800781a:	4b4e      	ldr	r3, [pc, #312]	; (8007954 <__ieee754_pow+0x234>)
 800781c:	429e      	cmp	r6, r3
 800781e:	d1eb      	bne.n	80077f8 <__ieee754_pow+0xd8>
 8007820:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007824:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007828:	ea53 030a 	orrs.w	r3, r3, sl
 800782c:	f000 8449 	beq.w	80080c2 <__ieee754_pow+0x9a2>
 8007830:	4b4b      	ldr	r3, [pc, #300]	; (8007960 <__ieee754_pow+0x240>)
 8007832:	429c      	cmp	r4, r3
 8007834:	dd0b      	ble.n	800784e <__ieee754_pow+0x12e>
 8007836:	2f00      	cmp	r7, #0
 8007838:	f2c0 8449 	blt.w	80080ce <__ieee754_pow+0x9ae>
 800783c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007840:	4658      	mov	r0, fp
 8007842:	4661      	mov	r1, ip
 8007844:	b013      	add	sp, #76	; 0x4c
 8007846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800784a:	2302      	movs	r3, #2
 800784c:	e7e2      	b.n	8007814 <__ieee754_pow+0xf4>
 800784e:	2f00      	cmp	r7, #0
 8007850:	f04f 0b00 	mov.w	fp, #0
 8007854:	f04f 0c00 	mov.w	ip, #0
 8007858:	daf2      	bge.n	8007840 <__ieee754_pow+0x120>
 800785a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800785e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8007862:	e7ed      	b.n	8007840 <__ieee754_pow+0x120>
 8007864:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007868:	d106      	bne.n	8007878 <__ieee754_pow+0x158>
 800786a:	4642      	mov	r2, r8
 800786c:	464b      	mov	r3, r9
 800786e:	4640      	mov	r0, r8
 8007870:	4649      	mov	r1, r9
 8007872:	f7f8 fe31 	bl	80004d8 <__aeabi_dmul>
 8007876:	e770      	b.n	800775a <__ieee754_pow+0x3a>
 8007878:	4b3a      	ldr	r3, [pc, #232]	; (8007964 <__ieee754_pow+0x244>)
 800787a:	429f      	cmp	r7, r3
 800787c:	d10a      	bne.n	8007894 <__ieee754_pow+0x174>
 800787e:	2d00      	cmp	r5, #0
 8007880:	db08      	blt.n	8007894 <__ieee754_pow+0x174>
 8007882:	4640      	mov	r0, r8
 8007884:	4649      	mov	r1, r9
 8007886:	b013      	add	sp, #76	; 0x4c
 8007888:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788c:	f7ff be70 	b.w	8007570 <__ieee754_sqrt>
 8007890:	2300      	movs	r3, #0
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	4640      	mov	r0, r8
 8007896:	4649      	mov	r1, r9
 8007898:	f7ff fe60 	bl	800755c <fabs>
 800789c:	4683      	mov	fp, r0
 800789e:	468c      	mov	ip, r1
 80078a0:	f1ba 0f00 	cmp.w	sl, #0
 80078a4:	d128      	bne.n	80078f8 <__ieee754_pow+0x1d8>
 80078a6:	b124      	cbz	r4, 80078b2 <__ieee754_pow+0x192>
 80078a8:	4b2c      	ldr	r3, [pc, #176]	; (800795c <__ieee754_pow+0x23c>)
 80078aa:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d122      	bne.n	80078f8 <__ieee754_pow+0x1d8>
 80078b2:	2f00      	cmp	r7, #0
 80078b4:	da07      	bge.n	80078c6 <__ieee754_pow+0x1a6>
 80078b6:	465a      	mov	r2, fp
 80078b8:	4663      	mov	r3, ip
 80078ba:	2000      	movs	r0, #0
 80078bc:	4927      	ldr	r1, [pc, #156]	; (800795c <__ieee754_pow+0x23c>)
 80078be:	f7f8 ff35 	bl	800072c <__aeabi_ddiv>
 80078c2:	4683      	mov	fp, r0
 80078c4:	468c      	mov	ip, r1
 80078c6:	2d00      	cmp	r5, #0
 80078c8:	daba      	bge.n	8007840 <__ieee754_pow+0x120>
 80078ca:	9b00      	ldr	r3, [sp, #0]
 80078cc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80078d0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80078d4:	431c      	orrs	r4, r3
 80078d6:	d108      	bne.n	80078ea <__ieee754_pow+0x1ca>
 80078d8:	465a      	mov	r2, fp
 80078da:	4663      	mov	r3, ip
 80078dc:	4658      	mov	r0, fp
 80078de:	4661      	mov	r1, ip
 80078e0:	f7f8 fc42 	bl	8000168 <__aeabi_dsub>
 80078e4:	4602      	mov	r2, r0
 80078e6:	460b      	mov	r3, r1
 80078e8:	e790      	b.n	800780c <__ieee754_pow+0xec>
 80078ea:	9b00      	ldr	r3, [sp, #0]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d1a7      	bne.n	8007840 <__ieee754_pow+0x120>
 80078f0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80078f4:	469c      	mov	ip, r3
 80078f6:	e7a3      	b.n	8007840 <__ieee754_pow+0x120>
 80078f8:	0feb      	lsrs	r3, r5, #31
 80078fa:	3b01      	subs	r3, #1
 80078fc:	930c      	str	r3, [sp, #48]	; 0x30
 80078fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007900:	9b00      	ldr	r3, [sp, #0]
 8007902:	4313      	orrs	r3, r2
 8007904:	d104      	bne.n	8007910 <__ieee754_pow+0x1f0>
 8007906:	4642      	mov	r2, r8
 8007908:	464b      	mov	r3, r9
 800790a:	4640      	mov	r0, r8
 800790c:	4649      	mov	r1, r9
 800790e:	e7e7      	b.n	80078e0 <__ieee754_pow+0x1c0>
 8007910:	4b15      	ldr	r3, [pc, #84]	; (8007968 <__ieee754_pow+0x248>)
 8007912:	429e      	cmp	r6, r3
 8007914:	f340 80f6 	ble.w	8007b04 <__ieee754_pow+0x3e4>
 8007918:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800791c:	429e      	cmp	r6, r3
 800791e:	4b10      	ldr	r3, [pc, #64]	; (8007960 <__ieee754_pow+0x240>)
 8007920:	dd09      	ble.n	8007936 <__ieee754_pow+0x216>
 8007922:	429c      	cmp	r4, r3
 8007924:	dc0c      	bgt.n	8007940 <__ieee754_pow+0x220>
 8007926:	2f00      	cmp	r7, #0
 8007928:	da0c      	bge.n	8007944 <__ieee754_pow+0x224>
 800792a:	2000      	movs	r0, #0
 800792c:	b013      	add	sp, #76	; 0x4c
 800792e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007932:	f000 bcae 	b.w	8008292 <__math_oflow>
 8007936:	429c      	cmp	r4, r3
 8007938:	dbf5      	blt.n	8007926 <__ieee754_pow+0x206>
 800793a:	4b08      	ldr	r3, [pc, #32]	; (800795c <__ieee754_pow+0x23c>)
 800793c:	429c      	cmp	r4, r3
 800793e:	dd15      	ble.n	800796c <__ieee754_pow+0x24c>
 8007940:	2f00      	cmp	r7, #0
 8007942:	dcf2      	bgt.n	800792a <__ieee754_pow+0x20a>
 8007944:	2000      	movs	r0, #0
 8007946:	b013      	add	sp, #76	; 0x4c
 8007948:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794c:	f000 bc9c 	b.w	8008288 <__math_uflow>
 8007950:	fff00000 	.word	0xfff00000
 8007954:	7ff00000 	.word	0x7ff00000
 8007958:	433fffff 	.word	0x433fffff
 800795c:	3ff00000 	.word	0x3ff00000
 8007960:	3fefffff 	.word	0x3fefffff
 8007964:	3fe00000 	.word	0x3fe00000
 8007968:	41e00000 	.word	0x41e00000
 800796c:	4661      	mov	r1, ip
 800796e:	2200      	movs	r2, #0
 8007970:	4658      	mov	r0, fp
 8007972:	4b5f      	ldr	r3, [pc, #380]	; (8007af0 <__ieee754_pow+0x3d0>)
 8007974:	f7f8 fbf8 	bl	8000168 <__aeabi_dsub>
 8007978:	a355      	add	r3, pc, #340	; (adr r3, 8007ad0 <__ieee754_pow+0x3b0>)
 800797a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797e:	4604      	mov	r4, r0
 8007980:	460d      	mov	r5, r1
 8007982:	f7f8 fda9 	bl	80004d8 <__aeabi_dmul>
 8007986:	a354      	add	r3, pc, #336	; (adr r3, 8007ad8 <__ieee754_pow+0x3b8>)
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	4606      	mov	r6, r0
 800798e:	460f      	mov	r7, r1
 8007990:	4620      	mov	r0, r4
 8007992:	4629      	mov	r1, r5
 8007994:	f7f8 fda0 	bl	80004d8 <__aeabi_dmul>
 8007998:	2200      	movs	r2, #0
 800799a:	4682      	mov	sl, r0
 800799c:	468b      	mov	fp, r1
 800799e:	4620      	mov	r0, r4
 80079a0:	4629      	mov	r1, r5
 80079a2:	4b54      	ldr	r3, [pc, #336]	; (8007af4 <__ieee754_pow+0x3d4>)
 80079a4:	f7f8 fd98 	bl	80004d8 <__aeabi_dmul>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	a14c      	add	r1, pc, #304	; (adr r1, 8007ae0 <__ieee754_pow+0x3c0>)
 80079ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079b2:	f7f8 fbd9 	bl	8000168 <__aeabi_dsub>
 80079b6:	4622      	mov	r2, r4
 80079b8:	462b      	mov	r3, r5
 80079ba:	f7f8 fd8d 	bl	80004d8 <__aeabi_dmul>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	2000      	movs	r0, #0
 80079c4:	494c      	ldr	r1, [pc, #304]	; (8007af8 <__ieee754_pow+0x3d8>)
 80079c6:	f7f8 fbcf 	bl	8000168 <__aeabi_dsub>
 80079ca:	4622      	mov	r2, r4
 80079cc:	462b      	mov	r3, r5
 80079ce:	4680      	mov	r8, r0
 80079d0:	4689      	mov	r9, r1
 80079d2:	4620      	mov	r0, r4
 80079d4:	4629      	mov	r1, r5
 80079d6:	f7f8 fd7f 	bl	80004d8 <__aeabi_dmul>
 80079da:	4602      	mov	r2, r0
 80079dc:	460b      	mov	r3, r1
 80079de:	4640      	mov	r0, r8
 80079e0:	4649      	mov	r1, r9
 80079e2:	f7f8 fd79 	bl	80004d8 <__aeabi_dmul>
 80079e6:	a340      	add	r3, pc, #256	; (adr r3, 8007ae8 <__ieee754_pow+0x3c8>)
 80079e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ec:	f7f8 fd74 	bl	80004d8 <__aeabi_dmul>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	4650      	mov	r0, sl
 80079f6:	4659      	mov	r1, fp
 80079f8:	f7f8 fbb6 	bl	8000168 <__aeabi_dsub>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4604      	mov	r4, r0
 8007a02:	460d      	mov	r5, r1
 8007a04:	4630      	mov	r0, r6
 8007a06:	4639      	mov	r1, r7
 8007a08:	f7f8 fbb0 	bl	800016c <__adddf3>
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	4632      	mov	r2, r6
 8007a10:	463b      	mov	r3, r7
 8007a12:	4682      	mov	sl, r0
 8007a14:	468b      	mov	fp, r1
 8007a16:	f7f8 fba7 	bl	8000168 <__aeabi_dsub>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4620      	mov	r0, r4
 8007a20:	4629      	mov	r1, r5
 8007a22:	f7f8 fba1 	bl	8000168 <__aeabi_dsub>
 8007a26:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007a2a:	9b00      	ldr	r3, [sp, #0]
 8007a2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	4313      	orrs	r3, r2
 8007a32:	f04f 0600 	mov.w	r6, #0
 8007a36:	f04f 0200 	mov.w	r2, #0
 8007a3a:	bf0c      	ite	eq
 8007a3c:	4b2f      	ldreq	r3, [pc, #188]	; (8007afc <__ieee754_pow+0x3dc>)
 8007a3e:	4b2c      	ldrne	r3, [pc, #176]	; (8007af0 <__ieee754_pow+0x3d0>)
 8007a40:	4604      	mov	r4, r0
 8007a42:	460d      	mov	r5, r1
 8007a44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a48:	e9cd 2300 	strd	r2, r3, [sp]
 8007a4c:	4632      	mov	r2, r6
 8007a4e:	463b      	mov	r3, r7
 8007a50:	f7f8 fb8a 	bl	8000168 <__aeabi_dsub>
 8007a54:	4652      	mov	r2, sl
 8007a56:	465b      	mov	r3, fp
 8007a58:	f7f8 fd3e 	bl	80004d8 <__aeabi_dmul>
 8007a5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a60:	4680      	mov	r8, r0
 8007a62:	4689      	mov	r9, r1
 8007a64:	4620      	mov	r0, r4
 8007a66:	4629      	mov	r1, r5
 8007a68:	f7f8 fd36 	bl	80004d8 <__aeabi_dmul>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4640      	mov	r0, r8
 8007a72:	4649      	mov	r1, r9
 8007a74:	f7f8 fb7a 	bl	800016c <__adddf3>
 8007a78:	4632      	mov	r2, r6
 8007a7a:	463b      	mov	r3, r7
 8007a7c:	4680      	mov	r8, r0
 8007a7e:	4689      	mov	r9, r1
 8007a80:	4650      	mov	r0, sl
 8007a82:	4659      	mov	r1, fp
 8007a84:	f7f8 fd28 	bl	80004d8 <__aeabi_dmul>
 8007a88:	4604      	mov	r4, r0
 8007a8a:	460d      	mov	r5, r1
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	4602      	mov	r2, r0
 8007a90:	4649      	mov	r1, r9
 8007a92:	4640      	mov	r0, r8
 8007a94:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007a98:	f7f8 fb68 	bl	800016c <__adddf3>
 8007a9c:	4b18      	ldr	r3, [pc, #96]	; (8007b00 <__ieee754_pow+0x3e0>)
 8007a9e:	4682      	mov	sl, r0
 8007aa0:	4299      	cmp	r1, r3
 8007aa2:	460f      	mov	r7, r1
 8007aa4:	460e      	mov	r6, r1
 8007aa6:	f340 82e7 	ble.w	8008078 <__ieee754_pow+0x958>
 8007aaa:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007aae:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007ab2:	4303      	orrs	r3, r0
 8007ab4:	f000 81e2 	beq.w	8007e7c <__ieee754_pow+0x75c>
 8007ab8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007abc:	2200      	movs	r2, #0
 8007abe:	2300      	movs	r3, #0
 8007ac0:	f7f8 ff7c 	bl	80009bc <__aeabi_dcmplt>
 8007ac4:	3800      	subs	r0, #0
 8007ac6:	bf18      	it	ne
 8007ac8:	2001      	movne	r0, #1
 8007aca:	e72f      	b.n	800792c <__ieee754_pow+0x20c>
 8007acc:	f3af 8000 	nop.w
 8007ad0:	60000000 	.word	0x60000000
 8007ad4:	3ff71547 	.word	0x3ff71547
 8007ad8:	f85ddf44 	.word	0xf85ddf44
 8007adc:	3e54ae0b 	.word	0x3e54ae0b
 8007ae0:	55555555 	.word	0x55555555
 8007ae4:	3fd55555 	.word	0x3fd55555
 8007ae8:	652b82fe 	.word	0x652b82fe
 8007aec:	3ff71547 	.word	0x3ff71547
 8007af0:	3ff00000 	.word	0x3ff00000
 8007af4:	3fd00000 	.word	0x3fd00000
 8007af8:	3fe00000 	.word	0x3fe00000
 8007afc:	bff00000 	.word	0xbff00000
 8007b00:	408fffff 	.word	0x408fffff
 8007b04:	4bd4      	ldr	r3, [pc, #848]	; (8007e58 <__ieee754_pow+0x738>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	402b      	ands	r3, r5
 8007b0a:	b943      	cbnz	r3, 8007b1e <__ieee754_pow+0x3fe>
 8007b0c:	4658      	mov	r0, fp
 8007b0e:	4661      	mov	r1, ip
 8007b10:	4bd2      	ldr	r3, [pc, #840]	; (8007e5c <__ieee754_pow+0x73c>)
 8007b12:	f7f8 fce1 	bl	80004d8 <__aeabi_dmul>
 8007b16:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007b1a:	4683      	mov	fp, r0
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	1523      	asrs	r3, r4, #20
 8007b20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007b24:	4413      	add	r3, r2
 8007b26:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b28:	4bcd      	ldr	r3, [pc, #820]	; (8007e60 <__ieee754_pow+0x740>)
 8007b2a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007b2e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007b32:	429c      	cmp	r4, r3
 8007b34:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007b38:	dd08      	ble.n	8007b4c <__ieee754_pow+0x42c>
 8007b3a:	4bca      	ldr	r3, [pc, #808]	; (8007e64 <__ieee754_pow+0x744>)
 8007b3c:	429c      	cmp	r4, r3
 8007b3e:	f340 8164 	ble.w	8007e0a <__ieee754_pow+0x6ea>
 8007b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b44:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007b48:	3301      	adds	r3, #1
 8007b4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b4c:	2600      	movs	r6, #0
 8007b4e:	00f3      	lsls	r3, r6, #3
 8007b50:	930d      	str	r3, [sp, #52]	; 0x34
 8007b52:	4bc5      	ldr	r3, [pc, #788]	; (8007e68 <__ieee754_pow+0x748>)
 8007b54:	4658      	mov	r0, fp
 8007b56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007b5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b5e:	4629      	mov	r1, r5
 8007b60:	461a      	mov	r2, r3
 8007b62:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007b66:	4623      	mov	r3, r4
 8007b68:	f7f8 fafe 	bl	8000168 <__aeabi_dsub>
 8007b6c:	46da      	mov	sl, fp
 8007b6e:	462b      	mov	r3, r5
 8007b70:	4652      	mov	r2, sl
 8007b72:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007b76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b7a:	f7f8 faf7 	bl	800016c <__adddf3>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	2000      	movs	r0, #0
 8007b84:	49b9      	ldr	r1, [pc, #740]	; (8007e6c <__ieee754_pow+0x74c>)
 8007b86:	f7f8 fdd1 	bl	800072c <__aeabi_ddiv>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007b92:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007b96:	f7f8 fc9f 	bl	80004d8 <__aeabi_dmul>
 8007b9a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007b9e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007ba2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	2200      	movs	r2, #0
 8007baa:	46ab      	mov	fp, r5
 8007bac:	106d      	asrs	r5, r5, #1
 8007bae:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007bb2:	9304      	str	r3, [sp, #16]
 8007bb4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007bb8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007bbc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007bc0:	4640      	mov	r0, r8
 8007bc2:	4649      	mov	r1, r9
 8007bc4:	4614      	mov	r4, r2
 8007bc6:	461d      	mov	r5, r3
 8007bc8:	f7f8 fc86 	bl	80004d8 <__aeabi_dmul>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007bd4:	f7f8 fac8 	bl	8000168 <__aeabi_dsub>
 8007bd8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007bdc:	4606      	mov	r6, r0
 8007bde:	460f      	mov	r7, r1
 8007be0:	4620      	mov	r0, r4
 8007be2:	4629      	mov	r1, r5
 8007be4:	f7f8 fac0 	bl	8000168 <__aeabi_dsub>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	4650      	mov	r0, sl
 8007bee:	4659      	mov	r1, fp
 8007bf0:	f7f8 faba 	bl	8000168 <__aeabi_dsub>
 8007bf4:	4642      	mov	r2, r8
 8007bf6:	464b      	mov	r3, r9
 8007bf8:	f7f8 fc6e 	bl	80004d8 <__aeabi_dmul>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4630      	mov	r0, r6
 8007c02:	4639      	mov	r1, r7
 8007c04:	f7f8 fab0 	bl	8000168 <__aeabi_dsub>
 8007c08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c0c:	f7f8 fc64 	bl	80004d8 <__aeabi_dmul>
 8007c10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c14:	4682      	mov	sl, r0
 8007c16:	468b      	mov	fp, r1
 8007c18:	4610      	mov	r0, r2
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	f7f8 fc5c 	bl	80004d8 <__aeabi_dmul>
 8007c20:	a37b      	add	r3, pc, #492	; (adr r3, 8007e10 <__ieee754_pow+0x6f0>)
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	4604      	mov	r4, r0
 8007c28:	460d      	mov	r5, r1
 8007c2a:	f7f8 fc55 	bl	80004d8 <__aeabi_dmul>
 8007c2e:	a37a      	add	r3, pc, #488	; (adr r3, 8007e18 <__ieee754_pow+0x6f8>)
 8007c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c34:	f7f8 fa9a 	bl	800016c <__adddf3>
 8007c38:	4622      	mov	r2, r4
 8007c3a:	462b      	mov	r3, r5
 8007c3c:	f7f8 fc4c 	bl	80004d8 <__aeabi_dmul>
 8007c40:	a377      	add	r3, pc, #476	; (adr r3, 8007e20 <__ieee754_pow+0x700>)
 8007c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c46:	f7f8 fa91 	bl	800016c <__adddf3>
 8007c4a:	4622      	mov	r2, r4
 8007c4c:	462b      	mov	r3, r5
 8007c4e:	f7f8 fc43 	bl	80004d8 <__aeabi_dmul>
 8007c52:	a375      	add	r3, pc, #468	; (adr r3, 8007e28 <__ieee754_pow+0x708>)
 8007c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c58:	f7f8 fa88 	bl	800016c <__adddf3>
 8007c5c:	4622      	mov	r2, r4
 8007c5e:	462b      	mov	r3, r5
 8007c60:	f7f8 fc3a 	bl	80004d8 <__aeabi_dmul>
 8007c64:	a372      	add	r3, pc, #456	; (adr r3, 8007e30 <__ieee754_pow+0x710>)
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	f7f8 fa7f 	bl	800016c <__adddf3>
 8007c6e:	4622      	mov	r2, r4
 8007c70:	462b      	mov	r3, r5
 8007c72:	f7f8 fc31 	bl	80004d8 <__aeabi_dmul>
 8007c76:	a370      	add	r3, pc, #448	; (adr r3, 8007e38 <__ieee754_pow+0x718>)
 8007c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7c:	f7f8 fa76 	bl	800016c <__adddf3>
 8007c80:	4622      	mov	r2, r4
 8007c82:	4606      	mov	r6, r0
 8007c84:	460f      	mov	r7, r1
 8007c86:	462b      	mov	r3, r5
 8007c88:	4620      	mov	r0, r4
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	f7f8 fc24 	bl	80004d8 <__aeabi_dmul>
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	4630      	mov	r0, r6
 8007c96:	4639      	mov	r1, r7
 8007c98:	f7f8 fc1e 	bl	80004d8 <__aeabi_dmul>
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	460d      	mov	r5, r1
 8007ca0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ca4:	4642      	mov	r2, r8
 8007ca6:	464b      	mov	r3, r9
 8007ca8:	f7f8 fa60 	bl	800016c <__adddf3>
 8007cac:	4652      	mov	r2, sl
 8007cae:	465b      	mov	r3, fp
 8007cb0:	f7f8 fc12 	bl	80004d8 <__aeabi_dmul>
 8007cb4:	4622      	mov	r2, r4
 8007cb6:	462b      	mov	r3, r5
 8007cb8:	f7f8 fa58 	bl	800016c <__adddf3>
 8007cbc:	4642      	mov	r2, r8
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	460f      	mov	r7, r1
 8007cc2:	464b      	mov	r3, r9
 8007cc4:	4640      	mov	r0, r8
 8007cc6:	4649      	mov	r1, r9
 8007cc8:	f7f8 fc06 	bl	80004d8 <__aeabi_dmul>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	4b66      	ldr	r3, [pc, #408]	; (8007e70 <__ieee754_pow+0x750>)
 8007cd8:	f7f8 fa48 	bl	800016c <__adddf3>
 8007cdc:	4632      	mov	r2, r6
 8007cde:	463b      	mov	r3, r7
 8007ce0:	f7f8 fa44 	bl	800016c <__adddf3>
 8007ce4:	2400      	movs	r4, #0
 8007ce6:	460d      	mov	r5, r1
 8007ce8:	4622      	mov	r2, r4
 8007cea:	460b      	mov	r3, r1
 8007cec:	4640      	mov	r0, r8
 8007cee:	4649      	mov	r1, r9
 8007cf0:	f7f8 fbf2 	bl	80004d8 <__aeabi_dmul>
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	4680      	mov	r8, r0
 8007cf8:	4689      	mov	r9, r1
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	4629      	mov	r1, r5
 8007cfe:	4b5c      	ldr	r3, [pc, #368]	; (8007e70 <__ieee754_pow+0x750>)
 8007d00:	f7f8 fa32 	bl	8000168 <__aeabi_dsub>
 8007d04:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007d08:	f7f8 fa2e 	bl	8000168 <__aeabi_dsub>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	4630      	mov	r0, r6
 8007d12:	4639      	mov	r1, r7
 8007d14:	f7f8 fa28 	bl	8000168 <__aeabi_dsub>
 8007d18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d1c:	f7f8 fbdc 	bl	80004d8 <__aeabi_dmul>
 8007d20:	4622      	mov	r2, r4
 8007d22:	4606      	mov	r6, r0
 8007d24:	460f      	mov	r7, r1
 8007d26:	462b      	mov	r3, r5
 8007d28:	4650      	mov	r0, sl
 8007d2a:	4659      	mov	r1, fp
 8007d2c:	f7f8 fbd4 	bl	80004d8 <__aeabi_dmul>
 8007d30:	4602      	mov	r2, r0
 8007d32:	460b      	mov	r3, r1
 8007d34:	4630      	mov	r0, r6
 8007d36:	4639      	mov	r1, r7
 8007d38:	f7f8 fa18 	bl	800016c <__adddf3>
 8007d3c:	2400      	movs	r4, #0
 8007d3e:	4606      	mov	r6, r0
 8007d40:	460f      	mov	r7, r1
 8007d42:	4602      	mov	r2, r0
 8007d44:	460b      	mov	r3, r1
 8007d46:	4640      	mov	r0, r8
 8007d48:	4649      	mov	r1, r9
 8007d4a:	f7f8 fa0f 	bl	800016c <__adddf3>
 8007d4e:	a33c      	add	r3, pc, #240	; (adr r3, 8007e40 <__ieee754_pow+0x720>)
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	4620      	mov	r0, r4
 8007d56:	460d      	mov	r5, r1
 8007d58:	f7f8 fbbe 	bl	80004d8 <__aeabi_dmul>
 8007d5c:	4642      	mov	r2, r8
 8007d5e:	464b      	mov	r3, r9
 8007d60:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007d64:	4620      	mov	r0, r4
 8007d66:	4629      	mov	r1, r5
 8007d68:	f7f8 f9fe 	bl	8000168 <__aeabi_dsub>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4630      	mov	r0, r6
 8007d72:	4639      	mov	r1, r7
 8007d74:	f7f8 f9f8 	bl	8000168 <__aeabi_dsub>
 8007d78:	a333      	add	r3, pc, #204	; (adr r3, 8007e48 <__ieee754_pow+0x728>)
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	f7f8 fbab 	bl	80004d8 <__aeabi_dmul>
 8007d82:	a333      	add	r3, pc, #204	; (adr r3, 8007e50 <__ieee754_pow+0x730>)
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	4606      	mov	r6, r0
 8007d8a:	460f      	mov	r7, r1
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	4629      	mov	r1, r5
 8007d90:	f7f8 fba2 	bl	80004d8 <__aeabi_dmul>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4630      	mov	r0, r6
 8007d9a:	4639      	mov	r1, r7
 8007d9c:	f7f8 f9e6 	bl	800016c <__adddf3>
 8007da0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007da2:	4b34      	ldr	r3, [pc, #208]	; (8007e74 <__ieee754_pow+0x754>)
 8007da4:	4413      	add	r3, r2
 8007da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007daa:	f7f8 f9df 	bl	800016c <__adddf3>
 8007dae:	4680      	mov	r8, r0
 8007db0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007db2:	4689      	mov	r9, r1
 8007db4:	f7f8 fb26 	bl	8000404 <__aeabi_i2d>
 8007db8:	4604      	mov	r4, r0
 8007dba:	460d      	mov	r5, r1
 8007dbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dc2:	4b2d      	ldr	r3, [pc, #180]	; (8007e78 <__ieee754_pow+0x758>)
 8007dc4:	4413      	add	r3, r2
 8007dc6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007dca:	4642      	mov	r2, r8
 8007dcc:	464b      	mov	r3, r9
 8007dce:	f7f8 f9cd 	bl	800016c <__adddf3>
 8007dd2:	4632      	mov	r2, r6
 8007dd4:	463b      	mov	r3, r7
 8007dd6:	f7f8 f9c9 	bl	800016c <__adddf3>
 8007dda:	4622      	mov	r2, r4
 8007ddc:	462b      	mov	r3, r5
 8007dde:	f7f8 f9c5 	bl	800016c <__adddf3>
 8007de2:	2000      	movs	r0, #0
 8007de4:	4622      	mov	r2, r4
 8007de6:	462b      	mov	r3, r5
 8007de8:	4682      	mov	sl, r0
 8007dea:	468b      	mov	fp, r1
 8007dec:	f7f8 f9bc 	bl	8000168 <__aeabi_dsub>
 8007df0:	4632      	mov	r2, r6
 8007df2:	463b      	mov	r3, r7
 8007df4:	f7f8 f9b8 	bl	8000168 <__aeabi_dsub>
 8007df8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007dfc:	f7f8 f9b4 	bl	8000168 <__aeabi_dsub>
 8007e00:	4602      	mov	r2, r0
 8007e02:	460b      	mov	r3, r1
 8007e04:	4640      	mov	r0, r8
 8007e06:	4649      	mov	r1, r9
 8007e08:	e60b      	b.n	8007a22 <__ieee754_pow+0x302>
 8007e0a:	2601      	movs	r6, #1
 8007e0c:	e69f      	b.n	8007b4e <__ieee754_pow+0x42e>
 8007e0e:	bf00      	nop
 8007e10:	4a454eef 	.word	0x4a454eef
 8007e14:	3fca7e28 	.word	0x3fca7e28
 8007e18:	93c9db65 	.word	0x93c9db65
 8007e1c:	3fcd864a 	.word	0x3fcd864a
 8007e20:	a91d4101 	.word	0xa91d4101
 8007e24:	3fd17460 	.word	0x3fd17460
 8007e28:	518f264d 	.word	0x518f264d
 8007e2c:	3fd55555 	.word	0x3fd55555
 8007e30:	db6fabff 	.word	0xdb6fabff
 8007e34:	3fdb6db6 	.word	0x3fdb6db6
 8007e38:	33333303 	.word	0x33333303
 8007e3c:	3fe33333 	.word	0x3fe33333
 8007e40:	e0000000 	.word	0xe0000000
 8007e44:	3feec709 	.word	0x3feec709
 8007e48:	dc3a03fd 	.word	0xdc3a03fd
 8007e4c:	3feec709 	.word	0x3feec709
 8007e50:	145b01f5 	.word	0x145b01f5
 8007e54:	be3e2fe0 	.word	0xbe3e2fe0
 8007e58:	7ff00000 	.word	0x7ff00000
 8007e5c:	43400000 	.word	0x43400000
 8007e60:	0003988e 	.word	0x0003988e
 8007e64:	000bb679 	.word	0x000bb679
 8007e68:	080086b8 	.word	0x080086b8
 8007e6c:	3ff00000 	.word	0x3ff00000
 8007e70:	40080000 	.word	0x40080000
 8007e74:	080086d8 	.word	0x080086d8
 8007e78:	080086c8 	.word	0x080086c8
 8007e7c:	a39c      	add	r3, pc, #624	; (adr r3, 80080f0 <__ieee754_pow+0x9d0>)
 8007e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e82:	4640      	mov	r0, r8
 8007e84:	4649      	mov	r1, r9
 8007e86:	f7f8 f971 	bl	800016c <__adddf3>
 8007e8a:	4622      	mov	r2, r4
 8007e8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e90:	462b      	mov	r3, r5
 8007e92:	4650      	mov	r0, sl
 8007e94:	4639      	mov	r1, r7
 8007e96:	f7f8 f967 	bl	8000168 <__aeabi_dsub>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ea2:	f7f8 fda9 	bl	80009f8 <__aeabi_dcmpgt>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	f47f ae06 	bne.w	8007ab8 <__ieee754_pow+0x398>
 8007eac:	4aa2      	ldr	r2, [pc, #648]	; (8008138 <__ieee754_pow+0xa18>)
 8007eae:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	f340 8100 	ble.w	80080b8 <__ieee754_pow+0x998>
 8007eb8:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007ebc:	151b      	asrs	r3, r3, #20
 8007ebe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007ec2:	fa4a fa03 	asr.w	sl, sl, r3
 8007ec6:	44b2      	add	sl, r6
 8007ec8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007ecc:	489b      	ldr	r0, [pc, #620]	; (800813c <__ieee754_pow+0xa1c>)
 8007ece:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007ed2:	4108      	asrs	r0, r1
 8007ed4:	ea00 030a 	and.w	r3, r0, sl
 8007ed8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007edc:	f1c1 0114 	rsb	r1, r1, #20
 8007ee0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007ee4:	fa4a fa01 	asr.w	sl, sl, r1
 8007ee8:	2e00      	cmp	r6, #0
 8007eea:	f04f 0200 	mov.w	r2, #0
 8007eee:	4620      	mov	r0, r4
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	bfb8      	it	lt
 8007ef4:	f1ca 0a00 	rsblt	sl, sl, #0
 8007ef8:	f7f8 f936 	bl	8000168 <__aeabi_dsub>
 8007efc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f04:	2400      	movs	r4, #0
 8007f06:	4642      	mov	r2, r8
 8007f08:	464b      	mov	r3, r9
 8007f0a:	f7f8 f92f 	bl	800016c <__adddf3>
 8007f0e:	a37a      	add	r3, pc, #488	; (adr r3, 80080f8 <__ieee754_pow+0x9d8>)
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	4620      	mov	r0, r4
 8007f16:	460d      	mov	r5, r1
 8007f18:	f7f8 fade 	bl	80004d8 <__aeabi_dmul>
 8007f1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f20:	4606      	mov	r6, r0
 8007f22:	460f      	mov	r7, r1
 8007f24:	4620      	mov	r0, r4
 8007f26:	4629      	mov	r1, r5
 8007f28:	f7f8 f91e 	bl	8000168 <__aeabi_dsub>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4640      	mov	r0, r8
 8007f32:	4649      	mov	r1, r9
 8007f34:	f7f8 f918 	bl	8000168 <__aeabi_dsub>
 8007f38:	a371      	add	r3, pc, #452	; (adr r3, 8008100 <__ieee754_pow+0x9e0>)
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	f7f8 facb 	bl	80004d8 <__aeabi_dmul>
 8007f42:	a371      	add	r3, pc, #452	; (adr r3, 8008108 <__ieee754_pow+0x9e8>)
 8007f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f48:	4680      	mov	r8, r0
 8007f4a:	4689      	mov	r9, r1
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	4629      	mov	r1, r5
 8007f50:	f7f8 fac2 	bl	80004d8 <__aeabi_dmul>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	4640      	mov	r0, r8
 8007f5a:	4649      	mov	r1, r9
 8007f5c:	f7f8 f906 	bl	800016c <__adddf3>
 8007f60:	4604      	mov	r4, r0
 8007f62:	460d      	mov	r5, r1
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	4630      	mov	r0, r6
 8007f6a:	4639      	mov	r1, r7
 8007f6c:	f7f8 f8fe 	bl	800016c <__adddf3>
 8007f70:	4632      	mov	r2, r6
 8007f72:	463b      	mov	r3, r7
 8007f74:	4680      	mov	r8, r0
 8007f76:	4689      	mov	r9, r1
 8007f78:	f7f8 f8f6 	bl	8000168 <__aeabi_dsub>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	4620      	mov	r0, r4
 8007f82:	4629      	mov	r1, r5
 8007f84:	f7f8 f8f0 	bl	8000168 <__aeabi_dsub>
 8007f88:	4642      	mov	r2, r8
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	460f      	mov	r7, r1
 8007f8e:	464b      	mov	r3, r9
 8007f90:	4640      	mov	r0, r8
 8007f92:	4649      	mov	r1, r9
 8007f94:	f7f8 faa0 	bl	80004d8 <__aeabi_dmul>
 8007f98:	a35d      	add	r3, pc, #372	; (adr r3, 8008110 <__ieee754_pow+0x9f0>)
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	460d      	mov	r5, r1
 8007fa2:	f7f8 fa99 	bl	80004d8 <__aeabi_dmul>
 8007fa6:	a35c      	add	r3, pc, #368	; (adr r3, 8008118 <__ieee754_pow+0x9f8>)
 8007fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fac:	f7f8 f8dc 	bl	8000168 <__aeabi_dsub>
 8007fb0:	4622      	mov	r2, r4
 8007fb2:	462b      	mov	r3, r5
 8007fb4:	f7f8 fa90 	bl	80004d8 <__aeabi_dmul>
 8007fb8:	a359      	add	r3, pc, #356	; (adr r3, 8008120 <__ieee754_pow+0xa00>)
 8007fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbe:	f7f8 f8d5 	bl	800016c <__adddf3>
 8007fc2:	4622      	mov	r2, r4
 8007fc4:	462b      	mov	r3, r5
 8007fc6:	f7f8 fa87 	bl	80004d8 <__aeabi_dmul>
 8007fca:	a357      	add	r3, pc, #348	; (adr r3, 8008128 <__ieee754_pow+0xa08>)
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	f7f8 f8ca 	bl	8000168 <__aeabi_dsub>
 8007fd4:	4622      	mov	r2, r4
 8007fd6:	462b      	mov	r3, r5
 8007fd8:	f7f8 fa7e 	bl	80004d8 <__aeabi_dmul>
 8007fdc:	a354      	add	r3, pc, #336	; (adr r3, 8008130 <__ieee754_pow+0xa10>)
 8007fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe2:	f7f8 f8c3 	bl	800016c <__adddf3>
 8007fe6:	4622      	mov	r2, r4
 8007fe8:	462b      	mov	r3, r5
 8007fea:	f7f8 fa75 	bl	80004d8 <__aeabi_dmul>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	4640      	mov	r0, r8
 8007ff4:	4649      	mov	r1, r9
 8007ff6:	f7f8 f8b7 	bl	8000168 <__aeabi_dsub>
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	460d      	mov	r5, r1
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	4640      	mov	r0, r8
 8008004:	4649      	mov	r1, r9
 8008006:	f7f8 fa67 	bl	80004d8 <__aeabi_dmul>
 800800a:	2200      	movs	r2, #0
 800800c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008010:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008014:	4620      	mov	r0, r4
 8008016:	4629      	mov	r1, r5
 8008018:	f7f8 f8a6 	bl	8000168 <__aeabi_dsub>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008024:	f7f8 fb82 	bl	800072c <__aeabi_ddiv>
 8008028:	4632      	mov	r2, r6
 800802a:	4604      	mov	r4, r0
 800802c:	460d      	mov	r5, r1
 800802e:	463b      	mov	r3, r7
 8008030:	4640      	mov	r0, r8
 8008032:	4649      	mov	r1, r9
 8008034:	f7f8 fa50 	bl	80004d8 <__aeabi_dmul>
 8008038:	4632      	mov	r2, r6
 800803a:	463b      	mov	r3, r7
 800803c:	f7f8 f896 	bl	800016c <__adddf3>
 8008040:	4602      	mov	r2, r0
 8008042:	460b      	mov	r3, r1
 8008044:	4620      	mov	r0, r4
 8008046:	4629      	mov	r1, r5
 8008048:	f7f8 f88e 	bl	8000168 <__aeabi_dsub>
 800804c:	4642      	mov	r2, r8
 800804e:	464b      	mov	r3, r9
 8008050:	f7f8 f88a 	bl	8000168 <__aeabi_dsub>
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	2000      	movs	r0, #0
 800805a:	4939      	ldr	r1, [pc, #228]	; (8008140 <__ieee754_pow+0xa20>)
 800805c:	f7f8 f884 	bl	8000168 <__aeabi_dsub>
 8008060:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008064:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008068:	da29      	bge.n	80080be <__ieee754_pow+0x99e>
 800806a:	4652      	mov	r2, sl
 800806c:	f000 f870 	bl	8008150 <scalbn>
 8008070:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008074:	f7ff bbfd 	b.w	8007872 <__ieee754_pow+0x152>
 8008078:	4b32      	ldr	r3, [pc, #200]	; (8008144 <__ieee754_pow+0xa24>)
 800807a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800807e:	429f      	cmp	r7, r3
 8008080:	f77f af14 	ble.w	8007eac <__ieee754_pow+0x78c>
 8008084:	4b30      	ldr	r3, [pc, #192]	; (8008148 <__ieee754_pow+0xa28>)
 8008086:	440b      	add	r3, r1
 8008088:	4303      	orrs	r3, r0
 800808a:	d009      	beq.n	80080a0 <__ieee754_pow+0x980>
 800808c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008090:	2200      	movs	r2, #0
 8008092:	2300      	movs	r3, #0
 8008094:	f7f8 fc92 	bl	80009bc <__aeabi_dcmplt>
 8008098:	3800      	subs	r0, #0
 800809a:	bf18      	it	ne
 800809c:	2001      	movne	r0, #1
 800809e:	e452      	b.n	8007946 <__ieee754_pow+0x226>
 80080a0:	4622      	mov	r2, r4
 80080a2:	462b      	mov	r3, r5
 80080a4:	f7f8 f860 	bl	8000168 <__aeabi_dsub>
 80080a8:	4642      	mov	r2, r8
 80080aa:	464b      	mov	r3, r9
 80080ac:	f7f8 fc9a 	bl	80009e4 <__aeabi_dcmpge>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	f43f aefb 	beq.w	8007eac <__ieee754_pow+0x78c>
 80080b6:	e7e9      	b.n	800808c <__ieee754_pow+0x96c>
 80080b8:	f04f 0a00 	mov.w	sl, #0
 80080bc:	e720      	b.n	8007f00 <__ieee754_pow+0x7e0>
 80080be:	4621      	mov	r1, r4
 80080c0:	e7d6      	b.n	8008070 <__ieee754_pow+0x950>
 80080c2:	f04f 0b00 	mov.w	fp, #0
 80080c6:	f8df c078 	ldr.w	ip, [pc, #120]	; 8008140 <__ieee754_pow+0xa20>
 80080ca:	f7ff bbb9 	b.w	8007840 <__ieee754_pow+0x120>
 80080ce:	f04f 0b00 	mov.w	fp, #0
 80080d2:	f04f 0c00 	mov.w	ip, #0
 80080d6:	f7ff bbb3 	b.w	8007840 <__ieee754_pow+0x120>
 80080da:	4640      	mov	r0, r8
 80080dc:	4649      	mov	r1, r9
 80080de:	f7ff bb3c 	b.w	800775a <__ieee754_pow+0x3a>
 80080e2:	9200      	str	r2, [sp, #0]
 80080e4:	f7ff bb88 	b.w	80077f8 <__ieee754_pow+0xd8>
 80080e8:	2300      	movs	r3, #0
 80080ea:	f7ff bb72 	b.w	80077d2 <__ieee754_pow+0xb2>
 80080ee:	bf00      	nop
 80080f0:	652b82fe 	.word	0x652b82fe
 80080f4:	3c971547 	.word	0x3c971547
 80080f8:	00000000 	.word	0x00000000
 80080fc:	3fe62e43 	.word	0x3fe62e43
 8008100:	fefa39ef 	.word	0xfefa39ef
 8008104:	3fe62e42 	.word	0x3fe62e42
 8008108:	0ca86c39 	.word	0x0ca86c39
 800810c:	be205c61 	.word	0xbe205c61
 8008110:	72bea4d0 	.word	0x72bea4d0
 8008114:	3e663769 	.word	0x3e663769
 8008118:	c5d26bf1 	.word	0xc5d26bf1
 800811c:	3ebbbd41 	.word	0x3ebbbd41
 8008120:	af25de2c 	.word	0xaf25de2c
 8008124:	3f11566a 	.word	0x3f11566a
 8008128:	16bebd93 	.word	0x16bebd93
 800812c:	3f66c16c 	.word	0x3f66c16c
 8008130:	5555553e 	.word	0x5555553e
 8008134:	3fc55555 	.word	0x3fc55555
 8008138:	3fe00000 	.word	0x3fe00000
 800813c:	fff00000 	.word	0xfff00000
 8008140:	3ff00000 	.word	0x3ff00000
 8008144:	4090cbff 	.word	0x4090cbff
 8008148:	3f6f3400 	.word	0x3f6f3400
 800814c:	00000000 	.word	0x00000000

08008150 <scalbn>:
 8008150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008152:	4616      	mov	r6, r2
 8008154:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008158:	4604      	mov	r4, r0
 800815a:	460d      	mov	r5, r1
 800815c:	460b      	mov	r3, r1
 800815e:	b992      	cbnz	r2, 8008186 <scalbn+0x36>
 8008160:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008164:	4303      	orrs	r3, r0
 8008166:	d03c      	beq.n	80081e2 <scalbn+0x92>
 8008168:	4b31      	ldr	r3, [pc, #196]	; (8008230 <scalbn+0xe0>)
 800816a:	2200      	movs	r2, #0
 800816c:	f7f8 f9b4 	bl	80004d8 <__aeabi_dmul>
 8008170:	4b30      	ldr	r3, [pc, #192]	; (8008234 <scalbn+0xe4>)
 8008172:	4604      	mov	r4, r0
 8008174:	429e      	cmp	r6, r3
 8008176:	460d      	mov	r5, r1
 8008178:	da0f      	bge.n	800819a <scalbn+0x4a>
 800817a:	a329      	add	r3, pc, #164	; (adr r3, 8008220 <scalbn+0xd0>)
 800817c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008180:	f7f8 f9aa 	bl	80004d8 <__aeabi_dmul>
 8008184:	e006      	b.n	8008194 <scalbn+0x44>
 8008186:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800818a:	42ba      	cmp	r2, r7
 800818c:	d109      	bne.n	80081a2 <scalbn+0x52>
 800818e:	4602      	mov	r2, r0
 8008190:	f7f7 ffec 	bl	800016c <__adddf3>
 8008194:	4604      	mov	r4, r0
 8008196:	460d      	mov	r5, r1
 8008198:	e023      	b.n	80081e2 <scalbn+0x92>
 800819a:	460b      	mov	r3, r1
 800819c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80081a0:	3a36      	subs	r2, #54	; 0x36
 80081a2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80081a6:	428e      	cmp	r6, r1
 80081a8:	dd0e      	ble.n	80081c8 <scalbn+0x78>
 80081aa:	a31f      	add	r3, pc, #124	; (adr r3, 8008228 <scalbn+0xd8>)
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80081b4:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80081b8:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80081bc:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80081c0:	481d      	ldr	r0, [pc, #116]	; (8008238 <scalbn+0xe8>)
 80081c2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80081c6:	e7db      	b.n	8008180 <scalbn+0x30>
 80081c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80081cc:	4432      	add	r2, r6
 80081ce:	428a      	cmp	r2, r1
 80081d0:	dceb      	bgt.n	80081aa <scalbn+0x5a>
 80081d2:	2a00      	cmp	r2, #0
 80081d4:	dd08      	ble.n	80081e8 <scalbn+0x98>
 80081d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80081da:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80081de:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80081e2:	4620      	mov	r0, r4
 80081e4:	4629      	mov	r1, r5
 80081e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081e8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80081ec:	da0c      	bge.n	8008208 <scalbn+0xb8>
 80081ee:	a30c      	add	r3, pc, #48	; (adr r3, 8008220 <scalbn+0xd0>)
 80081f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80081f8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80081fc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8008200:	480e      	ldr	r0, [pc, #56]	; (800823c <scalbn+0xec>)
 8008202:	f041 011f 	orr.w	r1, r1, #31
 8008206:	e7bb      	b.n	8008180 <scalbn+0x30>
 8008208:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800820c:	3236      	adds	r2, #54	; 0x36
 800820e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008212:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008216:	4620      	mov	r0, r4
 8008218:	4629      	mov	r1, r5
 800821a:	2200      	movs	r2, #0
 800821c:	4b08      	ldr	r3, [pc, #32]	; (8008240 <scalbn+0xf0>)
 800821e:	e7af      	b.n	8008180 <scalbn+0x30>
 8008220:	c2f8f359 	.word	0xc2f8f359
 8008224:	01a56e1f 	.word	0x01a56e1f
 8008228:	8800759c 	.word	0x8800759c
 800822c:	7e37e43c 	.word	0x7e37e43c
 8008230:	43500000 	.word	0x43500000
 8008234:	ffff3cb0 	.word	0xffff3cb0
 8008238:	8800759c 	.word	0x8800759c
 800823c:	c2f8f359 	.word	0xc2f8f359
 8008240:	3c900000 	.word	0x3c900000

08008244 <with_errno>:
 8008244:	b570      	push	{r4, r5, r6, lr}
 8008246:	4604      	mov	r4, r0
 8008248:	460d      	mov	r5, r1
 800824a:	4616      	mov	r6, r2
 800824c:	f7fc fed6 	bl	8004ffc <__errno>
 8008250:	4629      	mov	r1, r5
 8008252:	6006      	str	r6, [r0, #0]
 8008254:	4620      	mov	r0, r4
 8008256:	bd70      	pop	{r4, r5, r6, pc}

08008258 <xflow>:
 8008258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800825a:	4615      	mov	r5, r2
 800825c:	461c      	mov	r4, r3
 800825e:	b180      	cbz	r0, 8008282 <xflow+0x2a>
 8008260:	4610      	mov	r0, r2
 8008262:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008266:	e9cd 0100 	strd	r0, r1, [sp]
 800826a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800826e:	4628      	mov	r0, r5
 8008270:	4621      	mov	r1, r4
 8008272:	f7f8 f931 	bl	80004d8 <__aeabi_dmul>
 8008276:	2222      	movs	r2, #34	; 0x22
 8008278:	b003      	add	sp, #12
 800827a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800827e:	f7ff bfe1 	b.w	8008244 <with_errno>
 8008282:	4610      	mov	r0, r2
 8008284:	4619      	mov	r1, r3
 8008286:	e7ee      	b.n	8008266 <xflow+0xe>

08008288 <__math_uflow>:
 8008288:	2200      	movs	r2, #0
 800828a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800828e:	f7ff bfe3 	b.w	8008258 <xflow>

08008292 <__math_oflow>:
 8008292:	2200      	movs	r2, #0
 8008294:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008298:	f7ff bfde 	b.w	8008258 <xflow>

0800829c <_init>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	bf00      	nop
 80082a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a2:	bc08      	pop	{r3}
 80082a4:	469e      	mov	lr, r3
 80082a6:	4770      	bx	lr

080082a8 <_fini>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	bf00      	nop
 80082ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ae:	bc08      	pop	{r3}
 80082b0:	469e      	mov	lr, r3
 80082b2:	4770      	bx	lr
